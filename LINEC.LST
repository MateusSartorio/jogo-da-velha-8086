     1                                  ; Hiuri Liberato
     2                                  ; Mateus Ticianeli Sartorio
     3                                  ; Sistemas Embarcados I - 2023/2 - Engenharia de Computacao
     4                                  
     5                                  ; versao de 10/05/2007
     6                                  ; corrigido erro de arredondamento na rotina line.
     7                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     8                                  
     9                                  segment code
    10                                  ..start:
    11 00000000 B8[0000]                	mov 	ax, data
    12 00000003 8ED8                    	mov 	ds, ax
    13 00000005 B8[0000]                	mov 	ax, stack
    14 00000008 8ED0                    	mov 	ss, ax
    15 0000000A BC[0002]                	mov 	sp, stacktop
    16                                  
    17                                  ; salva modo atual de video (vendo como esta o modo de video da maquina)
    18 0000000D B40F                    	mov  	ah, 0Fh
    19 0000000F CD10                    	int  	10h
    20 00000011 A2[0100]                	mov  	[modo_anterior], al   
    21                                  
    22                                  ; altera modo de video para grafico 640x480 16 cores
    23 00000014 B012                    	mov     al, 12h
    24 00000016 B400                    	mov     ah, 0
    25 00000018 CD10                    	int     10h
    26                                  
    27                                  ; A partir daqui codigo desenvolvido pela gente
    28                                  desenha_ui:
    29                                  	; primeiro retangulo
    30 0000001A C606[0000]0F            	mov 	byte[cor], branco_intenso
    31 0000001F B80A00                  	mov 	ax, 10
    32 00000022 50                      	push 	ax
    33 00000023 B80A00                  	mov 	ax, 10
    34 00000026 50                      	push 	ax
    35 00000027 B87602                  	mov 	ax, 630
    36 0000002A 50                      	push 	ax
    37 0000002B B80A00                  	mov 	ax, 10
    38 0000002E 50                      	push 	ax
    39 0000002F E85D08                  	call 	line
    40                                  
    41 00000032 C606[0000]0F            	mov 	byte[cor], branco_intenso
    42 00000037 B87602                  	mov 	ax, 630
    43 0000003A 50                      	push 	ax
    44 0000003B B80A00                  	mov 	ax, 10
    45 0000003E 50                      	push 	ax
    46 0000003F B87602                  	mov 	ax, 630
    47 00000042 50                      	push 	ax
    48 00000043 B84100                  	mov 	ax, 65
    49 00000046 50                      	push 	ax
    50 00000047 E84508                  	call 	line
    51                                  
    52 0000004A C606[0000]0F            	mov byte[cor], branco_intenso
    53 0000004F B80A00                  	mov 	ax, 10
    54 00000052 50                      	push 	ax
    55 00000053 B84100                  	mov 	ax, 65
    56 00000056 50                      	push 	ax
    57 00000057 B87602                  	mov 	ax, 630
    58 0000005A 50                      	push 	ax
    59 0000005B B84100                  	mov 	ax, 65
    60 0000005E 50                      	push 	ax
    61 0000005F E82D08                  	call 	line
    62                                  
    63 00000062 C606[0000]0F            	mov 	byte[cor], branco_intenso
    64 00000067 B80A00                  	mov 	ax, 10
    65 0000006A 50                      	push 	ax
    66 0000006B B80A00                  	mov 	ax, 10
    67 0000006E 50                      	push 	ax
    68 0000006F B80A00                  	mov 	ax, 10
    69 00000072 50                      	push 	ax
    70 00000073 B84100                  	mov 	ax, 65
    71 00000076 50                      	push 	ax
    72 00000077 E81508                  	call 	line
    73                                  
    74                                  
    75                                  	; segundo retangulo
    76 0000007A C606[0000]0F            	mov 	byte[cor], branco_intenso
    77 0000007F B80A00                  	mov 	ax, 10
    78 00000082 50                      	push 	ax
    79 00000083 B84B00                  	mov 	ax, 75
    80 00000086 50                      	push 	ax
    81 00000087 B87602                  	mov 	ax, 630
    82 0000008A 50                      	push 	ax
    83 0000008B B84B00                  	mov 	ax, 75
    84 0000008E 50                      	push 	ax
    85 0000008F E8FD07                  	call 	line
    86                                  
    87 00000092 C606[0000]0F            	mov 	byte[cor], branco_intenso
    88 00000097 B87602                  	mov 	ax, 630
    89 0000009A 50                      	push 	ax
    90 0000009B B84B00                  	mov 	ax, 75
    91 0000009E 50                      	push 	ax
    92 0000009F B87602                  	mov 	ax, 630
    93 000000A2 50                      	push 	ax
    94 000000A3 B88200                  	mov 	ax, 130
    95 000000A6 50                      	push 	ax
    96 000000A7 E8E507                  	call 	line
    97                                  
    98 000000AA C606[0000]0F            	mov 	byte[cor], branco_intenso
    99 000000AF B87602                  	mov 	ax, 630
   100 000000B2 50                      	push 	ax
   101 000000B3 B88200                  	mov 	ax, 130
   102 000000B6 50                      	push 	ax
   103 000000B7 B80A00                  	mov 	ax, 10
   104 000000BA 50                      	push 	ax
   105 000000BB B88200                  	mov 	ax, 130
   106 000000BE 50                      	push 	ax
   107 000000BF E8CD07                  	call 	line
   108                                  
   109 000000C2 C606[0000]0F            	mov 	byte[cor], branco_intenso
   110 000000C7 B80A00                  	mov 	ax, 10
   111 000000CA 50                      	push 	ax
   112 000000CB B88200                  	mov 	ax, 130
   113 000000CE 50                      	push 	ax
   114 000000CF B80A00                  	mov 	ax, 10
   115 000000D2 50                      	push 	ax
   116 000000D3 B84B00                  	mov 	ax, 75
   117 000000D6 50                      	push 	ax
   118 000000D7 E8B507                  	call 	line
   119                                  
   120                                  
   121                                  	; jogo da velha
   122                                  	; horizontal
   123 000000DA C606[0000]0F            	mov 	byte[cor], branco_intenso
   124 000000DF B89B00                  	mov 	ax, 155
   125 000000E2 50                      	push 	ax
   126 000000E3 B8FA00                  	mov 	ax, 250
   127 000000E6 50                      	push 	ax
   128 000000E7 B8E501                  	mov 	ax, 485
   129 000000EA 50                      	push 	ax
   130 000000EB B8FA00                  	mov 	ax, 250
   131 000000EE 50                      	push 	ax
   132 000000EF E89D07                  	call 	line
   133                                  
   134 000000F2 C606[0000]0F            	mov 	byte[cor], branco_intenso
   135 000000F7 B89B00                  	mov 	ax, 155
   136 000000FA 50                      	push 	ax
   137 000000FB B86801                  	mov 	ax, 360
   138 000000FE 50                      	push 	ax
   139 000000FF B8E501                  	mov 	ax, 485
   140 00000102 50                      	push 	ax
   141 00000103 B86801                  	mov 	ax, 360
   142 00000106 50                      	push 	ax
   143 00000107 E88507                  	call 	line
   144                                  
   145                                  	; vertical
   146 0000010A C606[0000]0F            	mov 	byte[cor], branco_intenso
   147 0000010F B80901                  	mov 	ax, 265
   148 00000112 50                      	push 	ax
   149 00000113 B88C00                  	mov 	ax, 140
   150 00000116 50                      	push 	ax
   151 00000117 B80901                  	mov 	ax, 265
   152 0000011A 50                      	push 	ax
   153 0000011B B8D601                  	mov 	ax, 470
   154 0000011E 50                      	push 	ax
   155 0000011F E86D07                  	call 	line
   156                                  
   157 00000122 C606[0000]0F            	mov 	byte[cor], branco_intenso
   158 00000127 B87701                  	mov 	ax, 375
   159 0000012A 50                      	push 	ax
   160 0000012B B88C00                  	mov 	ax, 140
   161 0000012E 50                      	push 	ax
   162 0000012F B87701                  	mov 	ax, 375
   163 00000132 50                      	push 	ax
   164 00000133 B8D601                  	mov 	ax, 470
   165 00000136 50                      	push 	ax
   166 00000137 E85507                  	call 	line
   167                                  
   168                                  le_novo_comando:
   169 0000013A C606[7000]00            	mov	byte [novo_comando], 0
   170 0000013F C606[7100]00            	mov	byte [novo_comando + 1], 0
   171 00000144 C606[7200]00            	mov	byte [novo_comando + 2], 0
   172                                  	
   173 00000149 BB0000                  	mov	bx, 0
   174                                  loop_le_novo_comando:
   175 0000014C B401                    	mov 	ah, 1
   176 0000014E CD21                    	int 	21h
   177                                  
   178 00000150 3C0D                    	cmp	al, 0Dh
   179 00000152 742A                    	je	leu_line_feed
   180                                  	
   181 00000154 3C08                    	cmp	al, 08h
   182 00000156 7403                    	je	leu_backspace
   183 00000158 E91500                  	jmp	nao_leu_backspace
   184                                  
   185                                  leu_backspace:
   186 0000015B 81FB0000                	cmp	bx, 0
   187 0000015F 74EB                    	je	loop_le_novo_comando
   188                                  
   189 00000161 81FB0300                	cmp	bx, 3
   190 00000165 7D05                    	jge	buffer_excedido
   191                                  
   192 00000167 C687[7000]00            	mov	byte [novo_comando + bx], 0
   193                                  	
   194                                  buffer_excedido:
   195 0000016C 4B                      	dec	bx
   196 0000016D E9DCFF                  	jmp	loop_le_novo_comando
   197                                  
   198                                  nao_leu_backspace:
   199 00000170 81FB0300                	cmp	bx, 3
   200 00000174 7D1D                    	jge	excedeu_tamanho_comando
   201                                  	
   202 00000176 8887[7000]              	mov	byte [novo_comando + bx], al
   203 0000017A 43                      	inc	bx
   204 0000017B E9CEFF                  	jmp 	loop_le_novo_comando
   205                                  
   206                                  leu_line_feed:
   207 0000017E 81FB0000                	cmp	bx, 0
   208 00000182 74C8                    	je	loop_le_novo_comando
   209                                  
   210 00000184 81FB0300                	cmp	bx, 3
   211 00000188 7F03                    	jg	apertou_enter_com_comando_muito_grande
   212                                  
   213 0000018A E90A00                  	jmp	processa_novo_comando
   214                                  
   215                                  apertou_enter_com_comando_muito_grande:
   216 0000018D E82200                  	call 	imprime_comando_invalido
   217 00000190 E9A7FF                  	jmp 	le_novo_comando
   218                                  
   219                                  excedeu_tamanho_comando:
   220 00000193 43                      	inc	bx
   221 00000194 E9B5FF                  	jmp 	loop_le_novo_comando
   222                                  
   223                                  processa_novo_comando:
   224                                  	; cmp 	al, 'c'
   225                                  	; je 	novo_jogo
   226 00000197 803E[7000]73            	cmp 	byte [novo_comando], 's'
   227 0000019C 7439                    	je 	sair
   228 0000019E 803E[7000]58            	cmp 	byte [novo_comando], 'X'
   229 000001A3 7445                    	je 	processa_jogada_X
   230 000001A5 803E[7000]43            	cmp 	byte [novo_comando], 'C'
   231 000001AA 743B                    	je 	processa_jogada_C_intermediario
   232 000001AC E80300                  	call 	imprime_comando_invalido
   233 000001AF E988FF                  	jmp 	le_novo_comando
   234                                  
   235                                  
   236                                  imprime_comando_invalido:
   237 000001B2 B91000                      	mov     cx, 16			;n�mero de caracteres
   238 000001B5 BB0000                      	mov     bx, 0
   239 000001B8 B61B                        	mov     dh, 27			;linha 0-29
   240 000001BA B220                        	mov     dl, 32			;coluna 0-79
   241 000001BC C606[0000]04            	mov	byte [cor], vermelho
   242                                  
   243                                  loop_imprime_comando_invalido:
   244 000001C1 E8D404                  	call	cursor
   245 000001C4 8A87[1800]                  	mov     al, [bx + mensagem_comando_invalido]
   246 000001C8 E8E404                  	call	caracter
   247 000001CB 43                          	inc     bx			;proximo caracter
   248 000001CC FEC2                    	inc	dl			;avanca a coluna
   249 000001CE E2F1                        	loop    loop_imprime_comando_invalido
   250                                  
   251 000001D0 E80401                  	call	volta_cursor_para_0x0_e_apaga_input_anterior
   252 000001D3 C3                      	ret
   253                                  
   254                                  le_novo_comando_intermediario:
   255 000001D4 E963FF                  	jmp le_novo_comando
   256                                  
   257                                  ; novo_jogo:
   258                                  
   259                                  sair:
   260 000001D7 B408                    	mov    	ah, 08h
   261 000001D9 CD21                    	int     21h
   262 000001DB B400                    	mov  	ah, 0   					; set video mode
   263 000001DD A0[0100]                	mov  	al, [modo_anterior]   				; modo anterior
   264 000001E0 CD10                    	int  	10h
   265 000001E2 B8004C                  	mov     ax, 4c00h
   266 000001E5 CD21                    	int     21h
   267                                  
   268                                  processa_jogada_C_intermediario:
   269 000001E7 E94800                  	jmp	processa_jogada_C
   270                                  
   271                                  processa_jogada_X:
   272 000001EA 803E[8900]00            	cmp	byte [estado_partida], 0
   273 000001EF 75E3                    	jne	le_novo_comando_intermediario
   274                                  
   275 000001F1 E8BB03                  	call	calcula_posicao_i_j
   276 000001F4 E89C03                  	call	calcula_indice_array_jogadas
   277 000001F7 BE0000                  	mov	si, 0
   278 000001FA 8B36[8600]              	mov	si, word [p]
   279 000001FE 80BC[7B00]00            	cmp	byte [array_posicoes_jogadas + si], 0
   280 00000203 750A                    	jne	jogada_x_invalida
   281 00000205 803E[8800]01            	cmp	byte [ultima_jogada], 1
   282 0000020A 7403                    	je	jogada_x_invalida
   283 0000020C E90600                  	jmp	jogada_x_valida
   284                                  
   285                                  jogada_x_invalida:
   286 0000020F E86800                  	call 	imprime_jogada_invalida
   287 00000212 E9BFFF                  	jmp 	le_novo_comando_intermediario
   288                                  
   289                                  jogada_x_valida:
   290 00000215 C606[8800]01            	mov	byte [ultima_jogada], 1
   291 0000021A BE0000                  	mov	si, 0
   292 0000021D 8B36[8600]              	mov	si, word [p]
   293 00000221 C684[7B00]01            	mov	byte [array_posicoes_jogadas + si], 1
   294                                  
   295 00000226 E8F103                  	call 	desenha_x
   296 00000229 E87000                  	call	imprime_jogada
   297 0000022C E8C700                  	call	atualiza_estado_da_partida
   298 0000022F E9A2FF                  	jmp 	le_novo_comando_intermediario
   299                                  
   300                                  processa_jogada_C:
   301 00000232 803E[8900]00            	cmp	byte [estado_partida], 0
   302 00000237 759B                    	jne	le_novo_comando_intermediario
   303                                  
   304 00000239 E87303                  	call	calcula_posicao_i_j
   305 0000023C E85403                  	call	calcula_indice_array_jogadas
   306 0000023F BE0000                  	mov	si, 0
   307 00000242 8B36[8600]              	mov	si, word [p]
   308 00000246 80BC[7B00]00            	cmp	byte [array_posicoes_jogadas + si], 0
   309 0000024B 750A                    	jne	jogada_circulo_invalida
   310 0000024D 803E[8800]02            	cmp	byte [ultima_jogada], 2
   311 00000252 7403                    	je	jogada_circulo_invalida
   312 00000254 E90600                  	jmp	jogada_circulo_valida
   313                                  
   314                                  jogada_circulo_invalida:
   315 00000257 E82000                  	call 	imprime_jogada_invalida
   316 0000025A E977FF                  	jmp 	le_novo_comando_intermediario
   317                                  
   318                                  jogada_circulo_valida:
   319 0000025D C606[8800]02            	mov	byte [ultima_jogada], 2
   320 00000262 BE0000                  	mov	si, 0
   321 00000265 8B36[8600]              	mov	si, word [p]
   322 00000269 C684[7B00]02            	mov	byte [array_posicoes_jogadas + si], 2
   323                                  
   324 0000026E E87703                  	call 	desenha_circulo
   325 00000271 E82800                  	call	imprime_jogada
   326 00000274 E87F00                  	call	atualiza_estado_da_partida
   327 00000277 E95AFF                  	jmp 	le_novo_comando_intermediario
   328                                  
   329                                  imprime_jogada_invalida:
   330 0000027A B91000                      	mov     cx, 16			;n�mero de caracteres
   331 0000027D BB0000                      	mov     bx, 0
   332 00000280 B61B                        	mov     dh, 27			;linha 0-29
   333 00000282 B220                        	mov     dl, 32			;coluna 0-79
   334 00000284 C606[0000]04            	mov	byte [cor], vermelho
   335                                  
   336                                  loop_imprime_jogada_invalida:
   337 00000289 E80C04                  	call	cursor
   338 0000028C 8A87[2800]                  	mov     al, [bx + mensagem_jogada_invalida]
   339 00000290 E81C04                  	call	caracter
   340 00000293 43                          	inc     bx			;proximo caracter
   341 00000294 FEC2                    	inc	dl			;avanca a coluna
   342 00000296 E2F1                        	loop    loop_imprime_jogada_invalida
   343                                  
   344 00000298 E83C00                  	call	volta_cursor_para_0x0_e_apaga_input_anterior
   345 0000029B C3                      	ret
   346                                  
   347                                  imprime_jogada:
   348 0000029C B90300                      	mov     cx, 3			;n�mero de caracteres
   349 0000029F BB0000                      	mov     bx, 0
   350 000002A2 B617                        	mov     dh, 23			;linha 0-29
   351 000002A4 B226                        	mov     dl, 38			;coluna 0-79
   352 000002A6 803E[8800]01            	cmp	byte [ultima_jogada], 1
   353 000002AB 7407                    	je	coloca_na_cor_do_x
   354 000002AD 803E[8800]02            	cmp	byte [ultima_jogada], 2
   355 000002B2 7408                    	je	coloca_na_cor_do_circulo
   356                                  
   357                                  coloca_na_cor_do_x:
   358 000002B4 C606[0000]02            	mov	byte [cor], verde
   359 000002B9 E90800                  	jmp	loop_imprime_jogada
   360                                  
   361                                  coloca_na_cor_do_circulo:
   362 000002BC C606[0000]05            	mov	byte [cor], magenta
   363 000002C1 E90000                  	jmp	loop_imprime_jogada
   364                                  
   365                                  loop_imprime_jogada:
   366 000002C4 E8D103                  	call	cursor
   367 000002C7 8A87[7000]                  	mov     al, [bx + novo_comando]
   368 000002CB E8E103                  	call	caracter
   369 000002CE 43                          	inc     bx			;proximo caracter
   370 000002CF FEC2                    	inc	dl			;avanca a coluna
   371 000002D1 E2F1                        	loop    loop_imprime_jogada
   372                                  
   373 000002D3 E80100                  	call	volta_cursor_para_0x0_e_apaga_input_anterior
   374 000002D6 C3                      	ret
   375                                  
   376                                  volta_cursor_para_0x0_e_apaga_input_anterior:
   377 000002D7 B90300                      	mov     cx, 3			;n�mero de caracteres
   378 000002DA BB0000                      	mov     bx, 0
   379 000002DD B600                        	mov     dh, 0			;linha 0-29
   380 000002DF B200                        	mov     dl, 0			;coluna 0-79
   381 000002E1 C606[0000]00            	mov	byte [cor], preto
   382                                  
   383                                  loop_apaga_input:
   384 000002E6 E8AF03                  	call	cursor
   385 000002E9 8A87[6D00]                  	mov     al, [bx + string_vazia]
   386 000002ED E8BF03                  	call	caracter
   387 000002F0 43                          	inc     bx			;proximo caracter
   388 000002F1 FEC2                    	inc	dl			;avanca a coluna
   389 000002F3 E2F1                        	loop    loop_apaga_input
   390                                  
   391 000002F5 C3                      	ret
   392                                  
   393                                  atualiza_estado_da_partida:
   394 000002F6 50                      	push 	ax
   395 000002F7 51                      	push	cx
   396                                  
   397                                  	; verifica horizontalmente
   398 000002F8 A0[7C00]                	mov	al, byte [array_posicoes_jogadas + 1]
   399 000002FB 3C00                    	cmp	al, 0
   400 000002FD 742A                    	je	partida_nao_acabou_1
   401 000002FF 3A06[7B00]              	cmp 	al, byte [array_posicoes_jogadas + 0]
   402 00000303 7524                    	jne	partida_nao_acabou_1
   403 00000305 3A06[7D00]              	cmp	al, byte [array_posicoes_jogadas + 2]
   404 00000309 751E                    	jne	partida_nao_acabou_1
   405 0000030B C706[7300]9B00          	mov	word [x1], 155
   406 00000311 C706[7500]9F01          	mov	word [y1], 415
   407 00000317 C706[7700]E501          	mov	word [x2], 485
   408 0000031D C706[7900]9F01          	mov	word [y2], 415
   409 00000323 E85202                  	call	desenha_linha_de_vitoria 
   410 00000326 E96E01                  	jmp	partida_acabou_em_vitoria
   411                                  
   412                                  partida_nao_acabou_1:
   413 00000329 A0[7F00]                	mov	al, byte [array_posicoes_jogadas + 4]
   414 0000032C 3C00                    	cmp	al, 0
   415 0000032E 742A                    	je	partida_nao_acabou_2
   416 00000330 3A06[7E00]              	cmp 	al, byte [array_posicoes_jogadas + 3]
   417 00000334 7524                    	jne	partida_nao_acabou_2
   418 00000336 3A06[8000]              	cmp	al, byte [array_posicoes_jogadas + 5]
   419 0000033A 751E                    	jne	partida_nao_acabou_2
   420 0000033C C706[7300]9B00          	mov	word [x1], 155
   421 00000342 C706[7500]3101          	mov	word [y1], 305
   422 00000348 C706[7700]E501          	mov	word [x2], 485
   423 0000034E C706[7900]3101          	mov	word [y2], 305
   424 00000354 E82102                  	call	desenha_linha_de_vitoria 
   425 00000357 E93D01                  	jmp	partida_acabou_em_vitoria
   426                                  
   427                                  partida_nao_acabou_2:
   428 0000035A A0[8200]                	mov	al, byte [array_posicoes_jogadas + 7]
   429 0000035D 3C00                    	cmp	al, 0
   430 0000035F 742A                    	je	partida_nao_acabou_3
   431 00000361 3A06[8100]              	cmp 	al, byte [array_posicoes_jogadas + 6]
   432 00000365 7524                    	jne	partida_nao_acabou_3
   433 00000367 3A06[8300]              	cmp	al, byte [array_posicoes_jogadas + 8]
   434 0000036B 751E                    	jne	partida_nao_acabou_3
   435 0000036D C706[7300]9B00          	mov	word [x1], 155
   436 00000373 C706[7500]C300          	mov	word [y1], 195
   437 00000379 C706[7700]E501          	mov	word [x2], 485
   438 0000037F C706[7900]C300          	mov	word [y2], 195
   439 00000385 E8F001                  	call	desenha_linha_de_vitoria 
   440 00000388 E90C01                  	jmp	partida_acabou_em_vitoria
   441                                  
   442                                  ; verifica verticalmente
   443                                  partida_nao_acabou_3:
   444 0000038B A0[7E00]                	mov	al, byte [array_posicoes_jogadas + 3]
   445 0000038E 3C00                    	cmp	al, 0
   446 00000390 742A                    	je	partida_nao_acabou_4
   447 00000392 3A06[7B00]              	cmp 	al, byte [array_posicoes_jogadas + 0]
   448 00000396 7524                    	jne	partida_nao_acabou_4
   449 00000398 3A06[8100]              	cmp	al, byte [array_posicoes_jogadas + 6]
   450 0000039C 751E                    	jne	partida_nao_acabou_4
   451 0000039E C706[7300]D200          	mov	word [x1], 210
   452 000003A4 C706[7500]8C00          	mov	word [y1], 140
   453 000003AA C706[7700]D200          	mov	word [x2], 210
   454 000003B0 C706[7900]D601          	mov	word [y2], 470
   455 000003B6 E8BF01                  	call	desenha_linha_de_vitoria
   456 000003B9 E9DB00                  	jmp	partida_acabou_em_vitoria
   457                                  
   458                                  partida_nao_acabou_4:
   459 000003BC A0[7F00]                	mov	al, byte [array_posicoes_jogadas + 4]
   460 000003BF 3C00                    	cmp	al, 0
   461 000003C1 742A                    	je	partida_nao_acabou_5
   462 000003C3 3A06[7C00]              	cmp 	al, byte [array_posicoes_jogadas + 1]
   463 000003C7 7524                    	jne	partida_nao_acabou_5
   464 000003C9 3A06[8200]              	cmp	al, byte [array_posicoes_jogadas + 7]
   465 000003CD 751E                    	jne	partida_nao_acabou_5
   466 000003CF C706[7300]4001          	mov	word [x1], 320
   467 000003D5 C706[7500]8C00          	mov	word [y1], 140
   468 000003DB C706[7700]4001          	mov	word [x2], 320
   469 000003E1 C706[7900]D601          	mov	word [y2], 470
   470 000003E7 E88E01                  	call	desenha_linha_de_vitoria
   471 000003EA E9AA00                  	jmp	partida_acabou_em_vitoria
   472                                  
   473                                  partida_nao_acabou_5:
   474 000003ED A0[8000]                	mov	al, byte [array_posicoes_jogadas + 5]
   475 000003F0 3C00                    	cmp	al, 0
   476 000003F2 742A                    	je	partida_nao_acabou_6
   477 000003F4 3A06[7D00]              	cmp 	al, byte [array_posicoes_jogadas + 2]
   478 000003F8 7524                    	jne	partida_nao_acabou_6
   479 000003FA 3A06[8300]              	cmp	al, byte [array_posicoes_jogadas + 8]
   480 000003FE 751E                    	jne	partida_nao_acabou_6
   481 00000400 C706[7300]AE01          	mov	word [x1], 430
   482 00000406 C706[7500]8C00          	mov	word [y1], 140
   483 0000040C C706[7700]AE01          	mov	word [x2], 430
   484 00000412 C706[7900]D601          	mov	word [y2], 470
   485 00000418 E85D01                  	call	desenha_linha_de_vitoria
   486 0000041B E97900                  	jmp	partida_acabou_em_vitoria
   487                                  
   488                                  ; verifica diagonalmente
   489                                  partida_nao_acabou_6:
   490 0000041E A0[7F00]                	mov	al, byte [array_posicoes_jogadas + 4]
   491 00000421 3C00                    	cmp	al, 0
   492 00000423 742A                    	je	partida_nao_acabou_7
   493 00000425 3A06[7B00]              	cmp 	al, byte [array_posicoes_jogadas + 0]
   494 00000429 7524                    	jne	partida_nao_acabou_7
   495 0000042B 3A06[8300]              	cmp	al, byte [array_posicoes_jogadas + 8]
   496 0000042F 751E                    	jne	partida_nao_acabou_7
   497 00000431 C706[7300]9B00          	mov	word [x1], 155
   498 00000437 C706[7500]D601          	mov	word [y1], 470
   499 0000043D C706[7700]E501          	mov	word [x2], 485
   500 00000443 C706[7900]8C00          	mov	word [y2], 140
   501 00000449 E82C01                  	call	desenha_linha_de_vitoria
   502 0000044C E94800                  	jmp	partida_acabou_em_vitoria
   503                                  
   504                                  partida_nao_acabou_7:
   505 0000044F A0[7F00]                	mov	al, byte [array_posicoes_jogadas + 4]
   506 00000452 3C00                    	cmp	al, 0
   507 00000454 742A                    	je	partida_nao_acabou_8
   508 00000456 3A06[7D00]              	cmp 	al, byte [array_posicoes_jogadas + 2]
   509 0000045A 7524                    	jne	partida_nao_acabou_8
   510 0000045C 3A06[8100]              	cmp	al, byte [array_posicoes_jogadas + 6]
   511 00000460 751E                    	jne	partida_nao_acabou_8
   512 00000462 C706[7300]9B00          	mov	word [x1], 155
   513 00000468 C706[7500]8C00          	mov	word [y1], 140
   514 0000046E C706[7700]E501          	mov	word [x2], 485
   515 00000474 C706[7900]D601          	mov	word [y2], 470
   516 0000047A E8FB00                  	call	desenha_linha_de_vitoria
   517 0000047D E91700                  	jmp	partida_acabou_em_vitoria
   518                                  
   519                                  partida_nao_acabou_8:
   520 00000480 B90900                  	mov	cx, 9
   521                                  
   522                                  partida_nao_acabou_8_loop:
   523 00000483 89CE                    	mov	si, cx
   524 00000485 80BC[7B00]00            	cmp	byte [array_posicoes_jogadas + si], 0
   525 0000048A 7405                    	je	ainda_tem_posicoes_nao_jogadas
   526 0000048C E2F5                    	loop	partida_nao_acabou_8_loop
   527                                  
   528 0000048E E91200                  	jmp partida_acabou_em_empate
   529                                  
   530                                  ainda_tem_posicoes_nao_jogadas:
   531 00000491 E90000                  	jmp partida_nao_acabou_9
   532                                  
   533                                  partida_nao_acabou_9:
   534 00000494 59                      	pop	cx
   535 00000495 58                      	pop 	ax
   536 00000496 C3                      	ret
   537                                  
   538                                  partida_acabou_em_vitoria:
   539 00000497 A0[8800]                	mov	al, byte [ultima_jogada]
   540 0000049A A2[8900]                	mov	byte [estado_partida], al
   541 0000049D E80E00                  	call	imprime_partida_acabou
   542 000004A0 59                      	pop	cx
   543 000004A1 58                      	pop 	ax
   544 000004A2 C3                      	ret
   545                                  
   546                                  partida_acabou_em_empate:
   547 000004A3 C606[8900]03            	mov	byte [estado_partida], 3
   548 000004A8 E80300                  	call	imprime_partida_acabou
   549 000004AB 59                      	pop	cx
   550 000004AC 58                      	pop 	ax
   551 000004AD C3                      	ret
   552                                  
   553                                  imprime_partida_acabou:
   554 000004AE 803E[8900]01            	cmp	byte [estado_partida], 1
   555 000004B3 740A                    	je	configura_para_x
   556 000004B5 803E[8900]02            	cmp	byte [estado_partida], 2
   557 000004BA 7415                    	je	configura_para_circulo
   558 000004BC E92400                  	jmp	configura_para_empate
   559                                  
   560                                  configura_para_x:
   561 000004BF B91000                      	mov     cx, 16			;n�mero de caracteres
   562 000004C2 BB0000                      	mov     bx, 0
   563 000004C5 B61B                        	mov     dh, 27			;linha 0-29
   564 000004C7 B21A                        	mov     dl, 26			;coluna 0-79
   565 000004C9 C606[0000]02            	mov	byte [cor], verde
   566 000004CE E92400                  	jmp 	loop_imprime_partida_acabou
   567                                  
   568                                  configura_para_circulo:
   569 000004D1 B91000                      	mov     cx, 16			;n�mero de caracteres
   570 000004D4 BB0000                      	mov     bx, 0
   571 000004D7 B61B                        	mov     dh, 27			;linha 0-29
   572 000004D9 B217                        	mov     dl, 23			;coluna 0-79
   573 000004DB C606[0000]05            	mov	byte [cor], magenta
   574 000004E0 E91200                  	jmp 	loop_imprime_partida_acabou
   575                                  
   576                                  configura_para_empate:
   577 000004E3 B91000                      	mov     cx, 16			;n�mero de caracteres
   578 000004E6 BB0000                      	mov     bx, 0
   579 000004E9 B61B                        	mov     dh, 27			;linha 0-29
   580 000004EB B21B                        	mov     dl, 27			;coluna 0-79
   581 000004ED C606[0000]04            	mov	byte [cor], vermelho
   582 000004F2 E90000                  	jmp 	loop_imprime_partida_acabou
   583                                  
   584                                  loop_imprime_partida_acabou:
   585 000004F5 E8A001                  	call	cursor
   586 000004F8 8A87[3800]                  	mov     al, [bx + mensgem_partida_acabou]
   587 000004FC E8B001                  	call	caracter
   588 000004FF 43                          	inc     bx			;proximo caracter
   589 00000500 FEC2                    	inc	dl			;avanca a coluna
   590 00000502 E2F1                        	loop    loop_imprime_partida_acabou
   591                                  
   592 00000504 803E[8900]01            	cmp	byte [estado_partida], 1
   593 00000509 740A                    	je	chama_imprime_x_ganhou
   594 0000050B 803E[8900]02            	cmp	byte [estado_partida], 2
   595 00000510 7407                    	je	chama_imprime_circulo_ganhou
   596 00000512 E90800                  	jmp	chama_imprime_empate
   597                                  
   598                                  chama_imprime_x_ganhou:
   599 00000515 E80900                  	call 	imprime_x_ganhou
   600 00000518 C3                      	ret
   601                                  
   602                                  chama_imprime_circulo_ganhou:
   603 00000519 E82200                  	call	imprime_circulo_ganhou
   604 0000051C C3                      	ret
   605                                  
   606                                  chama_imprime_empate:
   607 0000051D E83B00                  	call	imprime_partida_empatou
   608 00000520 C3                      	ret
   609                                  
   610                                  imprime_x_ganhou:
   611 00000521 B90B00                      	mov     cx, 11			;n�mero de caracteres
   612 00000524 BB0000                      	mov     bx, 0
   613 00000527 B61B                        	mov     dh, 27			;linha 0-29
   614 00000529 B22A                        	mov     dl, 42			;coluna 0-79
   615                                  
   616                                  loop_imprime_x_ganhou:
   617 0000052B E86A01                  	call	cursor
   618 0000052E 8A87[6200]                  	mov     al, [bx + mensagem_x_venceu]
   619 00000532 E87A01                  	call	caracter
   620 00000535 43                          	inc     bx			;proximo caracter
   621 00000536 FEC2                    	inc	dl			;avanca a coluna
   622 00000538 E2F1                        	loop    loop_imprime_x_ganhou
   623                                  
   624 0000053A E89AFD                  	call	volta_cursor_para_0x0_e_apaga_input_anterior
   625 0000053D C3                      	ret
   626                                  
   627                                  imprime_circulo_ganhou:
   628 0000053E B91100                      	mov     cx, 17			;n�mero de caracteres
   629 00000541 BB0000                      	mov     bx, 0
   630 00000544 B61B                        	mov     dh, 27			;linha 0-29
   631 00000546 B227                        	mov     dl, 39			;coluna 0-79
   632                                  
   633                                  loop_imprime_circulo_ganhou:
   634 00000548 E84D01                  	call	cursor
   635 0000054B 8A87[4800]                  	mov     al, [bx + mensagem_circulo_venceu]
   636 0000054F E85D01                  	call	caracter
   637 00000552 43                          	inc     bx			;proximo caracter
   638 00000553 FEC2                    	inc	dl			;avanca a coluna
   639 00000555 E2F1                        	loop    loop_imprime_circulo_ganhou
   640                                  
   641 00000557 E87DFD                  	call	volta_cursor_para_0x0_e_apaga_input_anterior
   642 0000055A C3                      	ret
   643                                  
   644                                  imprime_partida_empatou:
   645 0000055B B90900                      	mov     cx, 9			;n�mero de caracteres
   646 0000055E BB0000                      	mov     bx, 0
   647 00000561 B61B                        	mov     dh, 27			;linha 0-29
   648 00000563 B22B                        	mov     dl, 43			;coluna 0-79
   649                                  
   650                                  loop_imprime_empate:
   651 00000565 E83001                  	call	cursor
   652 00000568 8A87[5900]                  	mov     al, [bx + mensagem_empate]
   653 0000056C E84001                  	call	caracter
   654 0000056F 43                          	inc     bx			;proximo caracter
   655 00000570 FEC2                    	inc	dl			;avanca a coluna
   656 00000572 E2F1                        	loop    loop_imprime_empate
   657                                  
   658 00000574 E860FD                  	call	volta_cursor_para_0x0_e_apaga_input_anterior
   659 00000577 C3                      	ret
   660                                  
   661                                  desenha_linha_de_vitoria:
   662 00000578 50                      	push	ax
   663 00000579 C606[0000]04            	mov	byte [cor], vermelho
   664 0000057E A1[7300]                	mov	ax, [x1]
   665 00000581 50                      	push	ax
   666 00000582 A1[7500]                	mov	ax, [y1]
   667 00000585 50                      	push	ax
   668 00000586 A1[7700]                	mov	ax, [x2]
   669 00000589 50                      	push	ax
   670 0000058A A1[7900]                	mov	ax, [y2]
   671 0000058D 50                      	push	ax
   672 0000058E E8FE02                  	call 	line
   673 00000591 58                      	pop	ax
   674 00000592 C3                      	ret
   675                                  
   676                                  ; p = (i - 1)*3 + j - 1
   677                                  calcula_indice_array_jogadas:
   678 00000593 50                      	push 	ax
   679 00000594 53                      	push	bx
   680                                  
   681 00000595 B80000                  	mov	ax, 0
   682 00000598 A0[8400]                	mov	al, [i]
   683 0000059B FEC8                    	dec	al
   684 0000059D B303                    	mov	bl, 3
   685 0000059F F6E3                    	mul	bl
   686 000005A1 8A1E[8500]              	mov	bl, [j]
   687 000005A5 00D8                    	add	al, bl
   688 000005A7 FEC8                    	dec	al
   689 000005A9 A3[8600]                	mov	word [p], ax
   690                                  	
   691 000005AC 5B                      	pop 	bx
   692 000005AD 58                      	pop	ax
   693 000005AE C3                      	ret
   694                                  
   695                                  calcula_posicao_i_j:
   696 000005AF 803E[7100]31            	cmp	byte [novo_comando + 1], '1'
   697 000005B4 722C                    	jb	jogada_invalida
   698 000005B6 803E[7100]33            	cmp	byte [novo_comando + 1], '3'
   699 000005BB 7F25                    	jg	jogada_invalida
   700 000005BD 803E[7200]31            	cmp	byte [novo_comando + 2], '1'
   701 000005C2 721E                    	jb	jogada_invalida
   702 000005C4 803E[7200]33            	cmp	byte [novo_comando + 2], '3'
   703 000005C9 7F17                    	jg	jogada_invalida
   704 000005CB B80000                  	mov	ax, 0
   705 000005CE A0[7100]                	mov	al, [novo_comando + 1]
   706 000005D1 2C30                    	sub	al, 30h
   707 000005D3 A2[8400]                	mov	byte [i], al
   708 000005D6 B80000                  	mov	ax, 0
   709 000005D9 A0[7200]                	mov	al, [novo_comando + 2]
   710 000005DC 2C30                    	sub	al, 30h
   711 000005DE A2[8500]                	mov	byte [j], al
   712 000005E1 C3                      	ret
   713                                  
   714                                  jogada_invalida:
   715 000005E2 E895FC                  	call	imprime_jogada_invalida
   716 000005E5 E952FB                  	jmp	le_novo_comando
   717                                  
   718                                  desenha_circulo:
   719 000005E8 50                      	push	ax
   720 000005E9 51                      	push 	cx
   721                                  
   722 000005EA B96E00                  	mov	cx, 110
   723                                  
   724 000005ED B80000                  	mov	ax, 0
   725 000005F0 A0[8500]                	mov	al, byte [j]
   726 000005F3 48                      	dec 	ax
   727 000005F4 F7E1                    	mul 	cx
   728 000005F6 05D200                  	add 	ax, 210
   729 000005F9 50                      	push	ax
   730                                  
   731 000005FA B80000                  	mov	ax, 0
   732 000005FD A0[8400]                	mov	al, byte [i]
   733 00000600 48                      	dec 	ax
   734 00000601 F7E1                    	mul 	cx
   735 00000603 89C1                    	mov 	cx, ax
   736 00000605 B89F01                  	mov	ax, 415
   737 00000608 29C8                    	sub	ax, cx
   738 0000060A 50                      	push	ax
   739                                  
   740 0000060B B82D00                  	mov	ax, 45
   741 0000060E 50                      	push	ax
   742                                  	
   743 0000060F C606[0000]05            	mov	byte [cor], magenta
   744 00000614 E8DD00                  	call	circle
   745                                  
   746 00000617 59                      	pop 	cx
   747 00000618 58                      	pop	ax
   748                                  
   749 00000619 C3                      	ret
   750                                  
   751                                  desenha_x:
   752 0000061A 50                      	push	ax
   753 0000061B 51                      	push 	cx
   754                                  
   755 0000061C B96E00                  	mov	cx, 110
   756                                  
   757 0000061F B80000                  	mov	ax, 0
   758 00000622 A0[8500]                	mov	al, byte [j]
   759 00000625 48                      	dec 	ax
   760 00000626 F7E1                    	mul 	cx
   761 00000628 05D200                  	add 	ax, 210
   762 0000062B 2D1F00                  	sub	ax, 31
   763 0000062E A3[7300]                	mov	word [x1], ax
   764 00000631 053E00                  	add	ax, 62
   765 00000634 A3[7700]                	mov	word [x2], ax
   766                                  
   767 00000637 B80000                  	mov	ax, 0
   768 0000063A A0[8400]                	mov	al, byte [i]
   769 0000063D 48                      	dec 	ax
   770 0000063E F7E1                    	mul 	cx
   771 00000640 89C1                    	mov 	cx, ax
   772 00000642 B89F01                  	mov	ax, 415
   773 00000645 29C8                    	sub	ax, cx
   774 00000647 2D1F00                  	sub	ax, 31
   775 0000064A A3[7500]                	mov	word [y1], ax
   776 0000064D 053E00                  	add	ax, 62
   777 00000650 A3[7900]                	mov	word [y2], ax
   778                                  	
   779 00000653 C606[0000]02            	mov	byte[cor], verde
   780 00000658 A1[7300]                	mov	ax, [x1]
   781 0000065B 50                      	push	ax
   782 0000065C A1[7500]                	mov	ax, [y1]
   783 0000065F 50                      	push	ax
   784 00000660 A1[7700]                	mov	ax, [x2]
   785 00000663 50                      	push	ax
   786 00000664 A1[7900]                	mov	ax, [y2]
   787 00000667 50                      	push	ax
   788 00000668 E82402                  	call 	line
   789                                  
   790 0000066B A1[7500]                	mov 	ax, [y1]
   791 0000066E 053E00                  	add	ax, 62
   792 00000671 A3[7500]                	mov	word [y1], ax
   793 00000674 A1[7900]                	mov	ax, [y2]
   794 00000677 2D3E00                  	sub	ax, 62
   795 0000067A A3[7900]                	mov	word [y2], ax
   796                                  
   797 0000067D C606[0000]02            	mov	byte [cor], verde
   798 00000682 A1[7300]                	mov	ax, [x1]
   799 00000685 50                      	push	ax
   800 00000686 A1[7500]                	mov	ax, [y1]
   801 00000689 50                      	push	ax
   802 0000068A A1[7700]                	mov	ax, [x2]
   803 0000068D 50                      	push	ax
   804 0000068E A1[7900]                	mov	ax, [y2]
   805 00000691 50                      	push	ax
   806 00000692 E8FA01                  	call 	line
   807                                  
   808 00000695 59                      	pop 	cx
   809 00000696 58                      	pop	ax
   810 00000697 C3                      	ret
   811                                  
   812                                  ;***************************************************************************
   813                                  ;
   814                                  ;   funcao cursor
   815                                  ;
   816                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   817                                  cursor:
   818 00000698 9C                      	pushf
   819 00000699 50                      	push 	ax
   820 0000069A 53                      	push 	bx
   821 0000069B 51                      	push	cx
   822 0000069C 52                      	push	dx
   823 0000069D 56                      	push	si
   824 0000069E 57                      	push	di
   825 0000069F 55                      	push	bp
   826 000006A0 B402                    	mov     ah, 2
   827 000006A2 B700                    	mov     bh, 0
   828 000006A4 CD10                    	int     10h
   829 000006A6 5D                      	pop	bp
   830 000006A7 5F                      	pop	di
   831 000006A8 5E                      	pop	si
   832 000006A9 5A                      	pop	dx
   833 000006AA 59                      	pop	cx
   834 000006AB 5B                      	pop	bx
   835 000006AC 58                      	pop	ax
   836 000006AD 9D                      	popf
   837 000006AE C3                      	ret
   838                                  ;_____________________________________________________________________________
   839                                  ;
   840                                  ;   funcao caracter escrito na posicao do cursor
   841                                  ;
   842                                  ; al= caracter a ser escrito
   843                                  ; cor definida na variavel cor
   844                                  caracter:
   845 000006AF 9C                      	pushf
   846 000006B0 50                      	push 	ax
   847 000006B1 53                      	push 	bx
   848 000006B2 51                      	push	cx
   849 000006B3 52                      	push	dx
   850 000006B4 56                      	push	si
   851 000006B5 57                      	push	di
   852 000006B6 55                      	push	bp
   853 000006B7 B409                    	mov     ah, 9
   854 000006B9 B700                    	mov     bh, 0
   855 000006BB B90100                  	mov     cx, 1
   856 000006BE 8A1E[0000]              	mov     bl, [cor]
   857 000006C2 CD10                    	int     10h
   858 000006C4 5D                      	pop	bp
   859 000006C5 5F                      	pop	di
   860 000006C6 5E                      	pop	si
   861 000006C7 5A                      	pop	dx
   862 000006C8 59                      	pop	cx
   863 000006C9 5B                      	pop	bx
   864 000006CA 58                      	pop	ax
   865 000006CB 9D                      	popf
   866 000006CC C3                      	ret
   867                                  ;_____________________________________________________________________________
   868                                  ;
   869                                  ;   funcao plot_xy
   870                                  ;
   871                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   872                                  ; cor definida na variavel cor
   873                                  plot_xy:
   874 000006CD 55                      	push	bp
   875 000006CE 89E5                    	mov	bp, sp
   876 000006D0 9C                      	pushf
   877 000006D1 50                      	push 	ax
   878 000006D2 53                      	push 	bx
   879 000006D3 51                      	push	cx
   880 000006D4 52                      	push	dx
   881 000006D5 56                      	push	si
   882 000006D6 57                      	push	di
   883 000006D7 B40C                    	mov     ah, 0ch
   884 000006D9 A0[0000]                	mov     al, [cor]
   885 000006DC B700                    	mov     bh, 0
   886 000006DE BADF01                  	mov     dx, 479
   887 000006E1 2B5604                  	sub	dx, [bp + 4]
   888 000006E4 8B4E06                  	mov     cx, [bp + 6]
   889 000006E7 CD10                    	int     10h
   890 000006E9 5F                      	pop	di
   891 000006EA 5E                      	pop	si
   892 000006EB 5A                      	pop	dx
   893 000006EC 59                      	pop	cx
   894 000006ED 5B                      	pop	bx
   895 000006EE 58                      	pop	ax
   896 000006EF 9D                      	popf
   897 000006F0 5D                      	pop	bp
   898 000006F1 C20400                  	ret	4
   899                                  
   900                                  ;_____________________________________________________________________________
   901                                  ;    funcao circle
   902                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   903                                  ; cor definida na variavel cor
   904                                  circle:
   905 000006F4 55                      	push 	bp
   906 000006F5 89E5                    	mov	bp, sp
   907 000006F7 9C                      	pushf                        ;coloca os flags na pilha
   908 000006F8 50                      	push 	ax
   909 000006F9 53                      	push 	bx
   910 000006FA 51                      	push	cx
   911 000006FB 52                      	push	dx
   912 000006FC 56                      	push	si
   913 000006FD 57                      	push	di
   914                                  	
   915 000006FE 8B4608                  	mov	ax, [bp + 8]    ; resgata xc
   916 00000701 8B5E06                  	mov	bx, [bp + 6]    ; resgata yc
   917 00000704 8B4E04                  	mov	cx, [bp + 4]    ; resgata r
   918                                  	
   919 00000707 89DA                    	mov 	dx, bx	
   920 00000709 01CA                    	add	dx, cx       ;ponto extremo superior
   921 0000070B 50                      	push    ax			
   922 0000070C 52                      	push	dx
   923 0000070D E8BDFF                  	call 	plot_xy
   924                                  	
   925 00000710 89DA                    	mov	dx, bx
   926 00000712 29CA                    	sub	dx, cx       ;ponto extremo inferior
   927 00000714 50                      	push    ax			
   928 00000715 52                      	push	dx
   929 00000716 E8B4FF                  	call 	plot_xy
   930                                  	
   931 00000719 89C2                    	mov 	dx, ax	
   932 0000071B 01CA                    	add	dx, cx       ;ponto extremo direita
   933 0000071D 52                      	push    dx			
   934 0000071E 53                      	push	bx
   935 0000071F E8ABFF                  	call 	plot_xy
   936                                  	
   937 00000722 89C2                    	mov	dx, ax
   938 00000724 29CA                    	sub	dx, cx       ;ponto extremo esquerda
   939 00000726 52                      	push    dx			
   940 00000727 53                      	push	bx
   941 00000728 E8A2FF                  	call 	plot_xy
   942                                  		
   943 0000072B 89CF                    	mov	di, cx
   944 0000072D 81EF0100                	sub	di, 1	 ;di=r-1
   945 00000731 BA0000                  	mov	dx, 0  	;dx ser� a vari�vel x. cx � a variavel y
   946                                  	
   947                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   948                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   949                                  ;valores positivos para d
   950                                  
   951                                  stay:				;loop
   952 00000734 89FE                    	mov	si, di
   953 00000736 81FE0000                	cmp	si, 0
   954 0000073A 7F0E                    	jg	inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   955 0000073C 89D6                    	mov	si, dx		;o jl � importante porque trata-se de conta com sinal
   956 0000073E D1E6                    	sal	si, 1		;multiplica por doi (shift arithmetic left)
   957 00000740 81C60300                	add	si, 3
   958 00000744 01F7                    	add	di, si     ;nesse ponto d=d+2*dx+3
   959 00000746 42                      	inc	dx		;incrementa dx
   960 00000747 E90E00                  	jmp	plotar
   961                                  inf:	
   962 0000074A 89D6                    	mov	si, dx
   963 0000074C 29CE                    	sub	si, cx  		;faz x - y (dx-cx), e salva em di 
   964 0000074E D1E6                    	sal	si, 1
   965 00000750 81C60500                	add	si, 5
   966 00000754 01F7                    	add	di, si		;nesse ponto d=d+2*(dx-cx)+5
   967 00000756 42                      	inc	dx		;incrementa x (dx)
   968 00000757 49                      	dec	cx		;decrementa y (cx)
   969                                  	
   970                                  plotar:	
   971 00000758 89D6                    	mov	si, dx
   972 0000075A 01C6                    	add	si, ax
   973 0000075C 56                      	push    si			;coloca a abcisa x+xc na pilha
   974 0000075D 89CE                    	mov	si, cx
   975 0000075F 01DE                    	add	si, bx
   976 00000761 56                      	push    si			;coloca a ordenada y+yc na pilha
   977 00000762 E868FF                  	call 	plot_xy		;toma conta do segundo octante
   978 00000765 89C6                    	mov	si, ax
   979 00000767 01D6                    	add	si, dx
   980 00000769 56                      	push    si			;coloca a abcisa xc+x na pilha
   981 0000076A 89DE                    	mov	si, bx
   982 0000076C 29CE                    	sub	si, cx
   983 0000076E 56                      	push    si			;coloca a ordenada yc-y na pilha
   984 0000076F E85BFF                  	call 	plot_xy		;toma conta do s�timo octante
   985 00000772 89C6                    	mov	si, ax
   986 00000774 01CE                    	add	si, cx
   987 00000776 56                      	push    si			;coloca a abcisa xc+y na pilha
   988 00000777 89DE                    	mov	si, bx
   989 00000779 01D6                    	add	si, dx
   990 0000077B 56                      	push    si			;coloca a ordenada yc+x na pilha
   991 0000077C E84EFF                  	call 	plot_xy		;toma conta do segundo octante
   992 0000077F 89C6                    	mov	si, ax
   993 00000781 01CE                    	add	si, cx
   994 00000783 56                      	push    si			;coloca a abcisa xc+y na pilha
   995 00000784 89DE                    	mov	si, bx
   996 00000786 29D6                    	sub	si, dx
   997 00000788 56                      	push    si			;coloca a ordenada yc-x na pilha
   998 00000789 E841FF                  	call 	plot_xy		;toma conta do oitavo octante
   999 0000078C 89C6                    	mov	si, ax
  1000 0000078E 29D6                    	sub	si, dx
  1001 00000790 56                      	push    si			;coloca a abcisa xc-x na pilha
  1002 00000791 89DE                    	mov	si, bx
  1003 00000793 01CE                    	add	si, cx
  1004 00000795 56                      	push    si			;coloca a ordenada yc+y na pilha
  1005 00000796 E834FF                  	call 	plot_xy		;toma conta do terceiro octante
  1006 00000799 89C6                    	mov	si, ax
  1007 0000079B 29D6                    	sub	si, dx
  1008 0000079D 56                      	push    si			;coloca a abcisa xc-x na pilha
  1009 0000079E 89DE                    	mov	si, bx
  1010 000007A0 29CE                    	sub	si, cx
  1011 000007A2 56                      	push    si			;coloca a ordenada yc-y na pilha
  1012 000007A3 E827FF                  	call 	plot_xy		;toma conta do sexto octante
  1013 000007A6 89C6                    	mov	si, ax
  1014 000007A8 29CE                    	sub	si, cx
  1015 000007AA 56                      	push    si			;coloca a abcisa xc-y na pilha
  1016 000007AB 89DE                    	mov	si, bx
  1017 000007AD 29D6                    	sub	si, dx
  1018 000007AF 56                      	push    si			;coloca a ordenada yc-x na pilha
  1019 000007B0 E81AFF                  	call 	plot_xy		;toma conta do quinto octante
  1020 000007B3 89C6                    	mov	si, ax
  1021 000007B5 29CE                    	sub	si, cx
  1022 000007B7 56                      	push    si			;coloca a abcisa xc-y na pilha
  1023 000007B8 89DE                    	mov	si, bx
  1024 000007BA 01D6                    	add	si, dx
  1025 000007BC 56                      	push    si			;coloca a ordenada yc-x na pilha
  1026 000007BD E80DFF                  	call 	plot_xy		;toma conta do quarto octante
  1027                                  	
  1028 000007C0 39D1                    	cmp	cx, dx
  1029 000007C2 7203                    	jb	fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1030 000007C4 E96DFF                  	jmp	stay		;se cx (y) est� acima de dx (x), continua no loop
  1031                                  	
  1032                                  fim_circle:
  1033 000007C7 5F                      	pop	di
  1034 000007C8 5E                      	pop	si
  1035 000007C9 5A                      	pop	dx
  1036 000007CA 59                      	pop	cx
  1037 000007CB 5B                      	pop	bx
  1038 000007CC 58                      	pop	ax
  1039 000007CD 9D                      	popf
  1040 000007CE 5D                      	pop	bp
  1041 000007CF C20600                  	ret	6
  1042                                  ;-----------------------------------------------------------------------------
  1043                                  ;    fun��o full_circle
  1044                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  1045                                  ; cor definida na variavel cor					  
  1046                                  full_circle:
  1047 000007D2 55                      	push 	bp
  1048 000007D3 89E5                    	mov	bp, sp
  1049 000007D5 9C                      	pushf                        ;coloca os flags na pilha
  1050 000007D6 50                      	push 	ax
  1051 000007D7 53                      	push 	bx
  1052 000007D8 51                      	push	cx
  1053 000007D9 52                      	push	dx
  1054 000007DA 56                      	push	si
  1055 000007DB 57                      	push	di
  1056                                  
  1057 000007DC 8B4608                  	mov	ax, [bp + 8]    ; resgata xc
  1058 000007DF 8B5E06                  	mov	bx, [bp + 6]    ; resgata yc
  1059 000007E2 8B4E04                  	mov	cx, [bp + 4]    ; resgata r
  1060                                  	
  1061 000007E5 89DE                    	mov	si, bx
  1062 000007E7 29CE                    	sub	si, cx
  1063 000007E9 50                      	push    ax			;coloca xc na pilha			
  1064 000007EA 56                      	push	si			;coloca yc-r na pilha
  1065 000007EB 89DE                    	mov	si, bx
  1066 000007ED 01CE                    	add	si, cx
  1067 000007EF 50                      	push	ax		;coloca xc na pilha
  1068 000007F0 56                      	push	si		;coloca yc+r na pilha
  1069 000007F1 E89B00                  	call 	line
  1070                                  	
  1071                                  		
  1072 000007F4 89CF                    	mov	di, cx
  1073 000007F6 81EF0100                	sub	di, 1	 ;di=r-1
  1074 000007FA BA0000                  	mov	dx, 0  	;dx ser� a vari�vel x. cx � a variavel y
  1075                                  	
  1076                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  1077                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  1078                                  ;valores positivos para d
  1079                                  
  1080                                  stay_full:				;loop
  1081 000007FD 89FE                    	mov	si, di
  1082 000007FF 81FE0000                	cmp	si, 0
  1083 00000803 7F0E                    	jg	inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  1084 00000805 89D6                    	mov	si, dx		;o jl � importante porque trata-se de conta com sinal
  1085 00000807 D1E6                    	sal	si, 1		;multiplica por doi (shift arithmetic left)
  1086 00000809 81C60300                	add	si, 3
  1087 0000080D 01F7                    	add	di, si     ;nesse ponto d=d+2*dx+3
  1088 0000080F 42                      	inc	dx		;incrementa dx
  1089 00000810 E90E00                  	jmp	plotar_full
  1090                                  inf_full:	
  1091 00000813 89D6                    	mov	si, dx
  1092 00000815 29CE                    	sub	si, cx  		;faz x - y (dx-cx), e salva em di 
  1093 00000817 D1E6                    	sal	si, 1
  1094 00000819 81C60500                	add	si, 5
  1095 0000081D 01F7                    	add	di, si		;nesse ponto d=d+2*(dx-cx)+5
  1096 0000081F 42                      	inc	dx		;incrementa x (dx)
  1097 00000820 49                      	dec	cx		;decrementa y (cx)
  1098                                  	
  1099                                  plotar_full:	
  1100 00000821 89C6                    	mov	si, ax
  1101 00000823 01CE                    	add	si, cx
  1102 00000825 56                      	push	si		;coloca a abcisa y+xc na pilha			
  1103 00000826 89DE                    	mov	si, bx
  1104 00000828 29D6                    	sub	si, dx
  1105 0000082A 56                      	push    si		;coloca a ordenada yc-x na pilha
  1106 0000082B 89C6                    	mov	si, ax
  1107 0000082D 01CE                    	add	si, cx
  1108 0000082F 56                      	push	si		;coloca a abcisa y+xc na pilha	
  1109 00000830 89DE                    	mov	si, bx
  1110 00000832 01D6                    	add	si, dx
  1111 00000834 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1112 00000835 E85700                  	call 	line
  1113                                  	
  1114 00000838 89C6                    	mov	si, ax
  1115 0000083A 01D6                    	add	si, dx
  1116 0000083C 56                      	push	si		;coloca a abcisa xc+x na pilha			
  1117 0000083D 89DE                    	mov	si, bx
  1118 0000083F 29CE                    	sub	si, cx
  1119 00000841 56                      	push    si		;coloca a ordenada yc-y na pilha
  1120 00000842 89C6                    	mov	si, ax
  1121 00000844 01D6                    	add	si, dx
  1122 00000846 56                      	push	si		;coloca a abcisa xc+x na pilha	
  1123 00000847 89DE                    	mov	si, bx
  1124 00000849 01CE                    	add	si, cx
  1125 0000084B 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1126 0000084C E84000                  	call	line
  1127                                  	
  1128 0000084F 89C6                    	mov	si, ax
  1129 00000851 29D6                    	sub	si, dx
  1130 00000853 56                      	push	si		;coloca a abcisa xc-x na pilha			
  1131 00000854 89DE                    	mov	si, bx
  1132 00000856 29CE                    	sub	si, cx
  1133 00000858 56                      	push    si		;coloca a ordenada yc-y na pilha
  1134 00000859 89C6                    	mov	si, ax
  1135 0000085B 29D6                    	sub	si, dx
  1136 0000085D 56                      	push	si		;coloca a abcisa xc-x na pilha	
  1137 0000085E 89DE                    	mov	si, bx
  1138 00000860 01CE                    	add	si, cx
  1139 00000862 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1140 00000863 E82900                  	call	line
  1141                                  	
  1142 00000866 89C6                    	mov	si, ax
  1143 00000868 29CE                    	sub	si, cx
  1144 0000086A 56                      	push	si		;coloca a abcisa xc-y na pilha			
  1145 0000086B 89DE                    	mov	si, bx
  1146 0000086D 29D6                    	sub	si, dx
  1147 0000086F 56                      	push    si		;coloca a ordenada yc-x na pilha
  1148 00000870 89C6                    	mov	si, ax
  1149 00000872 29CE                    	sub	si, cx
  1150 00000874 56                      	push	si		;coloca a abcisa xc-y na pilha	
  1151 00000875 89DE                    	mov	si, bx
  1152 00000877 01D6                    	add	si, dx
  1153 00000879 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1154 0000087A E81200                  	call	line
  1155                                  
  1156 0000087D 39D1                    	cmp	cx, dx
  1157 0000087F 7203                    	jb	fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1158 00000881 E979FF                  	jmp	stay_full		;se cx (y) est� acima de dx (x), continua no loop
  1159                                  	
  1160                                  	
  1161                                  fim_full_circle:
  1162 00000884 5F                      	pop	di
  1163 00000885 5E                      	pop	si
  1164 00000886 5A                      	pop	dx
  1165 00000887 59                      	pop	cx
  1166 00000888 5B                      	pop	bx
  1167 00000889 58                      	pop	ax
  1168 0000088A 9D                      	popf
  1169 0000088B 5D                      	pop	bp
  1170 0000088C C20600                  	ret	6
  1171                                  ;-----------------------------------------------------------------------------
  1172                                  ;
  1173                                  ;   funcao line
  1174                                  ;
  1175                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1176                                  line:
  1177 0000088F 55                      	push	bp
  1178 00000890 89E5                    	mov	bp, sp
  1179 00000892 9C                      	pushf                        ;coloca os flags na pilha
  1180 00000893 50                      	push 	ax
  1181 00000894 53                      	push 	bx
  1182 00000895 51                      	push	cx
  1183 00000896 52                      	push	dx
  1184 00000897 56                      	push	si
  1185 00000898 57                      	push	di
  1186 00000899 8B460A                  	mov	ax, [bp + 10]   ; resgata os valores das coordenadas
  1187 0000089C 8B5E08                  	mov	bx, [bp + 8]    ; resgata os valores das coordenadas
  1188 0000089F 8B4E06                  	mov	cx, [bp + 6]    ; resgata os valores das coordenadas
  1189 000008A2 8B5604                  	mov	dx, [bp + 4]    ; resgata os valores das coordenadas
  1190 000008A5 39C8                    	cmp	ax, cx
  1191 000008A7 7408                    	je	line2
  1192 000008A9 721C                    	jb	line1
  1193 000008AB 91                      	xchg	ax, cx
  1194 000008AC 87DA                    	xchg	bx, dx
  1195 000008AE E91600                  	jmp	line1
  1196                                  line2:		; deltax=0
  1197 000008B1 39D3                    	cmp	bx, dx  ;subtrai dx de bx
  1198 000008B3 7202                    	jb	line3
  1199 000008B5 87DA                    	xchg	bx, dx        ;troca os valores de bx e dx entre eles
  1200                                  line3:	; dx > bx
  1201 000008B7 50                      	push	ax
  1202 000008B8 53                      	push	bx
  1203 000008B9 E811FE                  	call 	plot_xy
  1204 000008BC 39D3                    	cmp	bx, dx
  1205 000008BE 7503                    	jne	line31
  1206 000008C0 E9C600                  	jmp	fim_line
  1207                                  line31:	
  1208 000008C3 43                      	inc	bx
  1209 000008C4 E9F0FF                  	jmp	line3
  1210                                  ;deltax <>0
  1211                                  line1:
  1212                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1213                                  	; cx > ax
  1214 000008C7 51                      	push	cx
  1215 000008C8 29C1                    	sub	cx, ax
  1216 000008CA 890E[0600]              	mov	[deltax], cx
  1217 000008CE 59                      	pop	cx
  1218 000008CF 52                      	push	dx
  1219 000008D0 29DA                    	sub	dx, bx
  1220 000008D2 7702                    	ja	line32
  1221 000008D4 F7DA                    	neg	dx
  1222                                  line32:		
  1223 000008D6 8916[0800]              	mov	[deltay], dx
  1224 000008DA 5A                      	pop	dx
  1225                                  
  1226 000008DB 50                      	push	ax
  1227 000008DC A1[0600]                	mov	ax, [deltax]
  1228 000008DF 3B06[0800]              	cmp	ax, [deltay]
  1229 000008E3 58                      	pop	ax
  1230 000008E4 724D                    	jb	line5
  1231                                  
  1232                                  	; cx > ax e deltax>deltay
  1233 000008E6 51                      	push	cx
  1234 000008E7 29C1                    	sub	cx, ax
  1235 000008E9 890E[0600]              	mov	[deltax], cx
  1236 000008ED 59                      	pop	cx
  1237 000008EE 52                      	push	dx
  1238 000008EF 29DA                    	sub	dx, bx
  1239 000008F1 8916[0800]              	mov	[deltay], dx
  1240 000008F5 5A                      	pop	dx
  1241                                  
  1242 000008F6 89C6                    	mov	si, ax
  1243                                  line4:
  1244 000008F8 50                      	push	ax
  1245 000008F9 52                      	push	dx
  1246 000008FA 56                      	push	si
  1247 000008FB 29C6                    	sub	si, ax	;(x-x1)
  1248 000008FD A1[0800]                	mov	ax, [deltay]
  1249 00000900 F7EE                    	imul	si
  1250 00000902 8B36[0600]              	mov	si, [deltax]		;arredondar
  1251 00000906 D1EE                    	shr	si, 1
  1252                                  ; se numerador (DX)>0 soma se <0 subtrai
  1253 00000908 81FA0000                	cmp	dx, 0
  1254 0000090C 7C09                    	jl	ar1
  1255 0000090E 01F0                    	add	ax, si
  1256 00000910 81D20000                	adc	dx, 0
  1257 00000914 E90600                  	jmp	arc1
  1258                                  ar1:	
  1259 00000917 29F0                    	sub	ax, si
  1260 00000919 81DA0000                	sbb	dx, 0
  1261                                  arc1:
  1262 0000091D F73E[0600]              	idiv	word [deltax]
  1263 00000921 01D8                    	add	ax, bx
  1264 00000923 5E                      	pop	si
  1265 00000924 56                      	push	si
  1266 00000925 50                      	push	ax
  1267 00000926 E8A4FD                  	call	plot_xy
  1268 00000929 5A                      	pop	dx
  1269 0000092A 58                      	pop	ax
  1270 0000092B 39CE                    	cmp	si, cx
  1271 0000092D 745A                    	je	fim_line
  1272 0000092F 46                      	inc	si
  1273 00000930 E9C5FF                  	jmp	line4
  1274                                  
  1275                                  line5:	
  1276 00000933 39D3                    	cmp	bx, dx
  1277 00000935 7203                    	jb 	line7
  1278 00000937 91                      	xchg	ax, cx
  1279 00000938 87DA                    	xchg	bx, dx
  1280                                  line7:
  1281 0000093A 51                      	push	cx
  1282 0000093B 29C1                    	sub	cx, ax
  1283 0000093D 890E[0600]              	mov	[deltax], cx
  1284 00000941 59                      	pop	cx
  1285 00000942 52                      	push	dx
  1286 00000943 29DA                    	sub	dx,bx
  1287 00000945 8916[0800]              	mov	[deltay], dx
  1288 00000949 5A                      	pop	dx
  1289                                  
  1290                                  
  1291                                  
  1292 0000094A 89DE                    	mov	si,bx
  1293                                  line6:
  1294 0000094C 52                      	push	dx
  1295 0000094D 56                      	push	si
  1296 0000094E 50                      	push	ax
  1297 0000094F 29DE                    	sub	si, bx	;(y-y1)
  1298 00000951 A1[0600]                	mov	ax, [deltax]
  1299 00000954 F7EE                    	imul	si
  1300 00000956 8B36[0800]              	mov	si, [deltay]		;arredondar
  1301 0000095A D1EE                    	shr	si, 1
  1302                                  ; se numerador (DX)>0 soma se <0 subtrai
  1303 0000095C 81FA0000                	cmp	dx, 0
  1304 00000960 7C09                    	jl	ar2
  1305 00000962 01F0                    	add	ax, si
  1306 00000964 81D20000                	adc	dx, 0
  1307 00000968 E90600                  	jmp	arc2
  1308                                  ar2:	
  1309 0000096B 29F0                    	sub	ax, si
  1310 0000096D 81DA0000                	sbb	dx, 0
  1311                                  arc2:
  1312 00000971 F73E[0800]              	idiv	word [deltay]
  1313 00000975 89C7                    	mov	di, ax
  1314 00000977 58                      	pop	ax
  1315 00000978 01C7                    	add	di, ax
  1316 0000097A 5E                      	pop	si
  1317 0000097B 57                      	push	di
  1318 0000097C 56                      	push	si
  1319 0000097D E84DFD                  	call	plot_xy
  1320 00000980 5A                      	pop	dx
  1321 00000981 39D6                    	cmp	si, dx
  1322 00000983 7404                    	je	fim_line
  1323 00000985 46                      	inc	si
  1324 00000986 E9C3FF                  	jmp	line6
  1325                                  
  1326                                  fim_line:
  1327 00000989 5F                      	pop	di
  1328 0000098A 5E                      	pop	si
  1329 0000098B 5A                      	pop	dx
  1330 0000098C 59                      	pop	cx
  1331 0000098D 5B                      	pop	bx
  1332 0000098E 58                      	pop	ax
  1333 0000098F 9D                      	popf
  1334 00000990 5D                      	pop	bp
  1335 00000991 C20800                  	ret	8
  1336                                  
  1337                                  ;*******************************************************************
  1338                                  segment data
  1339                                  
  1340                                  
  1341                                  ;	I R G B COR
  1342                                  ;	0 0 0 0 preto
  1343                                  ;	0 0 0 1 azul
  1344                                  ;	0 0 1 0 verde
  1345                                  ;	0 0 1 1 cyan
  1346                                  ;	0 1 0 0 vermelho
  1347                                  ;	0 1 0 1 magenta
  1348                                  ;	0 1 1 0 marrom
  1349                                  ;	0 1 1 1 branco
  1350                                  ;	1 0 0 0 cinza
  1351                                  ;	1 0 0 1 azul claro
  1352                                  ;	1 0 1 0 verde claro
  1353                                  ;	1 0 1 1 cyan claro
  1354                                  ;	1 1 0 0 rosa
  1355                                  ;	1 1 0 1 magenta claro
  1356                                  ;	1 1 1 0 amarelo
  1357                                  ;	1 1 1 1 branco intenso
  1358                                  
  1359 00000000 0F                      cor				db			branco_intenso
  1360                                  preto				equ			0
  1361                                  azul				equ			1
  1362                                  verde				equ			2
  1363                                  cyan				equ			3
  1364                                  vermelho			equ			4
  1365                                  magenta				equ			5
  1366                                  marrom				equ			6
  1367                                  branco				equ			7
  1368                                  cinza				equ			8
  1369                                  azul_claro			equ			9
  1370                                  verde_claro			equ			10
  1371                                  cyan_claro			equ			11
  1372                                  rosa				equ			12
  1373                                  magenta_claro			equ			13
  1374                                  amarelo				equ			14
  1375                                  branco_intenso			equ			15
  1376                                  
  1377 00000001 00                      modo_anterior			db			0
  1378 00000002 0000                    linha   			dw  			0
  1379 00000004 0000                    coluna  			dw  			0
  1380 00000006 0000                    deltax				dw			0
  1381 00000008 0000                    deltay				dw			0	
  1382 0000000A 46756E63616F204772-     mens    			db  			'Funcao Grafica'
  1383 00000013 6166696361         
  1384                                  
  1385                                  ; mensagens de erro impressas na tela ao longo do jogo
  1386 00000018 436F6D616E646F2049-     mensagem_comando_invalido	db			'Comando Invalido'
  1387 00000021 6E76616C69646F     
  1388                                  ; o espaço a mais em jogada invalida eh para que a mensagem tenha 16 caracteres igual comando invalido
  1389 00000028 4A6F6761646120496E-     mensagem_jogada_invalida	db			'Jogada Invalida '
  1390 00000031 76616C69646120     
  1391 00000038 506172746964612041-     mensgem_partida_acabou		db			'Partida Acabou: '
  1392 00000041 6361626F753A20     
  1393 00000048 43697263756C6F2056-     mensagem_circulo_venceu		db			'Circulo Venceu!!!'
  1394 00000051 656E636575212121   
  1395 00000059 456D70617465203A28      mensagem_empate			db			'Empate :('
  1396 00000062 582056656E63657521-     mensagem_x_venceu		db			'X Venceu!!!'
  1397 0000006B 2121               
  1398 0000006D 787878                  string_vazia			db			'xxx'
  1399                                  
  1400                                  ; armazena o novo comando que esta sendo digitado
  1401 00000070 000000                  novo_comando			db			0, 0, 0
  1402                                  
  1403                                  ; variaveis auxiliares usadas na impressao dos X's
  1404 00000073 0000                    x1				dw			0
  1405 00000075 0000                    y1				dw			0
  1406 00000077 0000                    x2				dw			0
  1407 00000079 0000                    y2				dw			0
  1408                                  
  1409                                  ; array que armazena a situacao atual de cada celula do jogo da velha
  1410                                  ; 0 indica que nada foi jogado na posicao
  1411                                  ; 1 indica que X foi jogado na posicao
  1412                                  ; 2 indica que circulo foi jogado na posicao
  1413 0000007B 000000000000000000      array_posicoes_jogadas		db			0, 0, 0, 0, 0, 0, 0, 0, 0
  1414 00000084 00                      i				db			0
  1415 00000085 00                      j				db			0
  1416 00000086 0000                    p				dw			0
  1417                                  
  1418                                  ; ultima jogada
  1419                                  ; 0 se ninguem jogou ainda
  1420                                  ; 1 se X foi jogado por ultimo
  1421                                  ; 2 se Circulo foi jogado por ultimo
  1422 00000088 00                      ultima_jogada			db			0
  1423                                  
  1424                                  ; estado da partida
  1425                                  ; 0 se o jogo nao terminou
  1426                                  ; 1 se X ganhou o jogo
  1427                                  ; 2 se Circulo ganhou jogo
  1428                                  ; 3 se o jogo empatou
  1429 00000089 00                      estado_partida			db			0
  1430                                  
  1431                                  ;*************************************************************************
  1432                                  segment stack stack
  1433 00000000 <res 00000200>          	resb 	512
  1434                                  stacktop:
