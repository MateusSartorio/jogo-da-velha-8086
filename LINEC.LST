     1                                  ; Hiuri Liberato
     2                                  ; Mateus Ticianeli Sartorio
     3                                  ; Sistemas Embarcados I - 2023/2 - Engenharia de Computacao
     4                                  
     5                                  ; versao de 10/05/2007
     6                                  ; corrigido erro de arredondamento na rotina line.
     7                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     8                                  
     9                                  segment code
    10                                  ..start:
    11 00000000 B8[0000]                	mov 	ax, data
    12 00000003 8ED8                    	mov 	ds, ax
    13 00000005 B8[0000]                	mov 	ax, stack
    14 00000008 8ED0                    	mov 	ss, ax
    15 0000000A BC[0002]                	mov 	sp, stacktop
    16                                  
    17                                  ; salva modo atual de video (vendo como esta o modo de video da maquina)
    18 0000000D B40F                    	mov  	ah, 0Fh
    19 0000000F CD10                    	int  	10h
    20 00000011 A2[0100]                	mov  	[modo_anterior], al   
    21                                  
    22                                  ; altera modo de video para grafico 640x480 16 cores
    23 00000014 B012                    	mov     al, 12h
    24 00000016 B400                    	mov     ah, 0
    25 00000018 CD10                    	int     10h
    26                                  
    27                                  ; A partir daqui codigo desenvolvido pela gente
    28                                  desenha_ui:
    29                                  	; primeiro retangulo
    30 0000001A C606[0000]0F            	mov 	byte[cor], branco_intenso
    31 0000001F B80A00                  	mov 	ax, 10
    32 00000022 50                      	push 	ax
    33 00000023 B80A00                  	mov 	ax, 10
    34 00000026 50                      	push 	ax
    35 00000027 B87602                  	mov 	ax, 630
    36 0000002A 50                      	push 	ax
    37 0000002B B80A00                  	mov 	ax, 10
    38 0000002E 50                      	push 	ax
    39 0000002F E83E07                  	call 	line
    40                                  
    41 00000032 C606[0000]0F            	mov 	byte[cor], branco_intenso
    42 00000037 B87602                  	mov 	ax, 630
    43 0000003A 50                      	push 	ax
    44 0000003B B80A00                  	mov 	ax, 10
    45 0000003E 50                      	push 	ax
    46 0000003F B87602                  	mov 	ax, 630
    47 00000042 50                      	push 	ax
    48 00000043 B84100                  	mov 	ax, 65
    49 00000046 50                      	push 	ax
    50 00000047 E82607                  	call 	line
    51                                  
    52 0000004A C606[0000]0F            	mov byte[cor], branco_intenso
    53 0000004F B80A00                  	mov 	ax, 10
    54 00000052 50                      	push 	ax
    55 00000053 B84100                  	mov 	ax, 65
    56 00000056 50                      	push 	ax
    57 00000057 B87602                  	mov 	ax, 630
    58 0000005A 50                      	push 	ax
    59 0000005B B84100                  	mov 	ax, 65
    60 0000005E 50                      	push 	ax
    61 0000005F E80E07                  	call 	line
    62                                  
    63 00000062 C606[0000]0F            	mov 	byte[cor], branco_intenso
    64 00000067 B80A00                  	mov 	ax, 10
    65 0000006A 50                      	push 	ax
    66 0000006B B80A00                  	mov 	ax, 10
    67 0000006E 50                      	push 	ax
    68 0000006F B80A00                  	mov 	ax, 10
    69 00000072 50                      	push 	ax
    70 00000073 B84100                  	mov 	ax, 65
    71 00000076 50                      	push 	ax
    72 00000077 E8F606                  	call 	line
    73                                  
    74                                  
    75                                  	; segundo retangulo
    76 0000007A C606[0000]0F            	mov 	byte[cor], branco_intenso
    77 0000007F B80A00                  	mov 	ax, 10
    78 00000082 50                      	push 	ax
    79 00000083 B84B00                  	mov 	ax, 75
    80 00000086 50                      	push 	ax
    81 00000087 B87602                  	mov 	ax, 630
    82 0000008A 50                      	push 	ax
    83 0000008B B84B00                  	mov 	ax, 75
    84 0000008E 50                      	push 	ax
    85 0000008F E8DE06                  	call 	line
    86                                  
    87 00000092 C606[0000]0F            	mov 	byte[cor], branco_intenso
    88 00000097 B87602                  	mov 	ax, 630
    89 0000009A 50                      	push 	ax
    90 0000009B B84B00                  	mov 	ax, 75
    91 0000009E 50                      	push 	ax
    92 0000009F B87602                  	mov 	ax, 630
    93 000000A2 50                      	push 	ax
    94 000000A3 B88200                  	mov 	ax, 130
    95 000000A6 50                      	push 	ax
    96 000000A7 E8C606                  	call 	line
    97                                  
    98 000000AA C606[0000]0F            	mov 	byte[cor], branco_intenso
    99 000000AF B87602                  	mov 	ax, 630
   100 000000B2 50                      	push 	ax
   101 000000B3 B88200                  	mov 	ax, 130
   102 000000B6 50                      	push 	ax
   103 000000B7 B80A00                  	mov 	ax, 10
   104 000000BA 50                      	push 	ax
   105 000000BB B88200                  	mov 	ax, 130
   106 000000BE 50                      	push 	ax
   107 000000BF E8AE06                  	call 	line
   108                                  
   109 000000C2 C606[0000]0F            	mov 	byte[cor], branco_intenso
   110 000000C7 B80A00                  	mov 	ax, 10
   111 000000CA 50                      	push 	ax
   112 000000CB B88200                  	mov 	ax, 130
   113 000000CE 50                      	push 	ax
   114 000000CF B80A00                  	mov 	ax, 10
   115 000000D2 50                      	push 	ax
   116 000000D3 B84B00                  	mov 	ax, 75
   117 000000D6 50                      	push 	ax
   118 000000D7 E89606                  	call 	line
   119                                  
   120                                  
   121                                  	; jogo da velha
   122                                  	; horizontal
   123 000000DA C606[0000]0F            	mov 	byte[cor], branco_intenso
   124 000000DF B89B00                  	mov 	ax, 155
   125 000000E2 50                      	push 	ax
   126 000000E3 B8FA00                  	mov 	ax, 250
   127 000000E6 50                      	push 	ax
   128 000000E7 B8E501                  	mov 	ax, 485
   129 000000EA 50                      	push 	ax
   130 000000EB B8FA00                  	mov 	ax, 250
   131 000000EE 50                      	push 	ax
   132 000000EF E87E06                  	call 	line
   133                                  
   134 000000F2 C606[0000]0F            	mov 	byte[cor], branco_intenso
   135 000000F7 B89B00                  	mov 	ax, 155
   136 000000FA 50                      	push 	ax
   137 000000FB B86801                  	mov 	ax, 360
   138 000000FE 50                      	push 	ax
   139 000000FF B8E501                  	mov 	ax, 485
   140 00000102 50                      	push 	ax
   141 00000103 B86801                  	mov 	ax, 360
   142 00000106 50                      	push 	ax
   143 00000107 E86606                  	call 	line
   144                                  
   145                                  	; vertical
   146 0000010A C606[0000]0F            	mov 	byte[cor], branco_intenso
   147 0000010F B80901                  	mov 	ax, 265
   148 00000112 50                      	push 	ax
   149 00000113 B88C00                  	mov 	ax, 140
   150 00000116 50                      	push 	ax
   151 00000117 B80901                  	mov 	ax, 265
   152 0000011A 50                      	push 	ax
   153 0000011B B8D601                  	mov 	ax, 470
   154 0000011E 50                      	push 	ax
   155 0000011F E84E06                  	call 	line
   156                                  
   157 00000122 C606[0000]0F            	mov 	byte[cor], branco_intenso
   158 00000127 B87701                  	mov 	ax, 375
   159 0000012A 50                      	push 	ax
   160 0000012B B88C00                  	mov 	ax, 140
   161 0000012E 50                      	push 	ax
   162 0000012F B87701                  	mov 	ax, 375
   163 00000132 50                      	push 	ax
   164 00000133 B8D601                  	mov 	ax, 470
   165 00000136 50                      	push 	ax
   166 00000137 E83606                  	call 	line
   167                                  
   168                                  le_novo_comando:
   169 0000013A C606[4500]00            	mov	byte [novo_comando], 0
   170 0000013F C606[4600]00            	mov	byte [novo_comando + 1], 0
   171 00000144 C606[4700]00            	mov	byte [novo_comando + 2], 0
   172                                  	
   173 00000149 BB0000                  	mov	bx, 0
   174                                  loop_le_novo_comando:
   175 0000014C B401                    	mov 	ah, 1
   176 0000014E CD21                    	int 	21h
   177                                  
   178 00000150 3C0D                    	cmp	al, 0Dh
   179 00000152 742A                    	je	leu_line_feed
   180                                  	
   181 00000154 3C08                    	cmp	al, 08h
   182 00000156 7403                    	je	leu_backspace
   183 00000158 E91500                  	jmp	nao_leu_backspace
   184                                  
   185                                  leu_backspace:
   186 0000015B 81FB0000                	cmp	bx, 0
   187 0000015F 74EB                    	je	loop_le_novo_comando
   188                                  
   189 00000161 81FB0300                	cmp	bx, 3
   190 00000165 7D05                    	jge	buffer_excedido
   191                                  
   192 00000167 C687[4500]00            	mov	byte [novo_comando + bx], 0
   193                                  	
   194                                  buffer_excedido:
   195 0000016C 4B                      	dec	bx
   196 0000016D E9DCFF                  	jmp	loop_le_novo_comando
   197                                  
   198                                  nao_leu_backspace:
   199 00000170 81FB0300                	cmp	bx, 3
   200 00000174 7D1D                    	jge	excedeu_tamanho_comando
   201                                  	
   202 00000176 8887[4500]              	mov	byte [novo_comando + bx], al
   203 0000017A 43                      	inc	bx
   204 0000017B E9CEFF                  	jmp 	loop_le_novo_comando
   205                                  
   206                                  leu_line_feed:
   207 0000017E 81FB0000                	cmp	bx, 0
   208 00000182 74C8                    	je	loop_le_novo_comando
   209                                  
   210 00000184 81FB0300                	cmp	bx, 3
   211 00000188 7F03                    	jg	apertou_enter_com_comando_muito_grande
   212                                  
   213 0000018A E90A00                  	jmp	processa_novo_comando
   214                                  
   215                                  apertou_enter_com_comando_muito_grande:
   216 0000018D E82200                  	call 	imprime_comando_invalido
   217 00000190 E9A7FF                  	jmp 	le_novo_comando
   218                                  
   219                                  excedeu_tamanho_comando:
   220 00000193 43                      	inc	bx
   221 00000194 E9B5FF                  	jmp 	loop_le_novo_comando
   222                                  
   223                                  processa_novo_comando:
   224                                  	; cmp 	al, 'c'
   225                                  	; je 	novo_jogo
   226 00000197 803E[4500]73            	cmp 	byte [novo_comando], 's'
   227 0000019C 7433                    	je 	sair
   228 0000019E 803E[4500]58            	cmp 	byte [novo_comando], 'X'
   229 000001A3 743E                    	je 	processa_jogada_X
   230 000001A5 803E[4500]43            	cmp 	byte [novo_comando], 'C'
   231 000001AA 7434                    	je 	processa_jogada_C_intermediario
   232 000001AC E80300                  	call 	imprime_comando_invalido
   233 000001AF E988FF                  	jmp 	le_novo_comando
   234                                  
   235                                  imprime_comando_invalido:
   236 000001B2 B91000                      	mov     cx, 16			;n�mero de caracteres
   237 000001B5 BB0000                      	mov     bx, 0
   238 000001B8 B61B                        	mov     dh, 27			;linha 0-29
   239 000001BA B21E                        	mov     dl, 30			;coluna 0-79
   240 000001BC C606[0000]04            	mov	byte [cor], vermelho
   241                                  
   242                                  loop_imprime_comando_invalido:
   243 000001C1 E8B503                  	call	cursor
   244 000001C4 8A87[1800]                  	mov     al,[bx + mensagem_comando_invalido]
   245 000001C8 E8C503                  	call	caracter
   246 000001CB 43                          	inc     bx			;proximo caracter
   247 000001CC FEC2                    	inc	dl			;avanca a coluna
   248 000001CE E2F1                        	loop    loop_imprime_comando_invalido
   249                                  
   250 000001D0 C3                      	ret
   251                                  
   252                                  ; novo_jogo:
   253                                  
   254                                  sair:
   255 000001D1 B408                    	mov    	ah, 08h
   256 000001D3 CD21                    	int     21h
   257 000001D5 B400                    	mov  	ah, 0   					; set video mode
   258 000001D7 A0[0100]                	mov  	al, [modo_anterior]   				; modo anterior
   259 000001DA CD10                    	int  	10h
   260                                  
   261 000001DC B44C                    	mov 	ah, 4ch
   262 000001DE CD21                    	int 	21h
   263                                  
   264                                  processa_jogada_C_intermediario:
   265 000001E0 E94E00                  	jmp	processa_jogada_C
   266                                  
   267                                  processa_jogada_X:
   268 000001E3 E8C002                  	call	calcula_posicao_i_j
   269 000001E6 E8A102                  	call	calcula_indice_array_jogadas
   270 000001E9 BE0000                  	mov	si, 0
   271 000001EC 8B36[5B00]              	mov	si, word [p]
   272 000001F0 80BC[5000]00            	cmp	byte [array_posicoes_jogadas + si], 0
   273 000001F5 750A                    	jne	jogada_x_invalida
   274 000001F7 803E[5D00]01            	cmp	byte [ultima_jogada], 1
   275 000001FC 7403                    	je	jogada_x_invalida
   276 000001FE E90600                  	jmp	jogada_x_valida
   277                                  
   278                                  jogada_x_invalida:
   279 00000201 E87B00                  	call 	imprime_jogada_invalida
   280 00000204 E933FF                  	jmp 	le_novo_comando
   281                                  
   282                                  jogada_x_valida:
   283 00000207 C606[5D00]01            	mov	byte [ultima_jogada], 1
   284 0000020C BE0000                  	mov	si, 0
   285 0000020F 8B36[5B00]              	mov	si, word [p]
   286 00000213 C684[5000]01            	mov	byte [array_posicoes_jogadas + si], 1
   287                                  
   288 00000218 B80000                  	mov	ax, 0
   289 0000021B A0[5900]                	mov	al, [i]
   290 0000021E BB0000                  	mov	bx, 0
   291 00000221 8A1E[5A00]              	mov	bl, [j]
   292 00000225 E8DD02                  	call 	desenha_x
   293 00000228 E87300                  	call	imprime_jogada
   294 0000022B E88F00                  	call	atualiza_estado_da_partida
   295 0000022E E909FF                  	jmp 	le_novo_comando
   296                                  
   297                                  processa_jogada_C:
   298 00000231 E87202                  	call	calcula_posicao_i_j
   299 00000234 E85302                  	call	calcula_indice_array_jogadas
   300 00000237 BE0000                  	mov	si, 0
   301 0000023A 8B36[5B00]              	mov	si, word [p]
   302 0000023E 80BC[5000]00            	cmp	byte [array_posicoes_jogadas + si], 0
   303 00000243 75BC                    	jne	jogada_x_invalida
   304 00000245 803E[5D00]02            	cmp	byte [ultima_jogada], 2
   305 0000024A 7403                    	je	jogada_circulo_invalida
   306 0000024C E90600                  	jmp	jogada_circulo_valida
   307                                  
   308                                  jogada_circulo_invalida:
   309 0000024F E82D00                  	call 	imprime_jogada_invalida
   310 00000252 E9E5FE                  	jmp 	le_novo_comando
   311                                  
   312                                  jogada_circulo_valida:
   313 00000255 C606[5D00]02            	mov	byte [ultima_jogada], 2
   314 0000025A BE0000                  	mov	si, 0
   315 0000025D 8B36[5B00]              	mov	si, word [p]
   316 00000261 C684[5000]02            	mov	byte [array_posicoes_jogadas + si], 2
   317                                  
   318 00000266 B80000                  	mov	ax, 0
   319 00000269 A0[5900]                	mov	al, [i]
   320 0000026C BB0000                  	mov	bx, 0
   321 0000026F 8A1E[5A00]              	mov	bl, [j]
   322 00000273 E86902                  	call 	desenha_circulo
   323 00000276 E82500                  	call	imprime_jogada
   324 00000279 E84100                  	call	atualiza_estado_da_partida
   325 0000027C E9BBFE                  	jmp 	le_novo_comando
   326                                  
   327                                  imprime_jogada_invalida:
   328 0000027F B91000                      	mov     cx, 16			;n�mero de caracteres
   329 00000282 BB0000                      	mov     bx, 0
   330 00000285 B61B                        	mov     dh, 27			;linha 0-29
   331 00000287 B21E                        	mov     dl, 30			;coluna 0-79
   332 00000289 C606[0000]04            	mov	byte [cor], vermelho
   333                                  
   334                                  loop_imprime_jogada_invalida:
   335 0000028E E8E802                  	call	cursor
   336 00000291 8A87[2800]                  	mov     al, [bx + mensagem_jogada_invalida]
   337 00000295 E8F802                  	call	caracter
   338 00000298 43                          	inc     bx			;proximo caracter
   339 00000299 FEC2                    	inc	dl			;avanca a coluna
   340 0000029B E2F1                        	loop    loop_imprime_jogada_invalida
   341 0000029D C3                      	ret
   342                                  
   343                                  imprime_jogada:
   344 0000029E B90300                      	mov     cx, 3			;n�mero de caracteres
   345 000002A1 BB0000                      	mov     bx, 0
   346 000002A4 B617                        	mov     dh, 23			;linha 0-29
   347 000002A6 B227                        	mov     dl, 39			;coluna 0-79
   348 000002A8 C606[0000]02            	mov	byte [cor], verde
   349                                  
   350                                  loop_imprime_jogada:
   351 000002AD E8C902                  	call	cursor
   352 000002B0 8A87[4500]                  	mov     al, [bx + novo_comando]
   353 000002B4 E8D902                  	call	caracter
   354 000002B7 43                          	inc     bx			;proximo caracter
   355 000002B8 FEC2                    	inc	dl			;avanca a coluna
   356 000002BA E2F1                        	loop    loop_imprime_jogada
   357 000002BC C3                      	ret
   358                                  
   359                                  atualiza_estado_da_partida:
   360 000002BD 50                      	push 	ax
   361                                  
   362                                  	; verifica horizontalmente
   363 000002BE A0[5300]                	mov	al, byte [array_posicoes_jogadas + 3]
   364 000002C1 3C00                    	cmp	al, 0
   365 000002C3 742A                    	je	partida_nao_acabou_1
   366 000002C5 3A06[5000]              	cmp 	al, byte [array_posicoes_jogadas + 0]
   367 000002C9 7524                    	jne	partida_nao_acabou_1
   368 000002CB 3A06[5600]              	cmp	al, byte [array_posicoes_jogadas + 6]
   369 000002CF 751E                    	jne	partida_nao_acabou_1
   370 000002D1 C706[4800]9B00          	mov	word [x1], 155
   371 000002D7 C706[4A00]9F01          	mov	word [y1], 415
   372 000002DD C706[4C00]E501          	mov	word [x2], 485
   373 000002E3 C706[4E00]9F01          	mov	word [y2], 415
   374 000002E9 E88301                  	call	desenha_linha_de_vitoria 
   375 000002EC E95901                  	jmp	partida_acabou
   376                                  
   377                                  partida_nao_acabou_1:
   378 000002EF A0[5400]                	mov	al, byte [array_posicoes_jogadas + 4]
   379 000002F2 3C00                    	cmp	al, 0
   380 000002F4 742A                    	je	partida_nao_acabou_2
   381 000002F6 3A06[5100]              	cmp 	al, byte [array_posicoes_jogadas + 1]
   382 000002FA 7524                    	jne	partida_nao_acabou_2
   383 000002FC 3A06[5700]              	cmp	al, byte [array_posicoes_jogadas + 7]
   384 00000300 751E                    	jne	partida_nao_acabou_2
   385 00000302 C706[4800]9B00          	mov	word [x1], 155
   386 00000308 C706[4A00]3101          	mov	word [y1], 305
   387 0000030E C706[4C00]E501          	mov	word [x2], 485
   388 00000314 C706[4E00]3101          	mov	word [y2], 305
   389 0000031A E85201                  	call	desenha_linha_de_vitoria 
   390 0000031D E92801                  	jmp	partida_acabou
   391                                  
   392                                  partida_nao_acabou_2:
   393 00000320 A0[5500]                	mov	al, byte [array_posicoes_jogadas + 5]
   394 00000323 3C00                    	cmp	al, 0
   395 00000325 742A                    	je	partida_nao_acabou_3
   396 00000327 3A06[5200]              	cmp 	al, byte [array_posicoes_jogadas + 2]
   397 0000032B 7524                    	jne	partida_nao_acabou_3
   398 0000032D 3A06[5800]              	cmp	al, byte [array_posicoes_jogadas + 8]
   399 00000331 751E                    	jne	partida_nao_acabou_3
   400 00000333 C706[4800]9B00          	mov	word [x1], 155
   401 00000339 C706[4A00]C300          	mov	word [y1], 195
   402 0000033F C706[4C00]E501          	mov	word [x2], 485
   403 00000345 C706[4E00]C300          	mov	word [y2], 195
   404 0000034B E82101                  	call	desenha_linha_de_vitoria 
   405 0000034E E9F700                  	jmp	partida_acabou
   406                                  
   407                                  ; verifica verticalmente
   408                                  partida_nao_acabou_3:
   409 00000351 A0[5100]                	mov	al, byte [array_posicoes_jogadas + 1]
   410 00000354 3C00                    	cmp	al, 0
   411 00000356 742A                    	je	partida_nao_acabou_4
   412 00000358 3A06[5000]              	cmp 	al, byte [array_posicoes_jogadas + 0]
   413 0000035C 7524                    	jne	partida_nao_acabou_4
   414 0000035E 3A06[5200]              	cmp	al, byte [array_posicoes_jogadas + 2]
   415 00000362 751E                    	jne	partida_nao_acabou_4
   416 00000364 C706[4800]D200          	mov	word [x1], 210
   417 0000036A C706[4A00]8C00          	mov	word [y1], 140
   418 00000370 C706[4C00]D200          	mov	word [x2], 210
   419 00000376 C706[4E00]D601          	mov	word [y2], 470
   420 0000037C E8F000                  	call	desenha_linha_de_vitoria
   421 0000037F E9C600                  	jmp	partida_acabou
   422                                  
   423                                  partida_nao_acabou_4:
   424 00000382 A0[5400]                	mov	al, byte [array_posicoes_jogadas + 4]
   425 00000385 3C00                    	cmp	al, 0
   426 00000387 742A                    	je	partida_nao_acabou_5
   427 00000389 3A06[5300]              	cmp 	al, byte [array_posicoes_jogadas + 3]
   428 0000038D 7524                    	jne	partida_nao_acabou_5
   429 0000038F 3A06[5500]              	cmp	al, byte [array_posicoes_jogadas + 5]
   430 00000393 751E                    	jne	partida_nao_acabou_5
   431 00000395 C706[4800]4001          	mov	word [x1], 320
   432 0000039B C706[4A00]8C00          	mov	word [y1], 140
   433 000003A1 C706[4C00]4001          	mov	word [x2], 320
   434 000003A7 C706[4E00]D601          	mov	word [y2], 470
   435 000003AD E8BF00                  	call	desenha_linha_de_vitoria
   436 000003B0 E99500                  	jmp	partida_acabou
   437                                  
   438                                  partida_nao_acabou_5:
   439 000003B3 A0[5700]                	mov	al, byte [array_posicoes_jogadas + 7]
   440 000003B6 3C00                    	cmp	al, 0
   441 000003B8 742A                    	je	partida_nao_acabou_6
   442 000003BA 3A06[5600]              	cmp 	al, byte [array_posicoes_jogadas + 6]
   443 000003BE 7524                    	jne	partida_nao_acabou_6
   444 000003C0 3A06[5800]              	cmp	al, byte [array_posicoes_jogadas + 8]
   445 000003C4 751E                    	jne	partida_nao_acabou_6
   446 000003C6 C706[4800]AE01          	mov	word [x1], 430
   447 000003CC C706[4A00]8C00          	mov	word [y1], 140
   448 000003D2 C706[4C00]AE01          	mov	word [x2], 430
   449 000003D8 C706[4E00]D601          	mov	word [y2], 470
   450 000003DE E88E00                  	call	desenha_linha_de_vitoria
   451 000003E1 E96400                  	jmp	partida_acabou
   452                                  
   453                                  ; verifica diagonalmente
   454                                  partida_nao_acabou_6:
   455 000003E4 A0[5400]                	mov	al, byte [array_posicoes_jogadas + 4]
   456 000003E7 3C00                    	cmp	al, 0
   457 000003E9 742A                    	je	partida_nao_acabou_7
   458 000003EB 3A06[5000]              	cmp 	al, byte [array_posicoes_jogadas + 0]
   459 000003EF 7524                    	jne	partida_nao_acabou_7
   460 000003F1 3A06[5800]              	cmp	al, byte [array_posicoes_jogadas + 8]
   461 000003F5 751E                    	jne	partida_nao_acabou_7
   462 000003F7 C706[4800]9B00          	mov	word [x1], 155
   463 000003FD C706[4A00]D601          	mov	word [y1], 470
   464 00000403 C706[4C00]E501          	mov	word [x2], 485
   465 00000409 C706[4E00]8C00          	mov	word [y2], 140
   466 0000040F E85D00                  	call	desenha_linha_de_vitoria
   467 00000412 E93300                  	jmp	partida_acabou
   468                                  
   469                                  partida_nao_acabou_7:
   470 00000415 A0[5400]                	mov	al, byte [array_posicoes_jogadas + 4]
   471 00000418 3C00                    	cmp	al, 0
   472 0000041A 742A                    	je	partida_nao_acabou_8
   473 0000041C 3A06[5200]              	cmp 	al, byte [array_posicoes_jogadas + 2]
   474 00000420 7524                    	jne	partida_nao_acabou_8
   475 00000422 3A06[5600]              	cmp	al, byte [array_posicoes_jogadas + 6]
   476 00000426 751E                    	jne	partida_nao_acabou_8
   477 00000428 C706[4800]9B00          	mov	word [x1], 155
   478 0000042E C706[4A00]8C00          	mov	word [y1], 140
   479 00000434 C706[4C00]E501          	mov	word [x2], 485
   480 0000043A C706[4E00]D601          	mov	word [y2], 470
   481 00000440 E82C00                  	call	desenha_linha_de_vitoria
   482 00000443 E90200                  	jmp	partida_acabou
   483                                  
   484                                  partida_nao_acabou_8:
   485 00000446 58                      	pop 	ax
   486 00000447 C3                      	ret
   487                                  
   488                                  partida_acabou:
   489 00000448 E80500                  	call	imprime_partida_acabou
   490 0000044B A2[5E00]                	mov	byte [estado_partida], al
   491 0000044E 58                      	pop 	ax
   492 0000044F C3                      	ret
   493                                  
   494                                  imprime_partida_acabou:
   495 00000450 B90E00                      	mov     cx, 14			;n�mero de caracteres
   496 00000453 BB0000                      	mov     bx, 0
   497 00000456 B61B                        	mov     dh, 27			;linha 0-29
   498 00000458 B227                        	mov     dl, 39			;coluna 0-79
   499 0000045A C606[0000]02            	mov	byte [cor], verde
   500                                  
   501                                  loop_imprime_partida_acabou:
   502 0000045F E81701                  	call	cursor
   503 00000462 8A87[3700]                  	mov     al, [bx + mensgem_partida_acabou]
   504 00000466 E82701                  	call	caracter
   505 00000469 43                          	inc     bx			;proximo caracter
   506 0000046A FEC2                    	inc	dl			;avanca a coluna
   507 0000046C E2F1                        	loop    loop_imprime_partida_acabou
   508 0000046E C3                      	ret
   509                                  
   510                                  desenha_linha_de_vitoria:
   511 0000046F 50                      	push	ax
   512 00000470 C606[0000]06            	mov	byte[cor], marrom
   513 00000475 A1[4800]                	mov	ax, [x1]
   514 00000478 50                      	push	ax
   515 00000479 A1[4A00]                	mov	ax, [y1]
   516 0000047C 50                      	push	ax
   517 0000047D A1[4C00]                	mov	ax, [x2]
   518 00000480 50                      	push	ax
   519 00000481 A1[4E00]                	mov	ax, [y2]
   520 00000484 50                      	push	ax
   521 00000485 E8E802                  	call 	line
   522 00000488 58                      	pop	ax
   523 00000489 C3                      	ret
   524                                  
   525                                  ; p = (i - 1)*3 + j - 1
   526                                  calcula_indice_array_jogadas:
   527 0000048A 50                      	push 	ax
   528 0000048B 53                      	push	bx
   529                                  
   530 0000048C B80000                  	mov	ax, 0
   531 0000048F A0[5900]                	mov	al, [i]
   532 00000492 FEC8                    	dec	al
   533 00000494 B303                    	mov	bl, 3
   534 00000496 F6E3                    	mul	bl
   535 00000498 8A1E[5A00]              	mov	bl, [j]
   536 0000049C 00D8                    	add	al, bl
   537 0000049E FEC8                    	dec	al
   538 000004A0 A3[5B00]                	mov	word [p], ax
   539                                  	
   540 000004A3 5B                      	pop 	bx
   541 000004A4 58                      	pop	ax
   542 000004A5 C3                      	ret
   543                                  
   544                                  calcula_posicao_i_j:
   545 000004A6 803E[4600]31            	cmp	byte [novo_comando + 1], '1'
   546 000004AB 722C                    	jb	jogada_invalida
   547 000004AD 803E[4600]33            	cmp	byte [novo_comando + 1], '3'
   548 000004B2 7F25                    	jg	jogada_invalida
   549 000004B4 803E[4700]31            	cmp	byte [novo_comando + 2], '1'
   550 000004B9 721E                    	jb	jogada_invalida
   551 000004BB 803E[4700]33            	cmp	byte [novo_comando + 2], '3'
   552 000004C0 7F17                    	jg	jogada_invalida
   553 000004C2 B80000                  	mov	ax, 0
   554 000004C5 A0[4600]                	mov	al, [novo_comando + 1]
   555 000004C8 2C30                    	sub	al, 30h
   556 000004CA A2[5900]                	mov	byte [i], al
   557 000004CD B80000                  	mov	ax, 0
   558 000004D0 A0[4700]                	mov	al, [novo_comando + 2]
   559 000004D3 2C30                    	sub	al, 30h
   560 000004D5 A2[5A00]                	mov	byte [j], al
   561 000004D8 C3                      	ret
   562                                  
   563                                  jogada_invalida:
   564 000004D9 E8A3FD                  	call	imprime_jogada_invalida
   565 000004DC E95BFC                  	jmp	le_novo_comando
   566                                  
   567                                  desenha_circulo:
   568 000004DF 51                      	push 	cx
   569                                  
   570 000004E0 B96E00                  	mov	cx, 110
   571                                  
   572 000004E3 48                      	dec 	ax
   573 000004E4 F7E1                    	mul 	cx
   574 000004E6 05D200                  	add 	ax, 210
   575 000004E9 50                      	push	ax
   576                                  
   577 000004EA 89D8                    	mov 	ax, bx
   578 000004EC 48                      	dec 	ax
   579 000004ED F7E1                    	mul 	cx
   580 000004EF 89C1                    	mov 	cx, ax
   581 000004F1 B89F01                  	mov	ax, 415
   582 000004F4 29C8                    	sub	ax, cx
   583 000004F6 50                      	push	ax
   584                                  
   585 000004F7 B82D00                  	mov	ax, 45
   586 000004FA 50                      	push	ax
   587                                  	
   588 000004FB C606[0000]05            	mov	byte[cor], magenta
   589 00000500 E8D200                  	call	circle
   590                                  
   591 00000503 59                      	pop 	cx
   592                                  
   593 00000504 C3                      	ret
   594                                  
   595                                  desenha_x:
   596 00000505 51                      	push 	cx
   597 00000506 52                      	push 	dx
   598                                  
   599 00000507 B96E00                  	mov	cx, 110
   600                                  
   601 0000050A 48                      	dec 	ax
   602 0000050B F7E1                    	mul 	cx
   603 0000050D 05D200                  	add 	ax, 210
   604 00000510 2D1F00                  	sub	ax, 31
   605 00000513 A3[4800]                	mov	word [x1], ax
   606 00000516 053E00                  	add	ax, 62
   607 00000519 A3[4C00]                	mov	word [x2], ax
   608                                  
   609 0000051C 89D8                    	mov 	ax, bx
   610 0000051E 48                      	dec 	ax
   611 0000051F F7E1                    	mul 	cx
   612 00000521 89C1                    	mov 	cx, ax
   613 00000523 B89F01                  	mov	ax, 415
   614 00000526 29C8                    	sub	ax, cx
   615 00000528 2D1F00                  	sub	ax, 31
   616 0000052B A3[4A00]                	mov	word [y1], ax
   617 0000052E 053E00                  	add	ax, 62
   618 00000531 A3[4E00]                	mov	word [y2], ax
   619                                  	
   620 00000534 C606[0000]02            	mov	byte[cor], verde
   621 00000539 A1[4800]                	mov	ax, [x1]
   622 0000053C 50                      	push	ax
   623 0000053D A1[4A00]                	mov	ax, [y1]
   624 00000540 50                      	push	ax
   625 00000541 A1[4C00]                	mov	ax, [x2]
   626 00000544 50                      	push	ax
   627 00000545 A1[4E00]                	mov	ax, [y2]
   628 00000548 50                      	push	ax
   629 00000549 E82402                  	call 	line
   630                                  
   631 0000054C A1[4A00]                	mov 	ax, [y1]
   632 0000054F 053E00                  	add	ax, 62
   633 00000552 A3[4A00]                	mov	word [y1], ax
   634 00000555 A1[4E00]                	mov	ax, [y2]
   635 00000558 2D3E00                  	sub	ax, 62
   636 0000055B A3[4E00]                	mov	word [y2], ax
   637                                  
   638 0000055E C606[0000]02            	mov	byte[cor], verde
   639 00000563 A1[4800]                	mov	ax, [x1]
   640 00000566 50                      	push	ax
   641 00000567 A1[4A00]                	mov	ax, [y1]
   642 0000056A 50                      	push	ax
   643 0000056B A1[4C00]                	mov	ax, [x2]
   644 0000056E 50                      	push	ax
   645 0000056F A1[4E00]                	mov	ax, [y2]
   646 00000572 50                      	push	ax
   647 00000573 E8FA01                  	call 	line
   648                                  
   649 00000576 5A                      	pop	dx
   650 00000577 59                      	pop 	cx
   651 00000578 C3                      	ret
   652                                  
   653                                  ;***************************************************************************
   654                                  ;
   655                                  ;   funcao cursor
   656                                  ;
   657                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   658                                  cursor:
   659 00000579 9C                      	pushf
   660 0000057A 50                      	push 	ax
   661 0000057B 53                      	push 	bx
   662 0000057C 51                      	push	cx
   663 0000057D 52                      	push	dx
   664 0000057E 56                      	push	si
   665 0000057F 57                      	push	di
   666 00000580 55                      	push	bp
   667 00000581 B402                    	mov     ah, 2
   668 00000583 B700                    	mov     bh, 0
   669 00000585 CD10                    	int     10h
   670 00000587 5D                      	pop	bp
   671 00000588 5F                      	pop	di
   672 00000589 5E                      	pop	si
   673 0000058A 5A                      	pop	dx
   674 0000058B 59                      	pop	cx
   675 0000058C 5B                      	pop	bx
   676 0000058D 58                      	pop	ax
   677 0000058E 9D                      	popf
   678 0000058F C3                      	ret
   679                                  ;_____________________________________________________________________________
   680                                  ;
   681                                  ;   funcao caracter escrito na posicao do cursor
   682                                  ;
   683                                  ; al= caracter a ser escrito
   684                                  ; cor definida na variavel cor
   685                                  caracter:
   686 00000590 9C                      	pushf
   687 00000591 50                      	push 	ax
   688 00000592 53                      	push 	bx
   689 00000593 51                      	push	cx
   690 00000594 52                      	push	dx
   691 00000595 56                      	push	si
   692 00000596 57                      	push	di
   693 00000597 55                      	push	bp
   694 00000598 B409                    	mov     ah, 9
   695 0000059A B700                    	mov     bh, 0
   696 0000059C B90100                  	mov     cx, 1
   697 0000059F 8A1E[0000]              	mov     bl, [cor]
   698 000005A3 CD10                    	int     10h
   699 000005A5 5D                      	pop	bp
   700 000005A6 5F                      	pop	di
   701 000005A7 5E                      	pop	si
   702 000005A8 5A                      	pop	dx
   703 000005A9 59                      	pop	cx
   704 000005AA 5B                      	pop	bx
   705 000005AB 58                      	pop	ax
   706 000005AC 9D                      	popf
   707 000005AD C3                      	ret
   708                                  ;_____________________________________________________________________________
   709                                  ;
   710                                  ;   funcao plot_xy
   711                                  ;
   712                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   713                                  ; cor definida na variavel cor
   714                                  plot_xy:
   715 000005AE 55                      	push	bp
   716 000005AF 89E5                    	mov	bp, sp
   717 000005B1 9C                      	pushf
   718 000005B2 50                      	push 	ax
   719 000005B3 53                      	push 	bx
   720 000005B4 51                      	push	cx
   721 000005B5 52                      	push	dx
   722 000005B6 56                      	push	si
   723 000005B7 57                      	push	di
   724 000005B8 B40C                    	mov     ah, 0ch
   725 000005BA A0[0000]                	mov     al, [cor]
   726 000005BD B700                    	mov     bh, 0
   727 000005BF BADF01                  	mov     dx, 479
   728 000005C2 2B5604                  	sub	dx, [bp+4]
   729 000005C5 8B4E06                  	mov     cx, [bp+6]
   730 000005C8 CD10                    	int     10h
   731 000005CA 5F                      	pop	di
   732 000005CB 5E                      	pop	si
   733 000005CC 5A                      	pop	dx
   734 000005CD 59                      	pop	cx
   735 000005CE 5B                      	pop	bx
   736 000005CF 58                      	pop	ax
   737 000005D0 9D                      	popf
   738 000005D1 5D                      	pop	bp
   739 000005D2 C20400                  	ret	4
   740                                  
   741                                  ;_____________________________________________________________________________
   742                                  ;    funcao circle
   743                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   744                                  ; cor definida na variavel cor
   745                                  circle:
   746 000005D5 55                      	push 	bp
   747 000005D6 89E5                    	mov	bp, sp
   748 000005D8 9C                      	pushf                        ;coloca os flags na pilha
   749 000005D9 50                      	push 	ax
   750 000005DA 53                      	push 	bx
   751 000005DB 51                      	push	cx
   752 000005DC 52                      	push	dx
   753 000005DD 56                      	push	si
   754 000005DE 57                      	push	di
   755                                  	
   756 000005DF 8B4608                  	mov	ax, [bp+8]    ; resgata xc
   757 000005E2 8B5E06                  	mov	bx, [bp+6]    ; resgata yc
   758 000005E5 8B4E04                  	mov	cx, [bp+4]    ; resgata r
   759                                  	
   760 000005E8 89DA                    	mov 	dx, bx	
   761 000005EA 01CA                    	add	dx, cx       ;ponto extremo superior
   762 000005EC 50                      	push    ax			
   763 000005ED 52                      	push	dx
   764 000005EE E8BDFF                  	call 	plot_xy
   765                                  	
   766 000005F1 89DA                    	mov	dx, bx
   767 000005F3 29CA                    	sub	dx, cx       ;ponto extremo inferior
   768 000005F5 50                      	push    ax			
   769 000005F6 52                      	push	dx
   770 000005F7 E8B4FF                  	call 	plot_xy
   771                                  	
   772 000005FA 89C2                    	mov 	dx, ax	
   773 000005FC 01CA                    	add	dx, cx       ;ponto extremo direita
   774 000005FE 52                      	push    dx			
   775 000005FF 53                      	push	bx
   776 00000600 E8ABFF                  	call 	plot_xy
   777                                  	
   778 00000603 89C2                    	mov	dx, ax
   779 00000605 29CA                    	sub	dx, cx       ;ponto extremo esquerda
   780 00000607 52                      	push    dx			
   781 00000608 53                      	push	bx
   782 00000609 E8A2FF                  	call 	plot_xy
   783                                  		
   784 0000060C 89CF                    	mov	di, cx
   785 0000060E 81EF0100                	sub	di, 1	 ;di=r-1
   786 00000612 BA0000                  	mov	dx, 0  	;dx ser� a vari�vel x. cx � a variavel y
   787                                  	
   788                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   789                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   790                                  ;valores positivos para d
   791                                  
   792                                  stay:				;loop
   793 00000615 89FE                    	mov	si, di
   794 00000617 81FE0000                	cmp	si, 0
   795 0000061B 7F0E                    	jg	inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   796 0000061D 89D6                    	mov	si, dx		;o jl � importante porque trata-se de conta com sinal
   797 0000061F D1E6                    	sal	si, 1		;multiplica por doi (shift arithmetic left)
   798 00000621 81C60300                	add	si, 3
   799 00000625 01F7                    	add	di, si     ;nesse ponto d=d+2*dx+3
   800 00000627 42                      	inc	dx		;incrementa dx
   801 00000628 E90E00                  	jmp	plotar
   802                                  inf:	
   803 0000062B 89D6                    	mov	si, dx
   804 0000062D 29CE                    	sub	si, cx  		;faz x - y (dx-cx), e salva em di 
   805 0000062F D1E6                    	sal	si, 1
   806 00000631 81C60500                	add	si, 5
   807 00000635 01F7                    	add	di, si		;nesse ponto d=d+2*(dx-cx)+5
   808 00000637 42                      	inc	dx		;incrementa x (dx)
   809 00000638 49                      	dec	cx		;decrementa y (cx)
   810                                  	
   811                                  plotar:	
   812 00000639 89D6                    	mov	si, dx
   813 0000063B 01C6                    	add	si, ax
   814 0000063D 56                      	push    si			;coloca a abcisa x+xc na pilha
   815 0000063E 89CE                    	mov	si, cx
   816 00000640 01DE                    	add	si, bx
   817 00000642 56                      	push    si			;coloca a ordenada y+yc na pilha
   818 00000643 E868FF                  	call 	plot_xy		;toma conta do segundo octante
   819 00000646 89C6                    	mov	si, ax
   820 00000648 01D6                    	add	si, dx
   821 0000064A 56                      	push    si			;coloca a abcisa xc+x na pilha
   822 0000064B 89DE                    	mov	si, bx
   823 0000064D 29CE                    	sub	si, cx
   824 0000064F 56                      	push    si			;coloca a ordenada yc-y na pilha
   825 00000650 E85BFF                  	call 	plot_xy		;toma conta do s�timo octante
   826 00000653 89C6                    	mov	si, ax
   827 00000655 01CE                    	add	si, cx
   828 00000657 56                      	push    si			;coloca a abcisa xc+y na pilha
   829 00000658 89DE                    	mov	si, bx
   830 0000065A 01D6                    	add	si, dx
   831 0000065C 56                      	push    si			;coloca a ordenada yc+x na pilha
   832 0000065D E84EFF                  	call 	plot_xy		;toma conta do segundo octante
   833 00000660 89C6                    	mov	si, ax
   834 00000662 01CE                    	add	si, cx
   835 00000664 56                      	push    si			;coloca a abcisa xc+y na pilha
   836 00000665 89DE                    	mov	si, bx
   837 00000667 29D6                    	sub	si, dx
   838 00000669 56                      	push    si			;coloca a ordenada yc-x na pilha
   839 0000066A E841FF                  	call 	plot_xy		;toma conta do oitavo octante
   840 0000066D 89C6                    	mov	si, ax
   841 0000066F 29D6                    	sub	si, dx
   842 00000671 56                      	push    si			;coloca a abcisa xc-x na pilha
   843 00000672 89DE                    	mov	si, bx
   844 00000674 01CE                    	add	si, cx
   845 00000676 56                      	push    si			;coloca a ordenada yc+y na pilha
   846 00000677 E834FF                  	call 	plot_xy		;toma conta do terceiro octante
   847 0000067A 89C6                    	mov	si, ax
   848 0000067C 29D6                    	sub	si, dx
   849 0000067E 56                      	push    si			;coloca a abcisa xc-x na pilha
   850 0000067F 89DE                    	mov	si, bx
   851 00000681 29CE                    	sub	si, cx
   852 00000683 56                      	push    si			;coloca a ordenada yc-y na pilha
   853 00000684 E827FF                  	call 	plot_xy		;toma conta do sexto octante
   854 00000687 89C6                    	mov	si, ax
   855 00000689 29CE                    	sub	si, cx
   856 0000068B 56                      	push    si			;coloca a abcisa xc-y na pilha
   857 0000068C 89DE                    	mov	si, bx
   858 0000068E 29D6                    	sub	si, dx
   859 00000690 56                      	push    si			;coloca a ordenada yc-x na pilha
   860 00000691 E81AFF                  	call 	plot_xy		;toma conta do quinto octante
   861 00000694 89C6                    	mov	si, ax
   862 00000696 29CE                    	sub	si, cx
   863 00000698 56                      	push    si			;coloca a abcisa xc-y na pilha
   864 00000699 89DE                    	mov	si, bx
   865 0000069B 01D6                    	add	si, dx
   866 0000069D 56                      	push    si			;coloca a ordenada yc-x na pilha
   867 0000069E E80DFF                  	call 	plot_xy		;toma conta do quarto octante
   868                                  	
   869 000006A1 39D1                    	cmp	cx, dx
   870 000006A3 7203                    	jb	fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   871 000006A5 E96DFF                  	jmp	stay		;se cx (y) est� acima de dx (x), continua no loop
   872                                  	
   873                                  fim_circle:
   874 000006A8 5F                      	pop	di
   875 000006A9 5E                      	pop	si
   876 000006AA 5A                      	pop	dx
   877 000006AB 59                      	pop	cx
   878 000006AC 5B                      	pop	bx
   879 000006AD 58                      	pop	ax
   880 000006AE 9D                      	popf
   881 000006AF 5D                      	pop	bp
   882 000006B0 C20600                  	ret	6
   883                                  ;-----------------------------------------------------------------------------
   884                                  ;    fun��o full_circle
   885                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   886                                  ; cor definida na variavel cor					  
   887                                  full_circle:
   888 000006B3 55                      	push 	bp
   889 000006B4 89E5                    	mov	bp, sp
   890 000006B6 9C                      	pushf                        ;coloca os flags na pilha
   891 000006B7 50                      	push 	ax
   892 000006B8 53                      	push 	bx
   893 000006B9 51                      	push	cx
   894 000006BA 52                      	push	dx
   895 000006BB 56                      	push	si
   896 000006BC 57                      	push	di
   897                                  
   898 000006BD 8B4608                  	mov	ax, [bp+8]    ; resgata xc
   899 000006C0 8B5E06                  	mov	bx, [bp+6]    ; resgata yc
   900 000006C3 8B4E04                  	mov	cx, [bp+4]    ; resgata r
   901                                  	
   902 000006C6 89DE                    	mov	si, bx
   903 000006C8 29CE                    	sub	si, cx
   904 000006CA 50                      	push    ax			;coloca xc na pilha			
   905 000006CB 56                      	push	si			;coloca yc-r na pilha
   906 000006CC 89DE                    	mov	si, bx
   907 000006CE 01CE                    	add	si, cx
   908 000006D0 50                      	push	ax		;coloca xc na pilha
   909 000006D1 56                      	push	si		;coloca yc+r na pilha
   910 000006D2 E89B00                  	call 	line
   911                                  	
   912                                  		
   913 000006D5 89CF                    	mov	di, cx
   914 000006D7 81EF0100                	sub	di, 1	 ;di=r-1
   915 000006DB BA0000                  	mov	dx, 0  	;dx ser� a vari�vel x. cx � a variavel y
   916                                  	
   917                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   918                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   919                                  ;valores positivos para d
   920                                  
   921                                  stay_full:				;loop
   922 000006DE 89FE                    	mov	si, di
   923 000006E0 81FE0000                	cmp	si, 0
   924 000006E4 7F0E                    	jg	inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   925 000006E6 89D6                    	mov	si, dx		;o jl � importante porque trata-se de conta com sinal
   926 000006E8 D1E6                    	sal	si, 1		;multiplica por doi (shift arithmetic left)
   927 000006EA 81C60300                	add	si, 3
   928 000006EE 01F7                    	add	di, si     ;nesse ponto d=d+2*dx+3
   929 000006F0 42                      	inc	dx		;incrementa dx
   930 000006F1 E90E00                  	jmp	plotar_full
   931                                  inf_full:	
   932 000006F4 89D6                    	mov	si, dx
   933 000006F6 29CE                    	sub	si, cx  		;faz x - y (dx-cx), e salva em di 
   934 000006F8 D1E6                    	sal	si, 1
   935 000006FA 81C60500                	add	si, 5
   936 000006FE 01F7                    	add	di, si		;nesse ponto d=d+2*(dx-cx)+5
   937 00000700 42                      	inc	dx		;incrementa x (dx)
   938 00000701 49                      	dec	cx		;decrementa y (cx)
   939                                  	
   940                                  plotar_full:	
   941 00000702 89C6                    	mov	si, ax
   942 00000704 01CE                    	add	si, cx
   943 00000706 56                      	push	si		;coloca a abcisa y+xc na pilha			
   944 00000707 89DE                    	mov	si, bx
   945 00000709 29D6                    	sub	si, dx
   946 0000070B 56                      	push    si		;coloca a ordenada yc-x na pilha
   947 0000070C 89C6                    	mov	si, ax
   948 0000070E 01CE                    	add	si, cx
   949 00000710 56                      	push	si		;coloca a abcisa y+xc na pilha	
   950 00000711 89DE                    	mov	si, bx
   951 00000713 01D6                    	add	si, dx
   952 00000715 56                      	push    si		;coloca a ordenada yc+x na pilha	
   953 00000716 E85700                  	call 	line
   954                                  	
   955 00000719 89C6                    	mov	si, ax
   956 0000071B 01D6                    	add	si, dx
   957 0000071D 56                      	push	si		;coloca a abcisa xc+x na pilha			
   958 0000071E 89DE                    	mov	si, bx
   959 00000720 29CE                    	sub	si, cx
   960 00000722 56                      	push    si		;coloca a ordenada yc-y na pilha
   961 00000723 89C6                    	mov	si, ax
   962 00000725 01D6                    	add	si, dx
   963 00000727 56                      	push	si		;coloca a abcisa xc+x na pilha	
   964 00000728 89DE                    	mov	si, bx
   965 0000072A 01CE                    	add	si, cx
   966 0000072C 56                      	push    si		;coloca a ordenada yc+y na pilha	
   967 0000072D E84000                  	call	line
   968                                  	
   969 00000730 89C6                    	mov	si, ax
   970 00000732 29D6                    	sub	si, dx
   971 00000734 56                      	push	si		;coloca a abcisa xc-x na pilha			
   972 00000735 89DE                    	mov	si, bx
   973 00000737 29CE                    	sub	si, cx
   974 00000739 56                      	push    si		;coloca a ordenada yc-y na pilha
   975 0000073A 89C6                    	mov	si, ax
   976 0000073C 29D6                    	sub	si, dx
   977 0000073E 56                      	push	si		;coloca a abcisa xc-x na pilha	
   978 0000073F 89DE                    	mov	si, bx
   979 00000741 01CE                    	add	si, cx
   980 00000743 56                      	push    si		;coloca a ordenada yc+y na pilha	
   981 00000744 E82900                  	call	line
   982                                  	
   983 00000747 89C6                    	mov	si, ax
   984 00000749 29CE                    	sub	si, cx
   985 0000074B 56                      	push	si		;coloca a abcisa xc-y na pilha			
   986 0000074C 89DE                    	mov	si, bx
   987 0000074E 29D6                    	sub	si, dx
   988 00000750 56                      	push    si		;coloca a ordenada yc-x na pilha
   989 00000751 89C6                    	mov	si, ax
   990 00000753 29CE                    	sub	si, cx
   991 00000755 56                      	push	si		;coloca a abcisa xc-y na pilha	
   992 00000756 89DE                    	mov	si, bx
   993 00000758 01D6                    	add	si, dx
   994 0000075A 56                      	push    si		;coloca a ordenada yc+x na pilha	
   995 0000075B E81200                  	call	line
   996                                  
   997 0000075E 39D1                    	cmp	cx, dx
   998 00000760 7203                    	jb	fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   999 00000762 E979FF                  	jmp	stay_full		;se cx (y) est� acima de dx (x), continua no loop
  1000                                  	
  1001                                  	
  1002                                  fim_full_circle:
  1003 00000765 5F                      	pop	di
  1004 00000766 5E                      	pop	si
  1005 00000767 5A                      	pop	dx
  1006 00000768 59                      	pop	cx
  1007 00000769 5B                      	pop	bx
  1008 0000076A 58                      	pop	ax
  1009 0000076B 9D                      	popf
  1010 0000076C 5D                      	pop	bp
  1011 0000076D C20600                  	ret	6
  1012                                  ;-----------------------------------------------------------------------------
  1013                                  ;
  1014                                  ;   funcao line
  1015                                  ;
  1016                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1017                                  line:
  1018 00000770 55                      	push	bp
  1019 00000771 89E5                    	mov	bp, sp
  1020 00000773 9C                      	pushf                        ;coloca os flags na pilha
  1021 00000774 50                      	push 	ax
  1022 00000775 53                      	push 	bx
  1023 00000776 51                      	push	cx
  1024 00000777 52                      	push	dx
  1025 00000778 56                      	push	si
  1026 00000779 57                      	push	di
  1027 0000077A 8B460A                  	mov	ax, [bp + 10]   ; resgata os valores das coordenadas
  1028 0000077D 8B5E08                  	mov	bx, [bp + 8]    ; resgata os valores das coordenadas
  1029 00000780 8B4E06                  	mov	cx, [bp + 6]    ; resgata os valores das coordenadas
  1030 00000783 8B5604                  	mov	dx, [bp + 4]    ; resgata os valores das coordenadas
  1031 00000786 39C8                    	cmp	ax, cx
  1032 00000788 7408                    	je	line2
  1033 0000078A 721C                    	jb	line1
  1034 0000078C 91                      	xchg	ax, cx
  1035 0000078D 87DA                    	xchg	bx, dx
  1036 0000078F E91600                  	jmp	line1
  1037                                  line2:		; deltax=0
  1038 00000792 39D3                    	cmp	bx, dx  ;subtrai dx de bx
  1039 00000794 7202                    	jb	line3
  1040 00000796 87DA                    	xchg	bx, dx        ;troca os valores de bx e dx entre eles
  1041                                  line3:	; dx > bx
  1042 00000798 50                      	push	ax
  1043 00000799 53                      	push	bx
  1044 0000079A E811FE                  	call 	plot_xy
  1045 0000079D 39D3                    	cmp	bx, dx
  1046 0000079F 7503                    	jne	line31
  1047 000007A1 E9C600                  	jmp	fim_line
  1048                                  line31:	
  1049 000007A4 43                      	inc	bx
  1050 000007A5 E9F0FF                  	jmp	line3
  1051                                  ;deltax <>0
  1052                                  line1:
  1053                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1054                                  	; cx > ax
  1055 000007A8 51                      	push	cx
  1056 000007A9 29C1                    	sub	cx, ax
  1057 000007AB 890E[0600]              	mov	[deltax], cx
  1058 000007AF 59                      	pop	cx
  1059 000007B0 52                      	push	dx
  1060 000007B1 29DA                    	sub	dx, bx
  1061 000007B3 7702                    	ja	line32
  1062 000007B5 F7DA                    	neg	dx
  1063                                  line32:		
  1064 000007B7 8916[0800]              	mov	[deltay], dx
  1065 000007BB 5A                      	pop	dx
  1066                                  
  1067 000007BC 50                      	push	ax
  1068 000007BD A1[0600]                	mov	ax, [deltax]
  1069 000007C0 3B06[0800]              	cmp	ax, [deltay]
  1070 000007C4 58                      	pop	ax
  1071 000007C5 724D                    	jb	line5
  1072                                  
  1073                                  	; cx > ax e deltax>deltay
  1074 000007C7 51                      	push	cx
  1075 000007C8 29C1                    	sub	cx, ax
  1076 000007CA 890E[0600]              	mov	[deltax], cx
  1077 000007CE 59                      	pop	cx
  1078 000007CF 52                      	push	dx
  1079 000007D0 29DA                    	sub	dx, bx
  1080 000007D2 8916[0800]              	mov	[deltay], dx
  1081 000007D6 5A                      	pop	dx
  1082                                  
  1083 000007D7 89C6                    	mov	si, ax
  1084                                  line4:
  1085 000007D9 50                      	push	ax
  1086 000007DA 52                      	push	dx
  1087 000007DB 56                      	push	si
  1088 000007DC 29C6                    	sub	si, ax	;(x-x1)
  1089 000007DE A1[0800]                	mov	ax, [deltay]
  1090 000007E1 F7EE                    	imul	si
  1091 000007E3 8B36[0600]              	mov	si, [deltax]		;arredondar
  1092 000007E7 D1EE                    	shr	si, 1
  1093                                  ; se numerador (DX)>0 soma se <0 subtrai
  1094 000007E9 81FA0000                	cmp	dx, 0
  1095 000007ED 7C09                    	jl	ar1
  1096 000007EF 01F0                    	add	ax, si
  1097 000007F1 81D20000                	adc	dx, 0
  1098 000007F5 E90600                  	jmp	arc1
  1099                                  ar1:	
  1100 000007F8 29F0                    	sub	ax, si
  1101 000007FA 81DA0000                	sbb	dx, 0
  1102                                  arc1:
  1103 000007FE F73E[0600]              	idiv	word [deltax]
  1104 00000802 01D8                    	add	ax, bx
  1105 00000804 5E                      	pop	si
  1106 00000805 56                      	push	si
  1107 00000806 50                      	push	ax
  1108 00000807 E8A4FD                  	call	plot_xy
  1109 0000080A 5A                      	pop	dx
  1110 0000080B 58                      	pop	ax
  1111 0000080C 39CE                    	cmp	si, cx
  1112 0000080E 745A                    	je	fim_line
  1113 00000810 46                      	inc	si
  1114 00000811 E9C5FF                  	jmp	line4
  1115                                  
  1116                                  line5:	
  1117 00000814 39D3                    	cmp	bx, dx
  1118 00000816 7203                    	jb 	line7
  1119 00000818 91                      	xchg	ax, cx
  1120 00000819 87DA                    	xchg	bx, dx
  1121                                  line7:
  1122 0000081B 51                      	push	cx
  1123 0000081C 29C1                    	sub	cx, ax
  1124 0000081E 890E[0600]              	mov	[deltax], cx
  1125 00000822 59                      	pop	cx
  1126 00000823 52                      	push	dx
  1127 00000824 29DA                    	sub	dx,bx
  1128 00000826 8916[0800]              	mov	[deltay], dx
  1129 0000082A 5A                      	pop	dx
  1130                                  
  1131                                  
  1132                                  
  1133 0000082B 89DE                    	mov	si,bx
  1134                                  line6:
  1135 0000082D 52                      	push	dx
  1136 0000082E 56                      	push	si
  1137 0000082F 50                      	push	ax
  1138 00000830 29DE                    	sub	si, bx	;(y-y1)
  1139 00000832 A1[0600]                	mov	ax, [deltax]
  1140 00000835 F7EE                    	imul	si
  1141 00000837 8B36[0800]              	mov	si, [deltay]		;arredondar
  1142 0000083B D1EE                    	shr	si, 1
  1143                                  ; se numerador (DX)>0 soma se <0 subtrai
  1144 0000083D 81FA0000                	cmp	dx, 0
  1145 00000841 7C09                    	jl	ar2
  1146 00000843 01F0                    	add	ax, si
  1147 00000845 81D20000                	adc	dx, 0
  1148 00000849 E90600                  	jmp	arc2
  1149                                  ar2:	
  1150 0000084C 29F0                    	sub	ax, si
  1151 0000084E 81DA0000                	sbb	dx, 0
  1152                                  arc2:
  1153 00000852 F73E[0800]              	idiv	word [deltay]
  1154 00000856 89C7                    	mov	di, ax
  1155 00000858 58                      	pop	ax
  1156 00000859 01C7                    	add	di, ax
  1157 0000085B 5E                      	pop	si
  1158 0000085C 57                      	push	di
  1159 0000085D 56                      	push	si
  1160 0000085E E84DFD                  	call	plot_xy
  1161 00000861 5A                      	pop	dx
  1162 00000862 39D6                    	cmp	si, dx
  1163 00000864 7404                    	je	fim_line
  1164 00000866 46                      	inc	si
  1165 00000867 E9C3FF                  	jmp	line6
  1166                                  
  1167                                  fim_line:
  1168 0000086A 5F                      	pop	di
  1169 0000086B 5E                      	pop	si
  1170 0000086C 5A                      	pop	dx
  1171 0000086D 59                      	pop	cx
  1172 0000086E 5B                      	pop	bx
  1173 0000086F 58                      	pop	ax
  1174 00000870 9D                      	popf
  1175 00000871 5D                      	pop	bp
  1176 00000872 C20800                  	ret	8
  1177                                  
  1178                                  ;*******************************************************************
  1179                                  segment data
  1180                                  
  1181                                  
  1182                                  ;	I R G B COR
  1183                                  ;	0 0 0 0 preto
  1184                                  ;	0 0 0 1 azul
  1185                                  ;	0 0 1 0 verde
  1186                                  ;	0 0 1 1 cyan
  1187                                  ;	0 1 0 0 vermelho
  1188                                  ;	0 1 0 1 magenta
  1189                                  ;	0 1 1 0 marrom
  1190                                  ;	0 1 1 1 branco
  1191                                  ;	1 0 0 0 cinza
  1192                                  ;	1 0 0 1 azul claro
  1193                                  ;	1 0 1 0 verde claro
  1194                                  ;	1 0 1 1 cyan claro
  1195                                  ;	1 1 0 0 rosa
  1196                                  ;	1 1 0 1 magenta claro
  1197                                  ;	1 1 1 0 amarelo
  1198                                  ;	1 1 1 1 branco intenso
  1199                                  
  1200 00000000 0F                      cor				db			branco_intenso
  1201                                  preto				equ			0
  1202                                  azul				equ			1
  1203                                  verde				equ			2
  1204                                  cyan				equ			3
  1205                                  vermelho			equ			4
  1206                                  magenta				equ			5
  1207                                  marrom				equ			6
  1208                                  branco				equ			7
  1209                                  cinza				equ			8
  1210                                  azul_claro			equ			9
  1211                                  verde_claro			equ			10
  1212                                  cyan_claro			equ			11
  1213                                  rosa				equ			12
  1214                                  magenta_claro			equ			13
  1215                                  amarelo				equ			14
  1216                                  branco_intenso			equ			15
  1217                                  
  1218 00000001 00                      modo_anterior			db			0
  1219 00000002 0000                    linha   			dw  			0
  1220 00000004 0000                    coluna  			dw  			0
  1221 00000006 0000                    deltax				dw			0
  1222 00000008 0000                    deltay				dw			0	
  1223 0000000A 46756E63616F204772-     mens    			db  			'Funcao Grafica'
  1224 00000013 6166696361         
  1225                                  
  1226                                  ; mensagens de erro impressas na tela ao longo do jogo
  1227 00000018 436F6D616E646F2049-     mensagem_comando_invalido	db			'Comando Invalido'
  1228 00000021 6E76616C69646F     
  1229 00000028 4A6F6761646120496E-     mensagem_jogada_invalida	db			'Jogada Invalida'
  1230 00000031 76616C696461       
  1231 00000037 506172746964612041-     mensgem_partida_acabou		db			'Partida Acabou'
  1232 00000040 6361626F75         
  1233                                  
  1234                                  ; armazena o novo comando que esta sendo digitado
  1235 00000045 000000                  novo_comando			db			0, 0, 0
  1236                                  
  1237                                  ; variaveis auxiliares usadas na impressao dos X's
  1238 00000048 0000                    x1				dw			0
  1239 0000004A 0000                    y1				dw			0
  1240 0000004C 0000                    x2				dw			0
  1241 0000004E 0000                    y2				dw			0
  1242                                  
  1243                                  ; array que armazena a situacao atual de cada celula do jogo da velha
  1244                                  ; 0 indica que nada foi jogado na posicao
  1245                                  ; 1 indica que X foi jogado na posicao
  1246                                  ; 2 indica que circulo foi jogado na posicao
  1247 00000050 000000000000000000      array_posicoes_jogadas		db			0, 0, 0, 0, 0, 0, 0, 0, 0
  1248 00000059 00                      i				db			0
  1249 0000005A 00                      j				db			0
  1250 0000005B 0000                    p				dw			0
  1251                                  
  1252                                  ; ultima jogada
  1253                                  ; 0 se ninguem jogou ainda
  1254                                  ; 1 se X foi jogado por ultimo
  1255                                  ; 2 se Circulo foi jogado por ultimo
  1256 0000005D 00                      ultima_jogada			db			0
  1257                                  
  1258                                  ; estado da partida
  1259                                  ; 0 ninguem ganhou
  1260                                  ; 1 se X ganhou o jogo
  1261                                  ; 2 se Circulo ganhou jogo
  1262 0000005E 00                      estado_partida			db			0
  1263                                  
  1264                                  ;*************************************************************************
  1265                                  segment stack stack
  1266 00000000 <res 00000200>          	resb 	512
  1267                                  stacktop:
