     1                                  ; Hiuri Liberato
     2                                  ; Mateus Ticianeli Sartorio
     3                                  ; Sistemas Embarcados I - 2023/2 - Engenharia de Computacao
     4                                  
     5                                  ; versao de 10/05/2007
     6                                  ; corrigido erro de arredondamento na rotina line.
     7                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     8                                  
     9                                  segment code
    10                                  ..start:
    11 00000000 B8[0000]                	mov 		ax, data
    12 00000003 8ED8                    	mov 		ds, ax
    13 00000005 B8[0000]                	mov 		ax, stack
    14 00000008 8ED0                    	mov 		ss, ax
    15 0000000A BC[0002]                	mov 		sp, stacktop
    16                                  
    17                                  ; salva modo atual de video (vendo como esta o modo de video da maquina)
    18 0000000D B40F                    	mov  		ah, 0Fh
    19 0000000F CD10                    	int  		10h
    20 00000011 A2[0100]                	mov  		[modo_anterior], al   
    21                                  
    22                                  ; altera modo de video para grafico 640x480 16 cores
    23 00000014 B012                    	mov     	al, 12h
    24 00000016 B400                    	mov     	ah, 0
    25 00000018 CD10                    	int     	10h
    26                                  
    27                                  ; A partir daqui codigo desenvolvido pela gente
    28                                  desenha_ui:
    29                                  	; primeiro retangulo
    30 0000001A C606[0000]0F            	mov byte[cor], branco_intenso
    31 0000001F B80A00                  	mov ax, 10
    32 00000022 50                      	push ax
    33 00000023 B80A00                  	mov ax, 10
    34 00000026 50                      	push ax
    35 00000027 B87602                  	mov ax, 630
    36 0000002A 50                      	push ax
    37 0000002B B80A00                  	mov ax, 10
    38 0000002E 50                      	push ax
    39 0000002F E8B004                  	call line
    40                                  
    41 00000032 C606[0000]0F            	mov byte[cor], branco_intenso
    42 00000037 B87602                  	mov ax, 630
    43 0000003A 50                      	push ax
    44 0000003B B80A00                  	mov ax, 10
    45 0000003E 50                      	push ax
    46 0000003F B87602                  	mov ax, 630
    47 00000042 50                      	push ax
    48 00000043 B84100                  	mov ax, 65
    49 00000046 50                      	push ax
    50 00000047 E89804                  	call line
    51                                  
    52 0000004A C606[0000]0F            	mov byte[cor], branco_intenso
    53 0000004F B80A00                  	mov ax, 10
    54 00000052 50                      	push ax
    55 00000053 B84100                  	mov ax, 65
    56 00000056 50                      	push ax
    57 00000057 B87602                  	mov ax, 630
    58 0000005A 50                      	push ax
    59 0000005B B84100                  	mov ax, 65
    60 0000005E 50                      	push ax
    61 0000005F E88004                  	call line
    62                                  
    63 00000062 C606[0000]0F            	mov byte[cor], branco_intenso
    64 00000067 B80A00                  	mov ax, 10
    65 0000006A 50                      	push ax
    66 0000006B B80A00                  	mov ax, 10
    67 0000006E 50                      	push ax
    68 0000006F B80A00                  	mov ax, 10
    69 00000072 50                      	push ax
    70 00000073 B84100                  	mov ax, 65
    71 00000076 50                      	push ax
    72 00000077 E86804                  	call line
    73                                  
    74                                  
    75                                  	; segundo retangulo
    76 0000007A C606[0000]0F            	mov byte[cor], branco_intenso
    77 0000007F B80A00                  	mov ax, 10
    78 00000082 50                      	push ax
    79 00000083 B84B00                  	mov ax, 75
    80 00000086 50                      	push ax
    81 00000087 B87602                  	mov ax, 630
    82 0000008A 50                      	push ax
    83 0000008B B84B00                  	mov ax, 75
    84 0000008E 50                      	push ax
    85 0000008F E85004                  	call line
    86                                  
    87 00000092 C606[0000]0F            	mov byte[cor], branco_intenso
    88 00000097 B87602                  	mov ax, 630
    89 0000009A 50                      	push ax
    90 0000009B B84B00                  	mov ax, 75
    91 0000009E 50                      	push ax
    92 0000009F B87602                  	mov ax, 630
    93 000000A2 50                      	push ax
    94 000000A3 B88200                  	mov ax, 130
    95 000000A6 50                      	push ax
    96 000000A7 E83804                  	call line
    97                                  
    98 000000AA C606[0000]0F            	mov byte[cor], branco_intenso
    99 000000AF B87602                  	mov ax, 630
   100 000000B2 50                      	push ax
   101 000000B3 B88200                  	mov ax, 130
   102 000000B6 50                      	push ax
   103 000000B7 B80A00                  	mov ax, 10
   104 000000BA 50                      	push ax
   105 000000BB B88200                  	mov ax, 130
   106 000000BE 50                      	push ax
   107 000000BF E82004                  	call line
   108                                  
   109 000000C2 C606[0000]0F            	mov byte[cor], branco_intenso
   110 000000C7 B80A00                  	mov ax, 10
   111 000000CA 50                      	push ax
   112 000000CB B88200                  	mov ax, 130
   113 000000CE 50                      	push ax
   114 000000CF B80A00                  	mov ax, 10
   115 000000D2 50                      	push ax
   116 000000D3 B84B00                  	mov ax, 75
   117 000000D6 50                      	push ax
   118 000000D7 E80804                  	call line
   119                                  
   120                                  
   121                                  	; jogo da velha
   122                                  	; horizontal
   123 000000DA C606[0000]0F            	mov byte[cor], branco_intenso
   124 000000DF B89B00                  	mov ax, 155
   125 000000E2 50                      	push ax
   126 000000E3 B8FA00                  	mov ax, 250
   127 000000E6 50                      	push ax
   128 000000E7 B8E501                  	mov ax, 485
   129 000000EA 50                      	push ax
   130 000000EB B8FA00                  	mov ax, 250
   131 000000EE 50                      	push ax
   132 000000EF E8F003                  	call line
   133                                  
   134 000000F2 C606[0000]0F            	mov byte[cor], branco_intenso
   135 000000F7 B89B00                  	mov ax, 155
   136 000000FA 50                      	push ax
   137 000000FB B86801                  	mov ax, 360
   138 000000FE 50                      	push ax
   139 000000FF B8E501                  	mov ax, 485
   140 00000102 50                      	push ax
   141 00000103 B86801                  	mov ax, 360
   142 00000106 50                      	push ax
   143 00000107 E8D803                  	call line
   144                                  
   145                                  	; vertical
   146 0000010A C606[0000]0F            	mov byte[cor], branco_intenso
   147 0000010F B80901                  	mov ax, 265
   148 00000112 50                      	push ax
   149 00000113 B88C00                  	mov ax, 140
   150 00000116 50                      	push ax
   151 00000117 B80901                  	mov ax, 265
   152 0000011A 50                      	push ax
   153 0000011B B8D601                  	mov ax, 470
   154 0000011E 50                      	push ax
   155 0000011F E8C003                  	call line
   156                                  
   157 00000122 C606[0000]0F            	mov byte[cor], branco_intenso
   158 00000127 B87701                  	mov ax, 375
   159 0000012A 50                      	push ax
   160 0000012B B88C00                  	mov ax, 140
   161 0000012E 50                      	push ax
   162 0000012F B87701                  	mov ax, 375
   163 00000132 50                      	push ax
   164 00000133 B8D601                  	mov ax, 470
   165 00000136 50                      	push ax
   166 00000137 E8A803                  	call line
   167                                  
   168                                  le_entrada:
   169 0000013A B401                    	mov 		ah, 1
   170 0000013C CD21                    	int 		21h
   171 0000013E 3C63                    	cmp 		al, 'c'
   172 00000140 7412                    	je 		novo_jogo
   173 00000142 3C73                    	cmp 		al, 's'
   174 00000144 740E                    	je 		sair
   175 00000146 3C58                    	cmp 		al, 'X'
   176 00000148 741E                    	je 		le_X
   177 0000014A 3C43                    	cmp 		al, 'C'
   178 0000014C 741A                    	je 		le_C
   179 0000014E E8D900                  	call 		imprime_no_campo_mensagens
   180 00000151 E9E6FF                  	jmp 		le_entrada
   181                                  
   182                                  novo_jogo:
   183                                  
   184                                  sair:
   185 00000154 B408                    	mov    		ah, 08h
   186 00000156 CD21                    	int     	21h
   187 00000158 B400                    	mov  		ah, 0   					; set video mode
   188 0000015A A0[0100]                	mov  		al, [modo_anterior]   				; modo anterior
   189 0000015D CD10                    	int  		10h
   190 0000015F B8004C                  	mov     	ax, 4c00h
   191 00000162 CD21                    	int     	21h
   192                                  
   193 00000164 B44C                    	mov 		ah, 4ch
   194 00000166 CD21                    	int 		21h
   195                                  
   196                                  le_X:
   197                                  	; mov 		ah, 1
   198                                  	; int 		21h
   199                                  
   200                                  le_C:
   201 00000168 B80100                  	mov 		ax, 1
   202 0000016B BB0100                  	mov 		bx, 1
   203 0000016E E80601                  	call 		desenha_x
   204                                  
   205 00000171 B80100                  	mov 		ax, 1
   206 00000174 BB0200                  	mov 		bx, 2
   207 00000177 E8FD00                  	call 		desenha_x
   208                                  
   209 0000017A B80100                  	mov 		ax, 1
   210 0000017D BB0300                  	mov 		bx, 3
   211 00000180 E8F400                  	call 		desenha_x
   212                                  
   213 00000183 B80200                  	mov 		ax, 2
   214 00000186 BB0100                  	mov 		bx, 1
   215 00000189 E8EB00                  	call 		desenha_x
   216                                  
   217 0000018C B80200                  	mov 		ax, 2
   218 0000018F BB0200                  	mov 		bx, 2
   219 00000192 E8E200                  	call 		desenha_x
   220                                  
   221 00000195 B80200                  	mov 		ax, 2
   222 00000198 BB0300                  	mov 		bx, 3
   223 0000019B E8D900                  	call 		desenha_x
   224                                  
   225 0000019E B80300                  	mov 		ax, 3
   226 000001A1 BB0100                  	mov 		bx, 1
   227 000001A4 E8D000                  	call 		desenha_x
   228                                  
   229 000001A7 B80300                  	mov 		ax, 3
   230 000001AA BB0200                  	mov 		bx, 2
   231 000001AD E8C700                  	call 		desenha_x
   232                                  
   233 000001B0 B80300                  	mov 		ax, 3
   234 000001B3 BB0300                  	mov 		bx, 3
   235 000001B6 E8BE00                  	call 		desenha_x
   236                                  
   237 000001B9 B90100                  	mov		cx, 1
   238 000001BC BB0000                  	mov		bx, 0
   239 000001BF B617                    	mov 		dh, 23
   240 000001C1 B21E                    	mov		dl, 30
   241 000001C3 C606[3700]43            	mov		byte [caractere_a_ser_impresso], 'C'
   242 000001C8 C606[3D00]00            	mov		byte [indice_caractere], 0
   243 000001CD E83F00                  	call 		imprime_no_campo_comando
   244                                  
   245 000001D0 B401                    	mov 		ah, 1
   246 000001D2 CD21                    	int 		21h
   247 000001D4 B90100                  	mov		cx, 1
   248 000001D7 BB0000                  	mov		bx, 0
   249 000001DA B617                    	mov 		dh, 23
   250 000001DC B21F                    	mov		dl, 31
   251 000001DE A2[3800]                	mov		byte [caractere_a_ser_impresso + 1], al
   252 000001E1 C606[3D00]01            	mov		byte [indice_caractere], 1
   253 000001E6 E82600                  	call 		imprime_no_campo_comando
   254                                  
   255 000001E9 B401                    	mov 		ah, 1
   256 000001EB CD21                    	int 		21h
   257 000001ED B90100                  	mov		cx, 1
   258 000001F0 BB0000                  	mov		bx, 0
   259 000001F3 B617                    	mov 		dh, 23
   260 000001F5 B220                    	mov		dl, 32
   261 000001F7 A2[3900]                	mov		byte [caractere_a_ser_impresso + 2], al
   262 000001FA C606[3D00]02            	mov		byte [indice_caractere], 2
   263 000001FF E80D00                  	call 		imprime_no_campo_comando
   264                                  
   265 00000202 E935FF                  	jmp 		le_entrada
   266                                  
   267                                  salva_contexto:
   268 00000205 50                      	push 		ax
   269 00000206 53                      	push		bx
   270 00000207 51                      	push 		cx
   271 00000208 52                      	push		dx
   272                                  
   273 00000209 C3                      	ret
   274                                  
   275                                  recupera_contexto:
   276                                  	; recuperar contexto
   277 0000020A 5A                      	pop 		dx
   278 0000020B 59                      	pop 		cx
   279 0000020C 5B                      	pop 		bx
   280 0000020D 58                      	pop 		ax
   281                                  
   282 0000020E C3                      	ret
   283                                  
   284                                  imprime_no_campo_comando:
   285 0000020F C606[0000]0F            	mov		byte[cor], branco_intenso
   286                                  l_1_1:
   287 00000214 E8D400                  	call		cursor
   288 00000217 8A1E[3D00]              	mov		bl, [indice_caractere]
   289 0000021B B700                    	mov		bh, 0
   290 0000021D 8A87[3700]              	mov     	al, [bx + caractere_a_ser_impresso]
   291 00000221 E8DE00                  	call		caracter
   292 00000224 43                      	inc     	bx						; proximo caracter
   293 00000225 FEC2                    	inc		dl						; avanca a coluna
   294 00000227 E2EB                    	loop    	l_1_1
   295                                  
   296 00000229 C3                      	ret
   297                                  
   298                                  imprime_no_campo_mensagens:
   299                                  	; salva contexto
   300 0000022A 50                      	push 		ax
   301 0000022B 53                      	push		bx
   302 0000022C 51                      	push 		cx
   303 0000022D 52                      	push		dx
   304                                  
   305 0000022E B91000                  	mov     	cx, 16						; numero de caracteres
   306 00000231 BB0000                  	mov     	bx, 0
   307 00000234 B61B                    	mov     	dh, 27						; linha 0-29
   308 00000236 B21E                    	mov     	dl, 30						; coluna 0-79
   309 00000238 C606[0000]04            	mov		byte[cor], vermelho
   310                                  l_1_2:
   311 0000023D E8AB00                  	call		cursor
   312 00000240 8A87[1800]              	mov     	al, [bx + mensagem_comando_invalido]
   313 00000244 E8BB00                  	call		caracter
   314 00000247 43                      	inc     	bx						; proximo caracter
   315 00000248 FEC2                    	inc		dl						; avanca a coluna
   316 0000024A E2F1                    	loop    	l_1_2
   317                                  
   318                                  	; recupera contexto
   319 0000024C 5A                      	pop dx
   320 0000024D 59                      	pop cx
   321 0000024E 5B                      	pop bx
   322 0000024F 58                      	pop ax
   323                                  
   324 00000250 C3                      	ret
   325                                  
   326                                  desenha_circulo:
   327 00000251 51                      	push 		cx
   328                                  
   329 00000252 B96E00                  	mov		cx, 110
   330                                  
   331 00000255 48                      	dec 		ax
   332 00000256 F7E1                    	mul 		cx
   333 00000258 05D200                  	add 		ax, 210
   334 0000025B 50                      	push		ax
   335                                  
   336 0000025C 89D8                    	mov 		ax, bx
   337 0000025E 48                      	dec 		ax
   338 0000025F F7E1                    	mul 		cx
   339 00000261 89C1                    	mov 		cx, ax
   340 00000263 B89F01                  	mov		ax, 415
   341 00000266 29C8                    	sub		ax, cx
   342 00000268 50                      	push		ax
   343                                  
   344 00000269 B82D00                  	mov		ax, 45
   345 0000026C 50                      	push		ax
   346                                  	
   347 0000026D C606[0000]01            	mov		byte[cor], azul
   348 00000272 E8D200                  	call		circle
   349                                  
   350 00000275 59                      	pop cx
   351                                  
   352 00000276 C3                      	ret
   353                                  
   354                                  desenha_x:
   355 00000277 51                      	push 		cx
   356 00000278 52                      	push 		dx
   357                                  
   358 00000279 B96E00                  	mov		cx, 110
   359                                  
   360 0000027C 48                      	dec 		ax
   361 0000027D F7E1                    	mul 		cx
   362 0000027F 05D200                  	add 		ax, 210
   363 00000282 2D1F00                  	sub		ax, 31
   364 00000285 A3[3F00]                	mov		word [x1], ax
   365 00000288 053E00                  	add		ax, 62
   366 0000028B A3[4300]                	mov		word [x2], ax
   367                                  
   368 0000028E 89D8                    	mov 		ax, bx
   369 00000290 48                      	dec 		ax
   370 00000291 F7E1                    	mul 		cx
   371 00000293 89C1                    	mov 		cx, ax
   372 00000295 B89F01                  	mov		ax, 415
   373 00000298 29C8                    	sub		ax, cx
   374 0000029A 2D1F00                  	sub		ax, 31
   375 0000029D A3[4100]                	mov		word [y1], ax
   376 000002A0 053E00                  	add		ax, 62
   377 000002A3 A3[4500]                	mov		word [y2], ax
   378                                  	
   379 000002A6 C606[0000]02            	mov		byte[cor], verde
   380 000002AB A1[3F00]                	mov		ax, [x1]
   381 000002AE 50                      	push		ax
   382 000002AF A1[4100]                	mov		ax, [y1]
   383 000002B2 50                      	push		ax
   384 000002B3 A1[4300]                	mov		ax, [x2]
   385 000002B6 50                      	push		ax
   386 000002B7 A1[4500]                	mov		ax, [y2]
   387 000002BA 50                      	push		ax
   388 000002BB E82402                  	call 		line
   389                                  
   390 000002BE A1[4100]                	mov 		ax, [y1]
   391 000002C1 053E00                  	add		ax, 62
   392 000002C4 A3[4100]                	mov		word [y1], ax
   393 000002C7 A1[4500]                	mov		ax, [y2]
   394 000002CA 2D3E00                  	sub		ax, 62
   395 000002CD A3[4500]                	mov		word [y2], ax
   396                                  
   397 000002D0 C606[0000]02            	mov		byte[cor], verde
   398 000002D5 A1[3F00]                	mov		ax, [x1]
   399 000002D8 50                      	push		ax
   400 000002D9 A1[4100]                	mov		ax, [y1]
   401 000002DC 50                      	push		ax
   402 000002DD A1[4300]                	mov		ax, [x2]
   403 000002E0 50                      	push		ax
   404 000002E1 A1[4500]                	mov		ax, [y2]
   405 000002E4 50                      	push		ax
   406 000002E5 E8FA01                  	call 		line
   407                                  
   408 000002E8 5A                      	pop		dx
   409 000002E9 59                      	pop 		cx
   410 000002EA C3                      	ret
   411                                  
   412                                  ; desenhar retas
   413                                  		; mov		byte[cor],branco_intenso	;antenas
   414                                  		; mov		ax,20
   415                                  		; push		ax
   416                                  		; mov		ax,400
   417                                  		; push		ax
   418                                  		; mov		ax,620
   419                                  		; push		ax
   420                                  		; mov		ax,400
   421                                  		; push		ax
   422                                  		; call		line
   423                                  		
   424                                  		; mov		byte[cor],marrom	;antenas
   425                                  		; mov		ax,130
   426                                  		; push		ax
   427                                  		; mov		ax,270
   428                                  		; push		ax
   429                                  		; mov		ax,100
   430                                  		; push		ax
   431                                  		; mov		ax,300
   432                                  		; push		ax
   433                                  		; call		line
   434                                  		
   435                                  		; mov		ax,130
   436                                  		; push		ax
   437                                  		; mov		ax,130
   438                                  		; push		ax
   439                                  		; mov		ax,100
   440                                  		; push		ax
   441                                  		; mov		ax,100
   442                                  		; push		ax
   443                                  		; call		line
   444                                  				
   445                                  ; desenha circulos 
   446                                  		; mov		byte[cor],azul	;cabe�a
   447                                  		; mov		ax,200
   448                                  		; push		ax
   449                                  		; mov		ax,200
   450                                  		; push		ax
   451                                  		; mov		ax,100
   452                                  		; push		ax
   453                                  		; call	circle
   454                                  
   455                                  		; mov		byte[cor],verde	;corpo
   456                                  		; mov		ax,450
   457                                  		; push		ax
   458                                  		; mov		ax,200
   459                                  		; push		ax
   460                                  		; mov		ax,190
   461                                  		; push		ax
   462                                  		; call	circle
   463                                  		
   464                                  		; mov		ax,100	;circulos das antenas
   465                                  		; push		ax
   466                                  		; mov		ax,100
   467                                  		; push		ax
   468                                  		; mov		ax,10
   469                                  		; push		ax
   470                                  		; call	circle
   471                                  		
   472                                  		; mov		ax,100
   473                                  		; push		ax
   474                                  		; mov		ax,300
   475                                  		; push		ax
   476                                  		; mov		ax,10
   477                                  		; push		ax
   478                                  		; call	circle
   479                                  		
   480                                  		; mov		byte[cor],vermelho	;circulos vermelhos
   481                                  		; mov		ax,500
   482                                  		; push		ax
   483                                  		; mov		ax,300
   484                                  		; push		ax
   485                                  		; mov		ax,50
   486                                  		; push		ax
   487                                  		; call	full_circle
   488                                  		
   489                                  		; mov		ax,500
   490                                  		; push		ax
   491                                  		; mov		ax,100
   492                                  		; push		ax
   493                                  		; mov		ax,50
   494                                  		; push		ax
   495                                  		; call	full_circle
   496                                  		
   497                                  		; mov		ax,350
   498                                  		; push		ax
   499                                  		; mov		ax,200
   500                                  		; push		ax
   501                                  		; mov		ax,50
   502                                  		; push		ax
   503                                  		; call	full_circle
   504                                  		
   505                                  
   506                                  ; escrever uma mensagem
   507                                  ;     	mov     	cx,14			;n�mero de caracteres
   508                                  ;     	mov     	bx,0
   509                                  ;     	mov     	dh,0			;linha 0-29
   510                                  ;     	mov     	dl,30			;coluna 0-79
   511                                  ; 		mov		byte[cor],azul
   512                                  ; l4:
   513                                  ; 		call	cursor
   514                                  ;     	mov     al,[bx+mens]
   515                                  ; 		call	caracter
   516                                  ;     	inc     bx			;proximo caracter
   517                                  ; 		inc		dl			;avanca a coluna
   518                                  ; 		inc		byte [cor]		;mudar a cor para a seguinte
   519                                  ;     	loop    l4
   520                                  
   521                                  ; 		mov    	ah,08h
   522                                  ; 		int     21h
   523                                  ; 	    mov  	ah,0   			; set video mode
   524                                  ; 	    mov  	al,[modo_anterior]   	; modo anterior
   525                                  ; 	    int  	10h
   526                                  ; 		mov     ax,4c00h
   527                                  ; 		int     21h
   528                                  
   529                                  ;***************************************************************************
   530                                  ;
   531                                  ;   funcao cursor
   532                                  ;
   533                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   534                                  cursor:
   535 000002EB 9C                      		pushf
   536 000002EC 50                      		push 		ax
   537 000002ED 53                      		push 		bx
   538 000002EE 51                      		push		cx
   539 000002EF 52                      		push		dx
   540 000002F0 56                      		push		si
   541 000002F1 57                      		push		di
   542 000002F2 55                      		push		bp
   543 000002F3 B402                    		mov     	ah,2
   544 000002F5 B700                    		mov     	bh,0
   545 000002F7 CD10                    		int     	10h
   546 000002F9 5D                      		pop		bp
   547 000002FA 5F                      		pop		di
   548 000002FB 5E                      		pop		si
   549 000002FC 5A                      		pop		dx
   550 000002FD 59                      		pop		cx
   551 000002FE 5B                      		pop		bx
   552 000002FF 58                      		pop		ax
   553 00000300 9D                      		popf
   554 00000301 C3                      		ret
   555                                  ;_____________________________________________________________________________
   556                                  ;
   557                                  ;   funcao caracter escrito na posicao do cursor
   558                                  ;
   559                                  ; al= caracter a ser escrito
   560                                  ; cor definida na variavel cor
   561                                  caracter:
   562 00000302 9C                      		pushf
   563 00000303 50                      		push 		ax
   564 00000304 53                      		push 		bx
   565 00000305 51                      		push		cx
   566 00000306 52                      		push		dx
   567 00000307 56                      		push		si
   568 00000308 57                      		push		di
   569 00000309 55                      		push		bp
   570 0000030A B409                    		mov     	ah, 9
   571 0000030C B700                    		mov     	bh, 0
   572 0000030E B90100                  		mov     	cx, 1
   573 00000311 8A1E[0000]                 		mov     	bl, [cor]
   574 00000315 CD10                    		int     	10h
   575 00000317 5D                      		pop			bp
   576 00000318 5F                      		pop			di
   577 00000319 5E                      		pop			si
   578 0000031A 5A                      		pop			dx
   579 0000031B 59                      		pop			cx
   580 0000031C 5B                      		pop			bx
   581 0000031D 58                      		pop			ax
   582 0000031E 9D                      		popf
   583 0000031F C3                      		ret
   584                                  ;_____________________________________________________________________________
   585                                  ;
   586                                  ;   funcao plot_xy
   587                                  ;
   588                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   589                                  ; cor definida na variavel cor
   590                                  plot_xy:
   591 00000320 55                      		push		bp
   592 00000321 89E5                    		mov			bp,sp
   593 00000323 9C                      		pushf
   594 00000324 50                      		push 		ax
   595 00000325 53                      		push 		bx
   596 00000326 51                      		push		cx
   597 00000327 52                      		push		dx
   598 00000328 56                      		push		si
   599 00000329 57                      		push		di
   600 0000032A B40C                    	    mov     	ah, 0ch
   601 0000032C A0[0000]                	    mov     	al, [cor]
   602 0000032F B700                    	    mov     	bh, 0
   603 00000331 BADF01                  	    mov     	dx, 479
   604 00000334 2B5604                  		sub			dx, [bp+4]
   605 00000337 8B4E06                  	    mov     	cx, [bp+6]
   606 0000033A CD10                    	    int     	10h
   607 0000033C 5F                      		pop			di
   608 0000033D 5E                      		pop			si
   609 0000033E 5A                      		pop			dx
   610 0000033F 59                      		pop			cx
   611 00000340 5B                      		pop			bx
   612 00000341 58                      		pop			ax
   613 00000342 9D                      		popf
   614 00000343 5D                      		pop			bp
   615 00000344 C20400                  		ret			4
   616                                  
   617                                  ;_____________________________________________________________________________
   618                                  ;    funcao circle
   619                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   620                                  ; cor definida na variavel cor
   621                                  circle:
   622 00000347 55                      	push 	bp
   623 00000348 89E5                    	mov	 	bp,sp
   624 0000034A 9C                      	pushf                        ;coloca os flags na pilha
   625 0000034B 50                      	push 	ax
   626 0000034C 53                      	push 	bx
   627 0000034D 51                      	push	cx
   628 0000034E 52                      	push	dx
   629 0000034F 56                      	push	si
   630 00000350 57                      	push	di
   631                                  	
   632 00000351 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   633 00000354 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   634 00000357 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   635                                  	
   636 0000035A 89DA                    	mov 	dx,bx	
   637 0000035C 01CA                    	add		dx,cx       ;ponto extremo superior
   638 0000035E 50                      	push    ax			
   639 0000035F 52                      	push	dx
   640 00000360 E8BDFF                  	call plot_xy
   641                                  	
   642 00000363 89DA                    	mov		dx,bx
   643 00000365 29CA                    	sub		dx,cx       ;ponto extremo inferior
   644 00000367 50                      	push    ax			
   645 00000368 52                      	push	dx
   646 00000369 E8B4FF                  	call plot_xy
   647                                  	
   648 0000036C 89C2                    	mov 	dx,ax	
   649 0000036E 01CA                    	add		dx,cx       ;ponto extremo direita
   650 00000370 52                      	push    dx			
   651 00000371 53                      	push	bx
   652 00000372 E8ABFF                  	call plot_xy
   653                                  	
   654 00000375 89C2                    	mov		dx,ax
   655 00000377 29CA                    	sub		dx,cx       ;ponto extremo esquerda
   656 00000379 52                      	push    dx			
   657 0000037A 53                      	push	bx
   658 0000037B E8A2FF                  	call plot_xy
   659                                  		
   660 0000037E 89CF                    	mov		di,cx
   661 00000380 81EF0100                	sub		di,1	 ;di=r-1
   662 00000384 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   663                                  	
   664                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   665                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   666                                  ;valores positivos para d
   667                                  
   668                                  stay:				;loop
   669 00000387 89FE                    	mov		si,di
   670 00000389 81FE0000                	cmp		si,0
   671 0000038D 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   672 0000038F 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   673 00000391 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   674 00000393 81C60300                	add		si,3
   675 00000397 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   676 00000399 42                      	inc		dx		;incrementa dx
   677 0000039A E90E00                  	jmp		plotar
   678                                  inf:	
   679 0000039D 89D6                    	mov		si,dx
   680 0000039F 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   681 000003A1 D1E6                    	sal		si,1
   682 000003A3 81C60500                	add		si,5
   683 000003A7 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   684 000003A9 42                      	inc		dx		;incrementa x (dx)
   685 000003AA 49                      	dec		cx		;decrementa y (cx)
   686                                  	
   687                                  plotar:	
   688 000003AB 89D6                    	mov		si,dx
   689 000003AD 01C6                    	add		si,ax
   690 000003AF 56                      	push    si			;coloca a abcisa x+xc na pilha
   691 000003B0 89CE                    	mov		si,cx
   692 000003B2 01DE                    	add		si,bx
   693 000003B4 56                      	push    si			;coloca a ordenada y+yc na pilha
   694 000003B5 E868FF                  	call plot_xy		;toma conta do segundo octante
   695 000003B8 89C6                    	mov		si,ax
   696 000003BA 01D6                    	add		si,dx
   697 000003BC 56                      	push    si			;coloca a abcisa xc+x na pilha
   698 000003BD 89DE                    	mov		si,bx
   699 000003BF 29CE                    	sub		si,cx
   700 000003C1 56                      	push    si			;coloca a ordenada yc-y na pilha
   701 000003C2 E85BFF                  	call plot_xy		;toma conta do s�timo octante
   702 000003C5 89C6                    	mov		si,ax
   703 000003C7 01CE                    	add		si,cx
   704 000003C9 56                      	push    si			;coloca a abcisa xc+y na pilha
   705 000003CA 89DE                    	mov		si,bx
   706 000003CC 01D6                    	add		si,dx
   707 000003CE 56                      	push    si			;coloca a ordenada yc+x na pilha
   708 000003CF E84EFF                  	call plot_xy		;toma conta do segundo octante
   709 000003D2 89C6                    	mov		si,ax
   710 000003D4 01CE                    	add		si,cx
   711 000003D6 56                      	push    si			;coloca a abcisa xc+y na pilha
   712 000003D7 89DE                    	mov		si,bx
   713 000003D9 29D6                    	sub		si,dx
   714 000003DB 56                      	push    si			;coloca a ordenada yc-x na pilha
   715 000003DC E841FF                  	call plot_xy		;toma conta do oitavo octante
   716 000003DF 89C6                    	mov		si,ax
   717 000003E1 29D6                    	sub		si,dx
   718 000003E3 56                      	push    si			;coloca a abcisa xc-x na pilha
   719 000003E4 89DE                    	mov		si,bx
   720 000003E6 01CE                    	add		si,cx
   721 000003E8 56                      	push    si			;coloca a ordenada yc+y na pilha
   722 000003E9 E834FF                  	call plot_xy		;toma conta do terceiro octante
   723 000003EC 89C6                    	mov		si,ax
   724 000003EE 29D6                    	sub		si,dx
   725 000003F0 56                      	push    si			;coloca a abcisa xc-x na pilha
   726 000003F1 89DE                    	mov		si,bx
   727 000003F3 29CE                    	sub		si,cx
   728 000003F5 56                      	push    si			;coloca a ordenada yc-y na pilha
   729 000003F6 E827FF                  	call plot_xy		;toma conta do sexto octante
   730 000003F9 89C6                    	mov		si,ax
   731 000003FB 29CE                    	sub		si,cx
   732 000003FD 56                      	push    si			;coloca a abcisa xc-y na pilha
   733 000003FE 89DE                    	mov		si,bx
   734 00000400 29D6                    	sub		si,dx
   735 00000402 56                      	push    si			;coloca a ordenada yc-x na pilha
   736 00000403 E81AFF                  	call plot_xy		;toma conta do quinto octante
   737 00000406 89C6                    	mov		si,ax
   738 00000408 29CE                    	sub		si,cx
   739 0000040A 56                      	push    si			;coloca a abcisa xc-y na pilha
   740 0000040B 89DE                    	mov		si,bx
   741 0000040D 01D6                    	add		si,dx
   742 0000040F 56                      	push    si			;coloca a ordenada yc-x na pilha
   743 00000410 E80DFF                  	call plot_xy		;toma conta do quarto octante
   744                                  	
   745 00000413 39D1                    	cmp		cx,dx
   746 00000415 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   747 00000417 E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   748                                  	
   749                                  	
   750                                  fim_circle:
   751 0000041A 5F                      	pop		di
   752 0000041B 5E                      	pop		si
   753 0000041C 5A                      	pop		dx
   754 0000041D 59                      	pop		cx
   755 0000041E 5B                      	pop		bx
   756 0000041F 58                      	pop		ax
   757 00000420 9D                      	popf
   758 00000421 5D                      	pop		bp
   759 00000422 C20600                  	ret		6
   760                                  ;-----------------------------------------------------------------------------
   761                                  ;    fun��o full_circle
   762                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   763                                  ; cor definida na variavel cor					  
   764                                  full_circle:
   765 00000425 55                      	push 	bp
   766 00000426 89E5                    	mov	 	bp,sp
   767 00000428 9C                      	pushf                        ;coloca os flags na pilha
   768 00000429 50                      	push 	ax
   769 0000042A 53                      	push 	bx
   770 0000042B 51                      	push	cx
   771 0000042C 52                      	push	dx
   772 0000042D 56                      	push	si
   773 0000042E 57                      	push	di
   774                                  
   775 0000042F 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   776 00000432 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   777 00000435 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   778                                  	
   779 00000438 89DE                    	mov		si,bx
   780 0000043A 29CE                    	sub		si,cx
   781 0000043C 50                      	push    ax			;coloca xc na pilha			
   782 0000043D 56                      	push	si			;coloca yc-r na pilha
   783 0000043E 89DE                    	mov		si,bx
   784 00000440 01CE                    	add		si,cx
   785 00000442 50                      	push	ax		;coloca xc na pilha
   786 00000443 56                      	push	si		;coloca yc+r na pilha
   787 00000444 E89B00                  	call line
   788                                  	
   789                                  		
   790 00000447 89CF                    	mov		di,cx
   791 00000449 81EF0100                	sub		di,1	 ;di=r-1
   792 0000044D BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   793                                  	
   794                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   795                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   796                                  ;valores positivos para d
   797                                  
   798                                  stay_full:				;loop
   799 00000450 89FE                    	mov		si,di
   800 00000452 81FE0000                	cmp		si,0
   801 00000456 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   802 00000458 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   803 0000045A D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   804 0000045C 81C60300                	add		si,3
   805 00000460 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   806 00000462 42                      	inc		dx		;incrementa dx
   807 00000463 E90E00                  	jmp		plotar_full
   808                                  inf_full:	
   809 00000466 89D6                    	mov		si,dx
   810 00000468 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   811 0000046A D1E6                    	sal		si,1
   812 0000046C 81C60500                	add		si,5
   813 00000470 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   814 00000472 42                      	inc		dx		;incrementa x (dx)
   815 00000473 49                      	dec		cx		;decrementa y (cx)
   816                                  	
   817                                  plotar_full:	
   818 00000474 89C6                    	mov		si,ax
   819 00000476 01CE                    	add		si,cx
   820 00000478 56                      	push	si		;coloca a abcisa y+xc na pilha			
   821 00000479 89DE                    	mov		si,bx
   822 0000047B 29D6                    	sub		si,dx
   823 0000047D 56                      	push    si		;coloca a ordenada yc-x na pilha
   824 0000047E 89C6                    	mov		si,ax
   825 00000480 01CE                    	add		si,cx
   826 00000482 56                      	push	si		;coloca a abcisa y+xc na pilha	
   827 00000483 89DE                    	mov		si,bx
   828 00000485 01D6                    	add		si,dx
   829 00000487 56                      	push    si		;coloca a ordenada yc+x na pilha	
   830 00000488 E85700                  	call 	line
   831                                  	
   832 0000048B 89C6                    	mov		si,ax
   833 0000048D 01D6                    	add		si,dx
   834 0000048F 56                      	push	si		;coloca a abcisa xc+x na pilha			
   835 00000490 89DE                    	mov		si,bx
   836 00000492 29CE                    	sub		si,cx
   837 00000494 56                      	push    si		;coloca a ordenada yc-y na pilha
   838 00000495 89C6                    	mov		si,ax
   839 00000497 01D6                    	add		si,dx
   840 00000499 56                      	push	si		;coloca a abcisa xc+x na pilha	
   841 0000049A 89DE                    	mov		si,bx
   842 0000049C 01CE                    	add		si,cx
   843 0000049E 56                      	push    si		;coloca a ordenada yc+y na pilha	
   844 0000049F E84000                  	call	line
   845                                  	
   846 000004A2 89C6                    	mov		si,ax
   847 000004A4 29D6                    	sub		si,dx
   848 000004A6 56                      	push	si		;coloca a abcisa xc-x na pilha			
   849 000004A7 89DE                    	mov		si,bx
   850 000004A9 29CE                    	sub		si,cx
   851 000004AB 56                      	push    si		;coloca a ordenada yc-y na pilha
   852 000004AC 89C6                    	mov		si,ax
   853 000004AE 29D6                    	sub		si,dx
   854 000004B0 56                      	push	si		;coloca a abcisa xc-x na pilha	
   855 000004B1 89DE                    	mov		si,bx
   856 000004B3 01CE                    	add		si,cx
   857 000004B5 56                      	push    si		;coloca a ordenada yc+y na pilha	
   858 000004B6 E82900                  	call	line
   859                                  	
   860 000004B9 89C6                    	mov		si,ax
   861 000004BB 29CE                    	sub		si,cx
   862 000004BD 56                      	push	si		;coloca a abcisa xc-y na pilha			
   863 000004BE 89DE                    	mov		si,bx
   864 000004C0 29D6                    	sub		si,dx
   865 000004C2 56                      	push    si		;coloca a ordenada yc-x na pilha
   866 000004C3 89C6                    	mov		si,ax
   867 000004C5 29CE                    	sub		si,cx
   868 000004C7 56                      	push	si		;coloca a abcisa xc-y na pilha	
   869 000004C8 89DE                    	mov		si,bx
   870 000004CA 01D6                    	add		si,dx
   871 000004CC 56                      	push    si		;coloca a ordenada yc+x na pilha	
   872 000004CD E81200                  	call	line
   873                                  	
   874 000004D0 39D1                    	cmp		cx,dx
   875 000004D2 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   876 000004D4 E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   877                                  	
   878                                  	
   879                                  fim_full_circle:
   880 000004D7 5F                      	pop		di
   881 000004D8 5E                      	pop		si
   882 000004D9 5A                      	pop		dx
   883 000004DA 59                      	pop		cx
   884 000004DB 5B                      	pop		bx
   885 000004DC 58                      	pop		ax
   886 000004DD 9D                      	popf
   887 000004DE 5D                      	pop		bp
   888 000004DF C20600                  	ret		6
   889                                  ;-----------------------------------------------------------------------------
   890                                  ;
   891                                  ;   funcao line
   892                                  ;
   893                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   894                                  line:
   895 000004E2 55                      		push		bp
   896 000004E3 89E5                    		mov		bp,sp
   897 000004E5 9C                      		pushf                        ;coloca os flags na pilha
   898 000004E6 50                      		push 		ax
   899 000004E7 53                      		push 		bx
   900 000004E8 51                      		push		cx
   901 000004E9 52                      		push		dx
   902 000004EA 56                      		push		si
   903 000004EB 57                      		push		di
   904 000004EC 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   905 000004EF 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   906 000004F2 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   907 000004F5 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   908 000004F8 39C8                    		cmp		ax,cx
   909 000004FA 7408                    		je		line2
   910 000004FC 721C                    		jb		line1
   911 000004FE 91                      		xchg		ax,cx
   912 000004FF 87DA                    		xchg		bx,dx
   913 00000501 E91600                  		jmp		line1
   914                                  line2:		; deltax=0
   915 00000504 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   916 00000506 7202                    		jb		line3
   917 00000508 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   918                                  line3:	; dx > bx
   919 0000050A 50                      		push		ax
   920 0000050B 53                      		push		bx
   921 0000050C E811FE                  		call 		plot_xy
   922 0000050F 39D3                    		cmp		bx,dx
   923 00000511 7503                    		jne		line31
   924 00000513 E9C600                  		jmp		fim_line
   925 00000516 43                      line31:		inc		bx
   926 00000517 E9F0FF                  		jmp		line3
   927                                  ;deltax <>0
   928                                  line1:
   929                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   930                                  	; cx > ax
   931 0000051A 51                      		push		cx
   932 0000051B 29C1                    		sub		cx,ax
   933 0000051D 890E[0600]              		mov		[deltax],cx
   934 00000521 59                      		pop		cx
   935 00000522 52                      		push		dx
   936 00000523 29DA                    		sub		dx,bx
   937 00000525 7702                    		ja		line32
   938 00000527 F7DA                    		neg		dx
   939                                  line32:		
   940 00000529 8916[0800]              		mov		[deltay],dx
   941 0000052D 5A                      		pop		dx
   942                                  
   943 0000052E 50                      		push		ax
   944 0000052F A1[0600]                		mov		ax,[deltax]
   945 00000532 3B06[0800]              		cmp		ax,[deltay]
   946 00000536 58                      		pop		ax
   947 00000537 724D                    		jb		line5
   948                                  
   949                                  	; cx > ax e deltax>deltay
   950 00000539 51                      		push		cx
   951 0000053A 29C1                    		sub		cx,ax
   952 0000053C 890E[0600]              		mov		[deltax],cx
   953 00000540 59                      		pop		cx
   954 00000541 52                      		push		dx
   955 00000542 29DA                    		sub		dx,bx
   956 00000544 8916[0800]              		mov		[deltay],dx
   957 00000548 5A                      		pop		dx
   958                                  
   959 00000549 89C6                    		mov		si,ax
   960                                  line4:
   961 0000054B 50                      		push		ax
   962 0000054C 52                      		push		dx
   963 0000054D 56                      		push		si
   964 0000054E 29C6                    		sub		si,ax	;(x-x1)
   965 00000550 A1[0800]                		mov		ax,[deltay]
   966 00000553 F7EE                    		imul		si
   967 00000555 8B36[0600]              		mov		si,[deltax]		;arredondar
   968 00000559 D1EE                    		shr		si,1
   969                                  ; se numerador (DX)>0 soma se <0 subtrai
   970 0000055B 81FA0000                		cmp		dx,0
   971 0000055F 7C09                    		jl		ar1
   972 00000561 01F0                    		add		ax,si
   973 00000563 81D20000                		adc		dx,0
   974 00000567 E90600                  		jmp		arc1
   975 0000056A 29F0                    ar1:		sub		ax,si
   976 0000056C 81DA0000                		sbb		dx,0
   977                                  arc1:
   978 00000570 F73E[0600]              		idiv		word [deltax]
   979 00000574 01D8                    		add		ax,bx
   980 00000576 5E                      		pop		si
   981 00000577 56                      		push		si
   982 00000578 50                      		push		ax
   983 00000579 E8A4FD                  		call		plot_xy
   984 0000057C 5A                      		pop		dx
   985 0000057D 58                      		pop		ax
   986 0000057E 39CE                    		cmp		si,cx
   987 00000580 745A                    		je		fim_line
   988 00000582 46                      		inc		si
   989 00000583 E9C5FF                  		jmp		line4
   990                                  
   991 00000586 39D3                    line5:		cmp		bx,dx
   992 00000588 7203                    		jb 		line7
   993 0000058A 91                      		xchg		ax,cx
   994 0000058B 87DA                    		xchg		bx,dx
   995                                  line7:
   996 0000058D 51                      		push		cx
   997 0000058E 29C1                    		sub		cx,ax
   998 00000590 890E[0600]              		mov		[deltax],cx
   999 00000594 59                      		pop		cx
  1000 00000595 52                      		push		dx
  1001 00000596 29DA                    		sub		dx,bx
  1002 00000598 8916[0800]              		mov		[deltay],dx
  1003 0000059C 5A                      		pop		dx
  1004                                  
  1005                                  
  1006                                  
  1007 0000059D 89DE                    		mov		si,bx
  1008                                  line6:
  1009 0000059F 52                      		push		dx
  1010 000005A0 56                      		push		si
  1011 000005A1 50                      		push		ax
  1012 000005A2 29DE                    		sub		si,bx	;(y-y1)
  1013 000005A4 A1[0600]                		mov		ax,[deltax]
  1014 000005A7 F7EE                    		imul		si
  1015 000005A9 8B36[0800]              		mov		si,[deltay]		;arredondar
  1016 000005AD D1EE                    		shr		si,1
  1017                                  ; se numerador (DX)>0 soma se <0 subtrai
  1018 000005AF 81FA0000                		cmp		dx,0
  1019 000005B3 7C09                    		jl		ar2
  1020 000005B5 01F0                    		add		ax,si
  1021 000005B7 81D20000                		adc		dx,0
  1022 000005BB E90600                  		jmp		arc2
  1023 000005BE 29F0                    ar2:		sub		ax,si
  1024 000005C0 81DA0000                		sbb		dx,0
  1025                                  arc2:
  1026 000005C4 F73E[0800]              		idiv		word [deltay]
  1027 000005C8 89C7                    		mov		di,ax
  1028 000005CA 58                      		pop		ax
  1029 000005CB 01C7                    		add		di,ax
  1030 000005CD 5E                      		pop		si
  1031 000005CE 57                      		push		di
  1032 000005CF 56                      		push		si
  1033 000005D0 E84DFD                  		call		plot_xy
  1034 000005D3 5A                      		pop		dx
  1035 000005D4 39D6                    		cmp		si,dx
  1036 000005D6 7404                    		je		fim_line
  1037 000005D8 46                      		inc		si
  1038 000005D9 E9C3FF                  		jmp		line6
  1039                                  
  1040                                  fim_line:
  1041 000005DC 5F                      		pop		di
  1042 000005DD 5E                      		pop		si
  1043 000005DE 5A                      		pop		dx
  1044 000005DF 59                      		pop		cx
  1045 000005E0 5B                      		pop		bx
  1046 000005E1 58                      		pop		ax
  1047 000005E2 9D                      		popf
  1048 000005E3 5D                      		pop		bp
  1049 000005E4 C20800                  		ret		8
  1050                                  ;*******************************************************************
  1051                                  segment data
  1052                                  
  1053 00000000 0F                      cor		db		branco_intenso
  1054                                  
  1055                                  ;	I R G B COR
  1056                                  ;	0 0 0 0 preto
  1057                                  ;	0 0 0 1 azul
  1058                                  ;	0 0 1 0 verde
  1059                                  ;	0 0 1 1 cyan
  1060                                  ;	0 1 0 0 vermelho
  1061                                  ;	0 1 0 1 magenta
  1062                                  ;	0 1 1 0 marrom
  1063                                  ;	0 1 1 1 branco
  1064                                  ;	1 0 0 0 cinza
  1065                                  ;	1 0 0 1 azul claro
  1066                                  ;	1 0 1 0 verde claro
  1067                                  ;	1 0 1 1 cyan claro
  1068                                  ;	1 1 0 0 rosa
  1069                                  ;	1 1 0 1 magenta claro
  1070                                  ;	1 1 1 0 amarelo
  1071                                  ;	1 1 1 1 branco intenso
  1072                                  
  1073                                  preto				equ			0
  1074                                  azul				equ			1
  1075                                  verde				equ			2
  1076                                  cyan				equ			3
  1077                                  vermelho			equ			4
  1078                                  magenta				equ			5
  1079                                  marrom				equ			6
  1080                                  branco				equ			7
  1081                                  cinza				equ			8
  1082                                  azul_claro			equ			9
  1083                                  verde_claro			equ			10
  1084                                  cyan_claro			equ			11
  1085                                  rosa				equ			12
  1086                                  magenta_claro			equ			13
  1087                                  amarelo				equ			14
  1088                                  branco_intenso			equ			15
  1089                                  
  1090 00000001 00                      modo_anterior			db			0
  1091 00000002 0000                    linha   			dw  			0
  1092 00000004 0000                    coluna  			dw  			0
  1093 00000006 0000                    deltax				dw			0
  1094 00000008 0000                    deltay				dw			0	
  1095 0000000A 46756E63616F204772-     mens    			db  			'Funcao Grafica'
  1096 00000013 6166696361         
  1097 00000018 436F6D616E646F2049-     mensagem_comando_invalido	db			'Comando Invalido'
  1098 00000021 6E76616C69646F     
  1099 00000028 4A6F6761646120496E-     mensagem_jogada_invalida	db			'Jogada Invalida'
  1100 00000031 76616C696461       
  1101                                  
  1102 00000037 000000000000            caractere_a_ser_impresso	dw			0, 0, 0
  1103 0000003D 0000                    indice_caractere		dw			0
  1104                                  
  1105 0000003F 0000                    x1				dw			0
  1106 00000041 0000                    y1				dw			0
  1107 00000043 0000                    x2				dw			0
  1108 00000045 0000                    y2				dw			0
  1109                                  
  1110                                  ;*************************************************************************
  1111                                  segment stack stack
  1112 00000000 <res 00000200>          	resb 	512
  1113                                  stacktop:
