     1                                  ; Hiuri Liberato
     2                                  ; Mateus Ticianeli Sartorio
     3                                  ; Sistemas Embarcados I - 2023/2 - Engenharia de Computacao
     4                                  
     5                                  ; versao de 10/05/2007
     6                                  ; corrigido erro de arredondamento na rotina line.
     7                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     8                                  
     9                                  segment code
    10                                  ..start:
    11 00000000 B8[0000]                	mov 	ax, data
    12 00000003 8ED8                    	mov 	ds, ax
    13 00000005 B8[0000]                	mov 	ax, stack
    14 00000008 8ED0                    	mov 	ss, ax
    15 0000000A BC[0002]                	mov 	sp, stacktop
    16                                  
    17                                  ; salva modo atual de video (vendo como esta o modo de video da maquina)
    18 0000000D B40F                    	mov  	ah, 0Fh
    19 0000000F CD10                    	int  	10h
    20 00000011 A2[0100]                	mov  	[modo_anterior], al   
    21                                  
    22                                  ; altera modo de video para grafico 640x480 16 cores
    23 00000014 B012                    	mov     al, 12h
    24 00000016 B400                    	mov     ah, 0
    25 00000018 CD10                    	int     10h
    26                                  
    27                                  ; A partir daqui codigo desenvolvido pela gente
    28                                  desenha_ui:
    29                                  	; primeiro retangulo
    30 0000001A C606[0000]0F            	mov 	byte[cor], branco_intenso
    31 0000001F B80A00                  	mov 	ax, 10
    32 00000022 50                      	push 	ax
    33 00000023 B80A00                  	mov 	ax, 10
    34 00000026 50                      	push 	ax
    35 00000027 B87602                  	mov 	ax, 630
    36 0000002A 50                      	push 	ax
    37 0000002B B80A00                  	mov 	ax, 10
    38 0000002E 50                      	push 	ax
    39 0000002F E84F07                  	call 	line
    40                                  
    41 00000032 C606[0000]0F            	mov 	byte[cor], branco_intenso
    42 00000037 B87602                  	mov 	ax, 630
    43 0000003A 50                      	push 	ax
    44 0000003B B80A00                  	mov 	ax, 10
    45 0000003E 50                      	push 	ax
    46 0000003F B87602                  	mov 	ax, 630
    47 00000042 50                      	push 	ax
    48 00000043 B84100                  	mov 	ax, 65
    49 00000046 50                      	push 	ax
    50 00000047 E83707                  	call 	line
    51                                  
    52 0000004A C606[0000]0F            	mov byte[cor], branco_intenso
    53 0000004F B80A00                  	mov 	ax, 10
    54 00000052 50                      	push 	ax
    55 00000053 B84100                  	mov 	ax, 65
    56 00000056 50                      	push 	ax
    57 00000057 B87602                  	mov 	ax, 630
    58 0000005A 50                      	push 	ax
    59 0000005B B84100                  	mov 	ax, 65
    60 0000005E 50                      	push 	ax
    61 0000005F E81F07                  	call 	line
    62                                  
    63 00000062 C606[0000]0F            	mov 	byte[cor], branco_intenso
    64 00000067 B80A00                  	mov 	ax, 10
    65 0000006A 50                      	push 	ax
    66 0000006B B80A00                  	mov 	ax, 10
    67 0000006E 50                      	push 	ax
    68 0000006F B80A00                  	mov 	ax, 10
    69 00000072 50                      	push 	ax
    70 00000073 B84100                  	mov 	ax, 65
    71 00000076 50                      	push 	ax
    72 00000077 E80707                  	call 	line
    73                                  
    74                                  
    75                                  	; segundo retangulo
    76 0000007A C606[0000]0F            	mov 	byte[cor], branco_intenso
    77 0000007F B80A00                  	mov 	ax, 10
    78 00000082 50                      	push 	ax
    79 00000083 B84B00                  	mov 	ax, 75
    80 00000086 50                      	push 	ax
    81 00000087 B87602                  	mov 	ax, 630
    82 0000008A 50                      	push 	ax
    83 0000008B B84B00                  	mov 	ax, 75
    84 0000008E 50                      	push 	ax
    85 0000008F E8EF06                  	call 	line
    86                                  
    87 00000092 C606[0000]0F            	mov 	byte[cor], branco_intenso
    88 00000097 B87602                  	mov 	ax, 630
    89 0000009A 50                      	push 	ax
    90 0000009B B84B00                  	mov 	ax, 75
    91 0000009E 50                      	push 	ax
    92 0000009F B87602                  	mov 	ax, 630
    93 000000A2 50                      	push 	ax
    94 000000A3 B88200                  	mov 	ax, 130
    95 000000A6 50                      	push 	ax
    96 000000A7 E8D706                  	call 	line
    97                                  
    98 000000AA C606[0000]0F            	mov 	byte[cor], branco_intenso
    99 000000AF B87602                  	mov 	ax, 630
   100 000000B2 50                      	push 	ax
   101 000000B3 B88200                  	mov 	ax, 130
   102 000000B6 50                      	push 	ax
   103 000000B7 B80A00                  	mov 	ax, 10
   104 000000BA 50                      	push 	ax
   105 000000BB B88200                  	mov 	ax, 130
   106 000000BE 50                      	push 	ax
   107 000000BF E8BF06                  	call 	line
   108                                  
   109 000000C2 C606[0000]0F            	mov 	byte[cor], branco_intenso
   110 000000C7 B80A00                  	mov 	ax, 10
   111 000000CA 50                      	push 	ax
   112 000000CB B88200                  	mov 	ax, 130
   113 000000CE 50                      	push 	ax
   114 000000CF B80A00                  	mov 	ax, 10
   115 000000D2 50                      	push 	ax
   116 000000D3 B84B00                  	mov 	ax, 75
   117 000000D6 50                      	push 	ax
   118 000000D7 E8A706                  	call 	line
   119                                  
   120                                  
   121                                  	; jogo da velha
   122                                  	; horizontal
   123 000000DA C606[0000]0F            	mov 	byte[cor], branco_intenso
   124 000000DF B89B00                  	mov 	ax, 155
   125 000000E2 50                      	push 	ax
   126 000000E3 B8FA00                  	mov 	ax, 250
   127 000000E6 50                      	push 	ax
   128 000000E7 B8E501                  	mov 	ax, 485
   129 000000EA 50                      	push 	ax
   130 000000EB B8FA00                  	mov 	ax, 250
   131 000000EE 50                      	push 	ax
   132 000000EF E88F06                  	call 	line
   133                                  
   134 000000F2 C606[0000]0F            	mov 	byte[cor], branco_intenso
   135 000000F7 B89B00                  	mov 	ax, 155
   136 000000FA 50                      	push 	ax
   137 000000FB B86801                  	mov 	ax, 360
   138 000000FE 50                      	push 	ax
   139 000000FF B8E501                  	mov 	ax, 485
   140 00000102 50                      	push 	ax
   141 00000103 B86801                  	mov 	ax, 360
   142 00000106 50                      	push 	ax
   143 00000107 E87706                  	call 	line
   144                                  
   145                                  	; vertical
   146 0000010A C606[0000]0F            	mov 	byte[cor], branco_intenso
   147 0000010F B80901                  	mov 	ax, 265
   148 00000112 50                      	push 	ax
   149 00000113 B88C00                  	mov 	ax, 140
   150 00000116 50                      	push 	ax
   151 00000117 B80901                  	mov 	ax, 265
   152 0000011A 50                      	push 	ax
   153 0000011B B8D601                  	mov 	ax, 470
   154 0000011E 50                      	push 	ax
   155 0000011F E85F06                  	call 	line
   156                                  
   157 00000122 C606[0000]0F            	mov 	byte[cor], branco_intenso
   158 00000127 B87701                  	mov 	ax, 375
   159 0000012A 50                      	push 	ax
   160 0000012B B88C00                  	mov 	ax, 140
   161 0000012E 50                      	push 	ax
   162 0000012F B87701                  	mov 	ax, 375
   163 00000132 50                      	push 	ax
   164 00000133 B8D601                  	mov 	ax, 470
   165 00000136 50                      	push 	ax
   166 00000137 E84706                  	call 	line
   167                                  
   168                                  le_novo_comando:
   169 0000013A C606[4500]00            	mov	byte [novo_comando], 0
   170 0000013F C606[4600]00            	mov	byte [novo_comando + 1], 0
   171 00000144 C606[4700]00            	mov	byte [novo_comando + 2], 0
   172                                  	
   173 00000149 BB0000                  	mov	bx, 0
   174                                  loop_le_novo_comando:
   175 0000014C B401                    	mov 	ah, 1
   176 0000014E CD21                    	int 	21h
   177                                  
   178 00000150 3C0D                    	cmp	al, 0Dh
   179 00000152 742A                    	je	leu_line_feed
   180                                  	
   181 00000154 3C08                    	cmp	al, 08h
   182 00000156 7403                    	je	leu_backspace
   183 00000158 E91500                  	jmp	nao_leu_backspace
   184                                  
   185                                  leu_backspace:
   186 0000015B 81FB0000                	cmp	bx, 0
   187 0000015F 74EB                    	je	loop_le_novo_comando
   188                                  
   189 00000161 81FB0300                	cmp	bx, 3
   190 00000165 7D05                    	jge	buffer_excedido
   191                                  
   192 00000167 C687[4500]00            	mov	byte [novo_comando + bx], 0
   193                                  	
   194                                  buffer_excedido:
   195 0000016C 4B                      	dec	bx
   196 0000016D E9DCFF                  	jmp	loop_le_novo_comando
   197                                  
   198                                  nao_leu_backspace:
   199 00000170 81FB0300                	cmp	bx, 3
   200 00000174 7D1D                    	jge	excedeu_tamanho_comando
   201                                  	
   202 00000176 8887[4500]              	mov	byte [novo_comando + bx], al
   203 0000017A 43                      	inc	bx
   204 0000017B E9CEFF                  	jmp 	loop_le_novo_comando
   205                                  
   206                                  leu_line_feed:
   207 0000017E 81FB0000                	cmp	bx, 0
   208 00000182 74C8                    	je	loop_le_novo_comando
   209                                  
   210 00000184 81FB0300                	cmp	bx, 3
   211 00000188 7F03                    	jg	apertou_enter_com_comando_muito_grande
   212                                  
   213 0000018A E90A00                  	jmp	processa_novo_comando
   214                                  
   215                                  apertou_enter_com_comando_muito_grande:
   216 0000018D E82200                  	call 	imprime_comando_invalido
   217 00000190 E9A7FF                  	jmp 	le_novo_comando
   218                                  
   219                                  excedeu_tamanho_comando:
   220 00000193 43                      	inc	bx
   221 00000194 E9B5FF                  	jmp 	loop_le_novo_comando
   222                                  
   223                                  processa_novo_comando:
   224                                  	; cmp 	al, 'c'
   225                                  	; je 	novo_jogo
   226 00000197 803E[4500]73            	cmp 	byte [novo_comando], 's'
   227 0000019C 7436                    	je 	sair
   228 0000019E 803E[4500]58            	cmp 	byte [novo_comando], 'X'
   229 000001A3 7441                    	je 	processa_jogada_X
   230 000001A5 803E[4500]43            	cmp 	byte [novo_comando], 'C'
   231 000001AA 7437                    	je 	processa_jogada_C_intermediario
   232 000001AC E80300                  	call 	imprime_comando_invalido
   233 000001AF E988FF                  	jmp 	le_novo_comando
   234                                  
   235                                  
   236                                  imprime_comando_invalido:
   237 000001B2 B91000                      	mov     cx, 16			;n�mero de caracteres
   238 000001B5 BB0000                      	mov     bx, 0
   239 000001B8 B61B                        	mov     dh, 27			;linha 0-29
   240 000001BA B21E                        	mov     dl, 30			;coluna 0-79
   241 000001BC C606[0000]04            	mov	byte [cor], vermelho
   242                                  
   243                                  loop_imprime_comando_invalido:
   244 000001C1 E8C603                  	call	cursor
   245 000001C4 8A87[1800]                  	mov     al,[bx + mensagem_comando_invalido]
   246 000001C8 E8D603                  	call	caracter
   247 000001CB 43                          	inc     bx			;proximo caracter
   248 000001CC FEC2                    	inc	dl			;avanca a coluna
   249 000001CE E2F1                        	loop    loop_imprime_comando_invalido
   250                                  
   251 000001D0 C3                      	ret
   252                                  
   253                                  le_novo_comando_intermediario:
   254 000001D1 E966FF                  	jmp le_novo_comando
   255                                  	
   256                                  ; novo_jogo:
   257                                  
   258                                  sair:
   259 000001D4 B408                    	mov    	ah, 08h
   260 000001D6 CD21                    	int     21h
   261 000001D8 B400                    	mov  	ah, 0   					; set video mode
   262 000001DA A0[0100]                	mov  	al, [modo_anterior]   				; modo anterior
   263 000001DD CD10                    	int  	10h
   264                                  
   265 000001DF B44C                    	mov 	ah, 4ch
   266 000001E1 CD21                    	int 	21h
   267                                  
   268                                  processa_jogada_C_intermediario:
   269 000001E3 E95500                  	jmp	processa_jogada_C
   270                                  
   271                                  processa_jogada_X:
   272 000001E6 803E[5E00]00            	cmp	byte [estado_partida], 0
   273 000001EB 75E4                    	jne	le_novo_comando_intermediario
   274                                  
   275 000001ED E8C702                  	call	calcula_posicao_i_j
   276 000001F0 E8A802                  	call	calcula_indice_array_jogadas
   277 000001F3 BE0000                  	mov	si, 0
   278 000001F6 8B36[5B00]              	mov	si, word [p]
   279 000001FA 80BC[5000]00            	cmp	byte [array_posicoes_jogadas + si], 0
   280 000001FF 750A                    	jne	jogada_x_invalida
   281 00000201 803E[5D00]01            	cmp	byte [ultima_jogada], 1
   282 00000206 7403                    	je	jogada_x_invalida
   283 00000208 E90600                  	jmp	jogada_x_valida
   284                                  
   285                                  jogada_x_invalida:
   286 0000020B E88200                  	call 	imprime_jogada_invalida
   287 0000020E E9C0FF                  	jmp 	le_novo_comando_intermediario
   288                                  
   289                                  jogada_x_valida:
   290 00000211 C606[5D00]01            	mov	byte [ultima_jogada], 1
   291 00000216 BE0000                  	mov	si, 0
   292 00000219 8B36[5B00]              	mov	si, word [p]
   293 0000021D C684[5000]01            	mov	byte [array_posicoes_jogadas + si], 1
   294                                  
   295 00000222 B80000                  	mov	ax, 0
   296 00000225 A0[5900]                	mov	al, [i]
   297 00000228 BB0000                  	mov	bx, 0
   298 0000022B 8A1E[5A00]              	mov	bl, [j]
   299 0000022F E8E402                  	call 	desenha_x
   300 00000232 E87A00                  	call	imprime_jogada
   301 00000235 E89600                  	call	atualiza_estado_da_partida
   302 00000238 E996FF                  	jmp 	le_novo_comando_intermediario
   303                                  
   304                                  processa_jogada_C:
   305 0000023B 803E[5E00]00            	cmp	byte [estado_partida], 0
   306 00000240 758F                    	jne	le_novo_comando_intermediario
   307                                  
   308 00000242 E87202                  	call	calcula_posicao_i_j
   309 00000245 E85302                  	call	calcula_indice_array_jogadas
   310 00000248 BE0000                  	mov	si, 0
   311 0000024B 8B36[5B00]              	mov	si, word [p]
   312 0000024F 80BC[5000]00            	cmp	byte [array_posicoes_jogadas + si], 0
   313 00000254 75B5                    	jne	jogada_x_invalida
   314 00000256 803E[5D00]02            	cmp	byte [ultima_jogada], 2
   315 0000025B 7403                    	je	jogada_circulo_invalida
   316 0000025D E90600                  	jmp	jogada_circulo_valida
   317                                  
   318                                  jogada_circulo_invalida:
   319 00000260 E82D00                  	call 	imprime_jogada_invalida
   320 00000263 E96BFF                  	jmp 	le_novo_comando_intermediario
   321                                  
   322                                  jogada_circulo_valida:
   323 00000266 C606[5D00]02            	mov	byte [ultima_jogada], 2
   324 0000026B BE0000                  	mov	si, 0
   325 0000026E 8B36[5B00]              	mov	si, word [p]
   326 00000272 C684[5000]02            	mov	byte [array_posicoes_jogadas + si], 2
   327                                  
   328 00000277 B80000                  	mov	ax, 0
   329 0000027A A0[5900]                	mov	al, [i]
   330 0000027D BB0000                  	mov	bx, 0
   331 00000280 8A1E[5A00]              	mov	bl, [j]
   332 00000284 E86902                  	call 	desenha_circulo
   333 00000287 E82500                  	call	imprime_jogada
   334 0000028A E84100                  	call	atualiza_estado_da_partida
   335 0000028D E941FF                  	jmp 	le_novo_comando_intermediario
   336                                  
   337                                  imprime_jogada_invalida:
   338 00000290 B91000                      	mov     cx, 16			;n�mero de caracteres
   339 00000293 BB0000                      	mov     bx, 0
   340 00000296 B61B                        	mov     dh, 27			;linha 0-29
   341 00000298 B21E                        	mov     dl, 30			;coluna 0-79
   342 0000029A C606[0000]04            	mov	byte [cor], vermelho
   343                                  
   344                                  loop_imprime_jogada_invalida:
   345 0000029F E8E802                  	call	cursor
   346 000002A2 8A87[2800]                  	mov     al, [bx + mensagem_jogada_invalida]
   347 000002A6 E8F802                  	call	caracter
   348 000002A9 43                          	inc     bx			;proximo caracter
   349 000002AA FEC2                    	inc	dl			;avanca a coluna
   350 000002AC E2F1                        	loop    loop_imprime_jogada_invalida
   351 000002AE C3                      	ret
   352                                  
   353                                  imprime_jogada:
   354 000002AF B90300                      	mov     cx, 3			;n�mero de caracteres
   355 000002B2 BB0000                      	mov     bx, 0
   356 000002B5 B617                        	mov     dh, 23			;linha 0-29
   357 000002B7 B227                        	mov     dl, 39			;coluna 0-79
   358 000002B9 C606[0000]02            	mov	byte [cor], verde
   359                                  
   360                                  loop_imprime_jogada:
   361 000002BE E8C902                  	call	cursor
   362 000002C1 8A87[4500]                  	mov     al, [bx + novo_comando]
   363 000002C5 E8D902                  	call	caracter
   364 000002C8 43                          	inc     bx			;proximo caracter
   365 000002C9 FEC2                    	inc	dl			;avanca a coluna
   366 000002CB E2F1                        	loop    loop_imprime_jogada
   367 000002CD C3                      	ret
   368                                  
   369                                  atualiza_estado_da_partida:
   370 000002CE 50                      	push 	ax
   371                                  
   372                                  	; verifica horizontalmente
   373 000002CF A0[5300]                	mov	al, byte [array_posicoes_jogadas + 3]
   374 000002D2 3C00                    	cmp	al, 0
   375 000002D4 742A                    	je	partida_nao_acabou_1
   376 000002D6 3A06[5000]              	cmp 	al, byte [array_posicoes_jogadas + 0]
   377 000002DA 7524                    	jne	partida_nao_acabou_1
   378 000002DC 3A06[5600]              	cmp	al, byte [array_posicoes_jogadas + 6]
   379 000002E0 751E                    	jne	partida_nao_acabou_1
   380 000002E2 C706[4800]9B00          	mov	word [x1], 155
   381 000002E8 C706[4A00]9F01          	mov	word [y1], 415
   382 000002EE C706[4C00]E501          	mov	word [x2], 485
   383 000002F4 C706[4E00]9F01          	mov	word [y2], 415
   384 000002FA E88301                  	call	desenha_linha_de_vitoria 
   385 000002FD E95901                  	jmp	partida_acabou
   386                                  
   387                                  partida_nao_acabou_1:
   388 00000300 A0[5400]                	mov	al, byte [array_posicoes_jogadas + 4]
   389 00000303 3C00                    	cmp	al, 0
   390 00000305 742A                    	je	partida_nao_acabou_2
   391 00000307 3A06[5100]              	cmp 	al, byte [array_posicoes_jogadas + 1]
   392 0000030B 7524                    	jne	partida_nao_acabou_2
   393 0000030D 3A06[5700]              	cmp	al, byte [array_posicoes_jogadas + 7]
   394 00000311 751E                    	jne	partida_nao_acabou_2
   395 00000313 C706[4800]9B00          	mov	word [x1], 155
   396 00000319 C706[4A00]3101          	mov	word [y1], 305
   397 0000031F C706[4C00]E501          	mov	word [x2], 485
   398 00000325 C706[4E00]3101          	mov	word [y2], 305
   399 0000032B E85201                  	call	desenha_linha_de_vitoria 
   400 0000032E E92801                  	jmp	partida_acabou
   401                                  
   402                                  partida_nao_acabou_2:
   403 00000331 A0[5500]                	mov	al, byte [array_posicoes_jogadas + 5]
   404 00000334 3C00                    	cmp	al, 0
   405 00000336 742A                    	je	partida_nao_acabou_3
   406 00000338 3A06[5200]              	cmp 	al, byte [array_posicoes_jogadas + 2]
   407 0000033C 7524                    	jne	partida_nao_acabou_3
   408 0000033E 3A06[5800]              	cmp	al, byte [array_posicoes_jogadas + 8]
   409 00000342 751E                    	jne	partida_nao_acabou_3
   410 00000344 C706[4800]9B00          	mov	word [x1], 155
   411 0000034A C706[4A00]C300          	mov	word [y1], 195
   412 00000350 C706[4C00]E501          	mov	word [x2], 485
   413 00000356 C706[4E00]C300          	mov	word [y2], 195
   414 0000035C E82101                  	call	desenha_linha_de_vitoria 
   415 0000035F E9F700                  	jmp	partida_acabou
   416                                  
   417                                  ; verifica verticalmente
   418                                  partida_nao_acabou_3:
   419 00000362 A0[5100]                	mov	al, byte [array_posicoes_jogadas + 1]
   420 00000365 3C00                    	cmp	al, 0
   421 00000367 742A                    	je	partida_nao_acabou_4
   422 00000369 3A06[5000]              	cmp 	al, byte [array_posicoes_jogadas + 0]
   423 0000036D 7524                    	jne	partida_nao_acabou_4
   424 0000036F 3A06[5200]              	cmp	al, byte [array_posicoes_jogadas + 2]
   425 00000373 751E                    	jne	partida_nao_acabou_4
   426 00000375 C706[4800]D200          	mov	word [x1], 210
   427 0000037B C706[4A00]8C00          	mov	word [y1], 140
   428 00000381 C706[4C00]D200          	mov	word [x2], 210
   429 00000387 C706[4E00]D601          	mov	word [y2], 470
   430 0000038D E8F000                  	call	desenha_linha_de_vitoria
   431 00000390 E9C600                  	jmp	partida_acabou
   432                                  
   433                                  partida_nao_acabou_4:
   434 00000393 A0[5400]                	mov	al, byte [array_posicoes_jogadas + 4]
   435 00000396 3C00                    	cmp	al, 0
   436 00000398 742A                    	je	partida_nao_acabou_5
   437 0000039A 3A06[5300]              	cmp 	al, byte [array_posicoes_jogadas + 3]
   438 0000039E 7524                    	jne	partida_nao_acabou_5
   439 000003A0 3A06[5500]              	cmp	al, byte [array_posicoes_jogadas + 5]
   440 000003A4 751E                    	jne	partida_nao_acabou_5
   441 000003A6 C706[4800]4001          	mov	word [x1], 320
   442 000003AC C706[4A00]8C00          	mov	word [y1], 140
   443 000003B2 C706[4C00]4001          	mov	word [x2], 320
   444 000003B8 C706[4E00]D601          	mov	word [y2], 470
   445 000003BE E8BF00                  	call	desenha_linha_de_vitoria
   446 000003C1 E99500                  	jmp	partida_acabou
   447                                  
   448                                  partida_nao_acabou_5:
   449 000003C4 A0[5700]                	mov	al, byte [array_posicoes_jogadas + 7]
   450 000003C7 3C00                    	cmp	al, 0
   451 000003C9 742A                    	je	partida_nao_acabou_6
   452 000003CB 3A06[5600]              	cmp 	al, byte [array_posicoes_jogadas + 6]
   453 000003CF 7524                    	jne	partida_nao_acabou_6
   454 000003D1 3A06[5800]              	cmp	al, byte [array_posicoes_jogadas + 8]
   455 000003D5 751E                    	jne	partida_nao_acabou_6
   456 000003D7 C706[4800]AE01          	mov	word [x1], 430
   457 000003DD C706[4A00]8C00          	mov	word [y1], 140
   458 000003E3 C706[4C00]AE01          	mov	word [x2], 430
   459 000003E9 C706[4E00]D601          	mov	word [y2], 470
   460 000003EF E88E00                  	call	desenha_linha_de_vitoria
   461 000003F2 E96400                  	jmp	partida_acabou
   462                                  
   463                                  ; verifica diagonalmente
   464                                  partida_nao_acabou_6:
   465 000003F5 A0[5400]                	mov	al, byte [array_posicoes_jogadas + 4]
   466 000003F8 3C00                    	cmp	al, 0
   467 000003FA 742A                    	je	partida_nao_acabou_7
   468 000003FC 3A06[5000]              	cmp 	al, byte [array_posicoes_jogadas + 0]
   469 00000400 7524                    	jne	partida_nao_acabou_7
   470 00000402 3A06[5800]              	cmp	al, byte [array_posicoes_jogadas + 8]
   471 00000406 751E                    	jne	partida_nao_acabou_7
   472 00000408 C706[4800]9B00          	mov	word [x1], 155
   473 0000040E C706[4A00]D601          	mov	word [y1], 470
   474 00000414 C706[4C00]E501          	mov	word [x2], 485
   475 0000041A C706[4E00]8C00          	mov	word [y2], 140
   476 00000420 E85D00                  	call	desenha_linha_de_vitoria
   477 00000423 E93300                  	jmp	partida_acabou
   478                                  
   479                                  partida_nao_acabou_7:
   480 00000426 A0[5400]                	mov	al, byte [array_posicoes_jogadas + 4]
   481 00000429 3C00                    	cmp	al, 0
   482 0000042B 742A                    	je	partida_nao_acabou_8
   483 0000042D 3A06[5200]              	cmp 	al, byte [array_posicoes_jogadas + 2]
   484 00000431 7524                    	jne	partida_nao_acabou_8
   485 00000433 3A06[5600]              	cmp	al, byte [array_posicoes_jogadas + 6]
   486 00000437 751E                    	jne	partida_nao_acabou_8
   487 00000439 C706[4800]9B00          	mov	word [x1], 155
   488 0000043F C706[4A00]8C00          	mov	word [y1], 140
   489 00000445 C706[4C00]E501          	mov	word [x2], 485
   490 0000044B C706[4E00]D601          	mov	word [y2], 470
   491 00000451 E82C00                  	call	desenha_linha_de_vitoria
   492 00000454 E90200                  	jmp	partida_acabou
   493                                  
   494                                  partida_nao_acabou_8:
   495 00000457 58                      	pop 	ax
   496 00000458 C3                      	ret
   497                                  
   498                                  partida_acabou:
   499 00000459 E80500                  	call	imprime_partida_acabou
   500 0000045C A2[5E00]                	mov	byte [estado_partida], al
   501 0000045F 58                      	pop 	ax
   502 00000460 C3                      	ret
   503                                  
   504                                  imprime_partida_acabou:
   505 00000461 B90E00                      	mov     cx, 14			;n�mero de caracteres
   506 00000464 BB0000                      	mov     bx, 0
   507 00000467 B61B                        	mov     dh, 27			;linha 0-29
   508 00000469 B227                        	mov     dl, 39			;coluna 0-79
   509 0000046B C606[0000]02            	mov	byte [cor], verde
   510                                  
   511                                  loop_imprime_partida_acabou:
   512 00000470 E81701                  	call	cursor
   513 00000473 8A87[3700]                  	mov     al, [bx + mensgem_partida_acabou]
   514 00000477 E82701                  	call	caracter
   515 0000047A 43                          	inc     bx			;proximo caracter
   516 0000047B FEC2                    	inc	dl			;avanca a coluna
   517 0000047D E2F1                        	loop    loop_imprime_partida_acabou
   518 0000047F C3                      	ret
   519                                  
   520                                  desenha_linha_de_vitoria:
   521 00000480 50                      	push	ax
   522 00000481 C606[0000]06            	mov	byte[cor], marrom
   523 00000486 A1[4800]                	mov	ax, [x1]
   524 00000489 50                      	push	ax
   525 0000048A A1[4A00]                	mov	ax, [y1]
   526 0000048D 50                      	push	ax
   527 0000048E A1[4C00]                	mov	ax, [x2]
   528 00000491 50                      	push	ax
   529 00000492 A1[4E00]                	mov	ax, [y2]
   530 00000495 50                      	push	ax
   531 00000496 E8E802                  	call 	line
   532 00000499 58                      	pop	ax
   533 0000049A C3                      	ret
   534                                  
   535                                  ; p = (i - 1)*3 + j - 1
   536                                  calcula_indice_array_jogadas:
   537 0000049B 50                      	push 	ax
   538 0000049C 53                      	push	bx
   539                                  
   540 0000049D B80000                  	mov	ax, 0
   541 000004A0 A0[5900]                	mov	al, [i]
   542 000004A3 FEC8                    	dec	al
   543 000004A5 B303                    	mov	bl, 3
   544 000004A7 F6E3                    	mul	bl
   545 000004A9 8A1E[5A00]              	mov	bl, [j]
   546 000004AD 00D8                    	add	al, bl
   547 000004AF FEC8                    	dec	al
   548 000004B1 A3[5B00]                	mov	word [p], ax
   549                                  	
   550 000004B4 5B                      	pop 	bx
   551 000004B5 58                      	pop	ax
   552 000004B6 C3                      	ret
   553                                  
   554                                  calcula_posicao_i_j:
   555 000004B7 803E[4600]31            	cmp	byte [novo_comando + 1], '1'
   556 000004BC 722C                    	jb	jogada_invalida
   557 000004BE 803E[4600]33            	cmp	byte [novo_comando + 1], '3'
   558 000004C3 7F25                    	jg	jogada_invalida
   559 000004C5 803E[4700]31            	cmp	byte [novo_comando + 2], '1'
   560 000004CA 721E                    	jb	jogada_invalida
   561 000004CC 803E[4700]33            	cmp	byte [novo_comando + 2], '3'
   562 000004D1 7F17                    	jg	jogada_invalida
   563 000004D3 B80000                  	mov	ax, 0
   564 000004D6 A0[4600]                	mov	al, [novo_comando + 1]
   565 000004D9 2C30                    	sub	al, 30h
   566 000004DB A2[5900]                	mov	byte [i], al
   567 000004DE B80000                  	mov	ax, 0
   568 000004E1 A0[4700]                	mov	al, [novo_comando + 2]
   569 000004E4 2C30                    	sub	al, 30h
   570 000004E6 A2[5A00]                	mov	byte [j], al
   571 000004E9 C3                      	ret
   572                                  
   573                                  jogada_invalida:
   574 000004EA E8A3FD                  	call	imprime_jogada_invalida
   575 000004ED E94AFC                  	jmp	le_novo_comando
   576                                  
   577                                  desenha_circulo:
   578 000004F0 51                      	push 	cx
   579                                  
   580 000004F1 B96E00                  	mov	cx, 110
   581                                  
   582 000004F4 48                      	dec 	ax
   583 000004F5 F7E1                    	mul 	cx
   584 000004F7 05D200                  	add 	ax, 210
   585 000004FA 50                      	push	ax
   586                                  
   587 000004FB 89D8                    	mov 	ax, bx
   588 000004FD 48                      	dec 	ax
   589 000004FE F7E1                    	mul 	cx
   590 00000500 89C1                    	mov 	cx, ax
   591 00000502 B89F01                  	mov	ax, 415
   592 00000505 29C8                    	sub	ax, cx
   593 00000507 50                      	push	ax
   594                                  
   595 00000508 B82D00                  	mov	ax, 45
   596 0000050B 50                      	push	ax
   597                                  	
   598 0000050C C606[0000]05            	mov	byte[cor], magenta
   599 00000511 E8D200                  	call	circle
   600                                  
   601 00000514 59                      	pop 	cx
   602                                  
   603 00000515 C3                      	ret
   604                                  
   605                                  desenha_x:
   606 00000516 51                      	push 	cx
   607 00000517 52                      	push 	dx
   608                                  
   609 00000518 B96E00                  	mov	cx, 110
   610                                  
   611 0000051B 48                      	dec 	ax
   612 0000051C F7E1                    	mul 	cx
   613 0000051E 05D200                  	add 	ax, 210
   614 00000521 2D1F00                  	sub	ax, 31
   615 00000524 A3[4800]                	mov	word [x1], ax
   616 00000527 053E00                  	add	ax, 62
   617 0000052A A3[4C00]                	mov	word [x2], ax
   618                                  
   619 0000052D 89D8                    	mov 	ax, bx
   620 0000052F 48                      	dec 	ax
   621 00000530 F7E1                    	mul 	cx
   622 00000532 89C1                    	mov 	cx, ax
   623 00000534 B89F01                  	mov	ax, 415
   624 00000537 29C8                    	sub	ax, cx
   625 00000539 2D1F00                  	sub	ax, 31
   626 0000053C A3[4A00]                	mov	word [y1], ax
   627 0000053F 053E00                  	add	ax, 62
   628 00000542 A3[4E00]                	mov	word [y2], ax
   629                                  	
   630 00000545 C606[0000]02            	mov	byte[cor], verde
   631 0000054A A1[4800]                	mov	ax, [x1]
   632 0000054D 50                      	push	ax
   633 0000054E A1[4A00]                	mov	ax, [y1]
   634 00000551 50                      	push	ax
   635 00000552 A1[4C00]                	mov	ax, [x2]
   636 00000555 50                      	push	ax
   637 00000556 A1[4E00]                	mov	ax, [y2]
   638 00000559 50                      	push	ax
   639 0000055A E82402                  	call 	line
   640                                  
   641 0000055D A1[4A00]                	mov 	ax, [y1]
   642 00000560 053E00                  	add	ax, 62
   643 00000563 A3[4A00]                	mov	word [y1], ax
   644 00000566 A1[4E00]                	mov	ax, [y2]
   645 00000569 2D3E00                  	sub	ax, 62
   646 0000056C A3[4E00]                	mov	word [y2], ax
   647                                  
   648 0000056F C606[0000]02            	mov	byte[cor], verde
   649 00000574 A1[4800]                	mov	ax, [x1]
   650 00000577 50                      	push	ax
   651 00000578 A1[4A00]                	mov	ax, [y1]
   652 0000057B 50                      	push	ax
   653 0000057C A1[4C00]                	mov	ax, [x2]
   654 0000057F 50                      	push	ax
   655 00000580 A1[4E00]                	mov	ax, [y2]
   656 00000583 50                      	push	ax
   657 00000584 E8FA01                  	call 	line
   658                                  
   659 00000587 5A                      	pop	dx
   660 00000588 59                      	pop 	cx
   661 00000589 C3                      	ret
   662                                  
   663                                  ;***************************************************************************
   664                                  ;
   665                                  ;   funcao cursor
   666                                  ;
   667                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   668                                  cursor:
   669 0000058A 9C                      	pushf
   670 0000058B 50                      	push 	ax
   671 0000058C 53                      	push 	bx
   672 0000058D 51                      	push	cx
   673 0000058E 52                      	push	dx
   674 0000058F 56                      	push	si
   675 00000590 57                      	push	di
   676 00000591 55                      	push	bp
   677 00000592 B402                    	mov     ah, 2
   678 00000594 B700                    	mov     bh, 0
   679 00000596 CD10                    	int     10h
   680 00000598 5D                      	pop	bp
   681 00000599 5F                      	pop	di
   682 0000059A 5E                      	pop	si
   683 0000059B 5A                      	pop	dx
   684 0000059C 59                      	pop	cx
   685 0000059D 5B                      	pop	bx
   686 0000059E 58                      	pop	ax
   687 0000059F 9D                      	popf
   688 000005A0 C3                      	ret
   689                                  ;_____________________________________________________________________________
   690                                  ;
   691                                  ;   funcao caracter escrito na posicao do cursor
   692                                  ;
   693                                  ; al= caracter a ser escrito
   694                                  ; cor definida na variavel cor
   695                                  caracter:
   696 000005A1 9C                      	pushf
   697 000005A2 50                      	push 	ax
   698 000005A3 53                      	push 	bx
   699 000005A4 51                      	push	cx
   700 000005A5 52                      	push	dx
   701 000005A6 56                      	push	si
   702 000005A7 57                      	push	di
   703 000005A8 55                      	push	bp
   704 000005A9 B409                    	mov     ah, 9
   705 000005AB B700                    	mov     bh, 0
   706 000005AD B90100                  	mov     cx, 1
   707 000005B0 8A1E[0000]              	mov     bl, [cor]
   708 000005B4 CD10                    	int     10h
   709 000005B6 5D                      	pop	bp
   710 000005B7 5F                      	pop	di
   711 000005B8 5E                      	pop	si
   712 000005B9 5A                      	pop	dx
   713 000005BA 59                      	pop	cx
   714 000005BB 5B                      	pop	bx
   715 000005BC 58                      	pop	ax
   716 000005BD 9D                      	popf
   717 000005BE C3                      	ret
   718                                  ;_____________________________________________________________________________
   719                                  ;
   720                                  ;   funcao plot_xy
   721                                  ;
   722                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   723                                  ; cor definida na variavel cor
   724                                  plot_xy:
   725 000005BF 55                      	push	bp
   726 000005C0 89E5                    	mov	bp, sp
   727 000005C2 9C                      	pushf
   728 000005C3 50                      	push 	ax
   729 000005C4 53                      	push 	bx
   730 000005C5 51                      	push	cx
   731 000005C6 52                      	push	dx
   732 000005C7 56                      	push	si
   733 000005C8 57                      	push	di
   734 000005C9 B40C                    	mov     ah, 0ch
   735 000005CB A0[0000]                	mov     al, [cor]
   736 000005CE B700                    	mov     bh, 0
   737 000005D0 BADF01                  	mov     dx, 479
   738 000005D3 2B5604                  	sub	dx, [bp+4]
   739 000005D6 8B4E06                  	mov     cx, [bp+6]
   740 000005D9 CD10                    	int     10h
   741 000005DB 5F                      	pop	di
   742 000005DC 5E                      	pop	si
   743 000005DD 5A                      	pop	dx
   744 000005DE 59                      	pop	cx
   745 000005DF 5B                      	pop	bx
   746 000005E0 58                      	pop	ax
   747 000005E1 9D                      	popf
   748 000005E2 5D                      	pop	bp
   749 000005E3 C20400                  	ret	4
   750                                  
   751                                  ;_____________________________________________________________________________
   752                                  ;    funcao circle
   753                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   754                                  ; cor definida na variavel cor
   755                                  circle:
   756 000005E6 55                      	push 	bp
   757 000005E7 89E5                    	mov	bp, sp
   758 000005E9 9C                      	pushf                        ;coloca os flags na pilha
   759 000005EA 50                      	push 	ax
   760 000005EB 53                      	push 	bx
   761 000005EC 51                      	push	cx
   762 000005ED 52                      	push	dx
   763 000005EE 56                      	push	si
   764 000005EF 57                      	push	di
   765                                  	
   766 000005F0 8B4608                  	mov	ax, [bp+8]    ; resgata xc
   767 000005F3 8B5E06                  	mov	bx, [bp+6]    ; resgata yc
   768 000005F6 8B4E04                  	mov	cx, [bp+4]    ; resgata r
   769                                  	
   770 000005F9 89DA                    	mov 	dx, bx	
   771 000005FB 01CA                    	add	dx, cx       ;ponto extremo superior
   772 000005FD 50                      	push    ax			
   773 000005FE 52                      	push	dx
   774 000005FF E8BDFF                  	call 	plot_xy
   775                                  	
   776 00000602 89DA                    	mov	dx, bx
   777 00000604 29CA                    	sub	dx, cx       ;ponto extremo inferior
   778 00000606 50                      	push    ax			
   779 00000607 52                      	push	dx
   780 00000608 E8B4FF                  	call 	plot_xy
   781                                  	
   782 0000060B 89C2                    	mov 	dx, ax	
   783 0000060D 01CA                    	add	dx, cx       ;ponto extremo direita
   784 0000060F 52                      	push    dx			
   785 00000610 53                      	push	bx
   786 00000611 E8ABFF                  	call 	plot_xy
   787                                  	
   788 00000614 89C2                    	mov	dx, ax
   789 00000616 29CA                    	sub	dx, cx       ;ponto extremo esquerda
   790 00000618 52                      	push    dx			
   791 00000619 53                      	push	bx
   792 0000061A E8A2FF                  	call 	plot_xy
   793                                  		
   794 0000061D 89CF                    	mov	di, cx
   795 0000061F 81EF0100                	sub	di, 1	 ;di=r-1
   796 00000623 BA0000                  	mov	dx, 0  	;dx ser� a vari�vel x. cx � a variavel y
   797                                  	
   798                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   799                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   800                                  ;valores positivos para d
   801                                  
   802                                  stay:				;loop
   803 00000626 89FE                    	mov	si, di
   804 00000628 81FE0000                	cmp	si, 0
   805 0000062C 7F0E                    	jg	inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   806 0000062E 89D6                    	mov	si, dx		;o jl � importante porque trata-se de conta com sinal
   807 00000630 D1E6                    	sal	si, 1		;multiplica por doi (shift arithmetic left)
   808 00000632 81C60300                	add	si, 3
   809 00000636 01F7                    	add	di, si     ;nesse ponto d=d+2*dx+3
   810 00000638 42                      	inc	dx		;incrementa dx
   811 00000639 E90E00                  	jmp	plotar
   812                                  inf:	
   813 0000063C 89D6                    	mov	si, dx
   814 0000063E 29CE                    	sub	si, cx  		;faz x - y (dx-cx), e salva em di 
   815 00000640 D1E6                    	sal	si, 1
   816 00000642 81C60500                	add	si, 5
   817 00000646 01F7                    	add	di, si		;nesse ponto d=d+2*(dx-cx)+5
   818 00000648 42                      	inc	dx		;incrementa x (dx)
   819 00000649 49                      	dec	cx		;decrementa y (cx)
   820                                  	
   821                                  plotar:	
   822 0000064A 89D6                    	mov	si, dx
   823 0000064C 01C6                    	add	si, ax
   824 0000064E 56                      	push    si			;coloca a abcisa x+xc na pilha
   825 0000064F 89CE                    	mov	si, cx
   826 00000651 01DE                    	add	si, bx
   827 00000653 56                      	push    si			;coloca a ordenada y+yc na pilha
   828 00000654 E868FF                  	call 	plot_xy		;toma conta do segundo octante
   829 00000657 89C6                    	mov	si, ax
   830 00000659 01D6                    	add	si, dx
   831 0000065B 56                      	push    si			;coloca a abcisa xc+x na pilha
   832 0000065C 89DE                    	mov	si, bx
   833 0000065E 29CE                    	sub	si, cx
   834 00000660 56                      	push    si			;coloca a ordenada yc-y na pilha
   835 00000661 E85BFF                  	call 	plot_xy		;toma conta do s�timo octante
   836 00000664 89C6                    	mov	si, ax
   837 00000666 01CE                    	add	si, cx
   838 00000668 56                      	push    si			;coloca a abcisa xc+y na pilha
   839 00000669 89DE                    	mov	si, bx
   840 0000066B 01D6                    	add	si, dx
   841 0000066D 56                      	push    si			;coloca a ordenada yc+x na pilha
   842 0000066E E84EFF                  	call 	plot_xy		;toma conta do segundo octante
   843 00000671 89C6                    	mov	si, ax
   844 00000673 01CE                    	add	si, cx
   845 00000675 56                      	push    si			;coloca a abcisa xc+y na pilha
   846 00000676 89DE                    	mov	si, bx
   847 00000678 29D6                    	sub	si, dx
   848 0000067A 56                      	push    si			;coloca a ordenada yc-x na pilha
   849 0000067B E841FF                  	call 	plot_xy		;toma conta do oitavo octante
   850 0000067E 89C6                    	mov	si, ax
   851 00000680 29D6                    	sub	si, dx
   852 00000682 56                      	push    si			;coloca a abcisa xc-x na pilha
   853 00000683 89DE                    	mov	si, bx
   854 00000685 01CE                    	add	si, cx
   855 00000687 56                      	push    si			;coloca a ordenada yc+y na pilha
   856 00000688 E834FF                  	call 	plot_xy		;toma conta do terceiro octante
   857 0000068B 89C6                    	mov	si, ax
   858 0000068D 29D6                    	sub	si, dx
   859 0000068F 56                      	push    si			;coloca a abcisa xc-x na pilha
   860 00000690 89DE                    	mov	si, bx
   861 00000692 29CE                    	sub	si, cx
   862 00000694 56                      	push    si			;coloca a ordenada yc-y na pilha
   863 00000695 E827FF                  	call 	plot_xy		;toma conta do sexto octante
   864 00000698 89C6                    	mov	si, ax
   865 0000069A 29CE                    	sub	si, cx
   866 0000069C 56                      	push    si			;coloca a abcisa xc-y na pilha
   867 0000069D 89DE                    	mov	si, bx
   868 0000069F 29D6                    	sub	si, dx
   869 000006A1 56                      	push    si			;coloca a ordenada yc-x na pilha
   870 000006A2 E81AFF                  	call 	plot_xy		;toma conta do quinto octante
   871 000006A5 89C6                    	mov	si, ax
   872 000006A7 29CE                    	sub	si, cx
   873 000006A9 56                      	push    si			;coloca a abcisa xc-y na pilha
   874 000006AA 89DE                    	mov	si, bx
   875 000006AC 01D6                    	add	si, dx
   876 000006AE 56                      	push    si			;coloca a ordenada yc-x na pilha
   877 000006AF E80DFF                  	call 	plot_xy		;toma conta do quarto octante
   878                                  	
   879 000006B2 39D1                    	cmp	cx, dx
   880 000006B4 7203                    	jb	fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   881 000006B6 E96DFF                  	jmp	stay		;se cx (y) est� acima de dx (x), continua no loop
   882                                  	
   883                                  fim_circle:
   884 000006B9 5F                      	pop	di
   885 000006BA 5E                      	pop	si
   886 000006BB 5A                      	pop	dx
   887 000006BC 59                      	pop	cx
   888 000006BD 5B                      	pop	bx
   889 000006BE 58                      	pop	ax
   890 000006BF 9D                      	popf
   891 000006C0 5D                      	pop	bp
   892 000006C1 C20600                  	ret	6
   893                                  ;-----------------------------------------------------------------------------
   894                                  ;    fun��o full_circle
   895                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   896                                  ; cor definida na variavel cor					  
   897                                  full_circle:
   898 000006C4 55                      	push 	bp
   899 000006C5 89E5                    	mov	bp, sp
   900 000006C7 9C                      	pushf                        ;coloca os flags na pilha
   901 000006C8 50                      	push 	ax
   902 000006C9 53                      	push 	bx
   903 000006CA 51                      	push	cx
   904 000006CB 52                      	push	dx
   905 000006CC 56                      	push	si
   906 000006CD 57                      	push	di
   907                                  
   908 000006CE 8B4608                  	mov	ax, [bp+8]    ; resgata xc
   909 000006D1 8B5E06                  	mov	bx, [bp+6]    ; resgata yc
   910 000006D4 8B4E04                  	mov	cx, [bp+4]    ; resgata r
   911                                  	
   912 000006D7 89DE                    	mov	si, bx
   913 000006D9 29CE                    	sub	si, cx
   914 000006DB 50                      	push    ax			;coloca xc na pilha			
   915 000006DC 56                      	push	si			;coloca yc-r na pilha
   916 000006DD 89DE                    	mov	si, bx
   917 000006DF 01CE                    	add	si, cx
   918 000006E1 50                      	push	ax		;coloca xc na pilha
   919 000006E2 56                      	push	si		;coloca yc+r na pilha
   920 000006E3 E89B00                  	call 	line
   921                                  	
   922                                  		
   923 000006E6 89CF                    	mov	di, cx
   924 000006E8 81EF0100                	sub	di, 1	 ;di=r-1
   925 000006EC BA0000                  	mov	dx, 0  	;dx ser� a vari�vel x. cx � a variavel y
   926                                  	
   927                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   928                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   929                                  ;valores positivos para d
   930                                  
   931                                  stay_full:				;loop
   932 000006EF 89FE                    	mov	si, di
   933 000006F1 81FE0000                	cmp	si, 0
   934 000006F5 7F0E                    	jg	inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   935 000006F7 89D6                    	mov	si, dx		;o jl � importante porque trata-se de conta com sinal
   936 000006F9 D1E6                    	sal	si, 1		;multiplica por doi (shift arithmetic left)
   937 000006FB 81C60300                	add	si, 3
   938 000006FF 01F7                    	add	di, si     ;nesse ponto d=d+2*dx+3
   939 00000701 42                      	inc	dx		;incrementa dx
   940 00000702 E90E00                  	jmp	plotar_full
   941                                  inf_full:	
   942 00000705 89D6                    	mov	si, dx
   943 00000707 29CE                    	sub	si, cx  		;faz x - y (dx-cx), e salva em di 
   944 00000709 D1E6                    	sal	si, 1
   945 0000070B 81C60500                	add	si, 5
   946 0000070F 01F7                    	add	di, si		;nesse ponto d=d+2*(dx-cx)+5
   947 00000711 42                      	inc	dx		;incrementa x (dx)
   948 00000712 49                      	dec	cx		;decrementa y (cx)
   949                                  	
   950                                  plotar_full:	
   951 00000713 89C6                    	mov	si, ax
   952 00000715 01CE                    	add	si, cx
   953 00000717 56                      	push	si		;coloca a abcisa y+xc na pilha			
   954 00000718 89DE                    	mov	si, bx
   955 0000071A 29D6                    	sub	si, dx
   956 0000071C 56                      	push    si		;coloca a ordenada yc-x na pilha
   957 0000071D 89C6                    	mov	si, ax
   958 0000071F 01CE                    	add	si, cx
   959 00000721 56                      	push	si		;coloca a abcisa y+xc na pilha	
   960 00000722 89DE                    	mov	si, bx
   961 00000724 01D6                    	add	si, dx
   962 00000726 56                      	push    si		;coloca a ordenada yc+x na pilha	
   963 00000727 E85700                  	call 	line
   964                                  	
   965 0000072A 89C6                    	mov	si, ax
   966 0000072C 01D6                    	add	si, dx
   967 0000072E 56                      	push	si		;coloca a abcisa xc+x na pilha			
   968 0000072F 89DE                    	mov	si, bx
   969 00000731 29CE                    	sub	si, cx
   970 00000733 56                      	push    si		;coloca a ordenada yc-y na pilha
   971 00000734 89C6                    	mov	si, ax
   972 00000736 01D6                    	add	si, dx
   973 00000738 56                      	push	si		;coloca a abcisa xc+x na pilha	
   974 00000739 89DE                    	mov	si, bx
   975 0000073B 01CE                    	add	si, cx
   976 0000073D 56                      	push    si		;coloca a ordenada yc+y na pilha	
   977 0000073E E84000                  	call	line
   978                                  	
   979 00000741 89C6                    	mov	si, ax
   980 00000743 29D6                    	sub	si, dx
   981 00000745 56                      	push	si		;coloca a abcisa xc-x na pilha			
   982 00000746 89DE                    	mov	si, bx
   983 00000748 29CE                    	sub	si, cx
   984 0000074A 56                      	push    si		;coloca a ordenada yc-y na pilha
   985 0000074B 89C6                    	mov	si, ax
   986 0000074D 29D6                    	sub	si, dx
   987 0000074F 56                      	push	si		;coloca a abcisa xc-x na pilha	
   988 00000750 89DE                    	mov	si, bx
   989 00000752 01CE                    	add	si, cx
   990 00000754 56                      	push    si		;coloca a ordenada yc+y na pilha	
   991 00000755 E82900                  	call	line
   992                                  	
   993 00000758 89C6                    	mov	si, ax
   994 0000075A 29CE                    	sub	si, cx
   995 0000075C 56                      	push	si		;coloca a abcisa xc-y na pilha			
   996 0000075D 89DE                    	mov	si, bx
   997 0000075F 29D6                    	sub	si, dx
   998 00000761 56                      	push    si		;coloca a ordenada yc-x na pilha
   999 00000762 89C6                    	mov	si, ax
  1000 00000764 29CE                    	sub	si, cx
  1001 00000766 56                      	push	si		;coloca a abcisa xc-y na pilha	
  1002 00000767 89DE                    	mov	si, bx
  1003 00000769 01D6                    	add	si, dx
  1004 0000076B 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1005 0000076C E81200                  	call	line
  1006                                  
  1007 0000076F 39D1                    	cmp	cx, dx
  1008 00000771 7203                    	jb	fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1009 00000773 E979FF                  	jmp	stay_full		;se cx (y) est� acima de dx (x), continua no loop
  1010                                  	
  1011                                  	
  1012                                  fim_full_circle:
  1013 00000776 5F                      	pop	di
  1014 00000777 5E                      	pop	si
  1015 00000778 5A                      	pop	dx
  1016 00000779 59                      	pop	cx
  1017 0000077A 5B                      	pop	bx
  1018 0000077B 58                      	pop	ax
  1019 0000077C 9D                      	popf
  1020 0000077D 5D                      	pop	bp
  1021 0000077E C20600                  	ret	6
  1022                                  ;-----------------------------------------------------------------------------
  1023                                  ;
  1024                                  ;   funcao line
  1025                                  ;
  1026                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1027                                  line:
  1028 00000781 55                      	push	bp
  1029 00000782 89E5                    	mov	bp, sp
  1030 00000784 9C                      	pushf                        ;coloca os flags na pilha
  1031 00000785 50                      	push 	ax
  1032 00000786 53                      	push 	bx
  1033 00000787 51                      	push	cx
  1034 00000788 52                      	push	dx
  1035 00000789 56                      	push	si
  1036 0000078A 57                      	push	di
  1037 0000078B 8B460A                  	mov	ax, [bp + 10]   ; resgata os valores das coordenadas
  1038 0000078E 8B5E08                  	mov	bx, [bp + 8]    ; resgata os valores das coordenadas
  1039 00000791 8B4E06                  	mov	cx, [bp + 6]    ; resgata os valores das coordenadas
  1040 00000794 8B5604                  	mov	dx, [bp + 4]    ; resgata os valores das coordenadas
  1041 00000797 39C8                    	cmp	ax, cx
  1042 00000799 7408                    	je	line2
  1043 0000079B 721C                    	jb	line1
  1044 0000079D 91                      	xchg	ax, cx
  1045 0000079E 87DA                    	xchg	bx, dx
  1046 000007A0 E91600                  	jmp	line1
  1047                                  line2:		; deltax=0
  1048 000007A3 39D3                    	cmp	bx, dx  ;subtrai dx de bx
  1049 000007A5 7202                    	jb	line3
  1050 000007A7 87DA                    	xchg	bx, dx        ;troca os valores de bx e dx entre eles
  1051                                  line3:	; dx > bx
  1052 000007A9 50                      	push	ax
  1053 000007AA 53                      	push	bx
  1054 000007AB E811FE                  	call 	plot_xy
  1055 000007AE 39D3                    	cmp	bx, dx
  1056 000007B0 7503                    	jne	line31
  1057 000007B2 E9C600                  	jmp	fim_line
  1058                                  line31:	
  1059 000007B5 43                      	inc	bx
  1060 000007B6 E9F0FF                  	jmp	line3
  1061                                  ;deltax <>0
  1062                                  line1:
  1063                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1064                                  	; cx > ax
  1065 000007B9 51                      	push	cx
  1066 000007BA 29C1                    	sub	cx, ax
  1067 000007BC 890E[0600]              	mov	[deltax], cx
  1068 000007C0 59                      	pop	cx
  1069 000007C1 52                      	push	dx
  1070 000007C2 29DA                    	sub	dx, bx
  1071 000007C4 7702                    	ja	line32
  1072 000007C6 F7DA                    	neg	dx
  1073                                  line32:		
  1074 000007C8 8916[0800]              	mov	[deltay], dx
  1075 000007CC 5A                      	pop	dx
  1076                                  
  1077 000007CD 50                      	push	ax
  1078 000007CE A1[0600]                	mov	ax, [deltax]
  1079 000007D1 3B06[0800]              	cmp	ax, [deltay]
  1080 000007D5 58                      	pop	ax
  1081 000007D6 724D                    	jb	line5
  1082                                  
  1083                                  	; cx > ax e deltax>deltay
  1084 000007D8 51                      	push	cx
  1085 000007D9 29C1                    	sub	cx, ax
  1086 000007DB 890E[0600]              	mov	[deltax], cx
  1087 000007DF 59                      	pop	cx
  1088 000007E0 52                      	push	dx
  1089 000007E1 29DA                    	sub	dx, bx
  1090 000007E3 8916[0800]              	mov	[deltay], dx
  1091 000007E7 5A                      	pop	dx
  1092                                  
  1093 000007E8 89C6                    	mov	si, ax
  1094                                  line4:
  1095 000007EA 50                      	push	ax
  1096 000007EB 52                      	push	dx
  1097 000007EC 56                      	push	si
  1098 000007ED 29C6                    	sub	si, ax	;(x-x1)
  1099 000007EF A1[0800]                	mov	ax, [deltay]
  1100 000007F2 F7EE                    	imul	si
  1101 000007F4 8B36[0600]              	mov	si, [deltax]		;arredondar
  1102 000007F8 D1EE                    	shr	si, 1
  1103                                  ; se numerador (DX)>0 soma se <0 subtrai
  1104 000007FA 81FA0000                	cmp	dx, 0
  1105 000007FE 7C09                    	jl	ar1
  1106 00000800 01F0                    	add	ax, si
  1107 00000802 81D20000                	adc	dx, 0
  1108 00000806 E90600                  	jmp	arc1
  1109                                  ar1:	
  1110 00000809 29F0                    	sub	ax, si
  1111 0000080B 81DA0000                	sbb	dx, 0
  1112                                  arc1:
  1113 0000080F F73E[0600]              	idiv	word [deltax]
  1114 00000813 01D8                    	add	ax, bx
  1115 00000815 5E                      	pop	si
  1116 00000816 56                      	push	si
  1117 00000817 50                      	push	ax
  1118 00000818 E8A4FD                  	call	plot_xy
  1119 0000081B 5A                      	pop	dx
  1120 0000081C 58                      	pop	ax
  1121 0000081D 39CE                    	cmp	si, cx
  1122 0000081F 745A                    	je	fim_line
  1123 00000821 46                      	inc	si
  1124 00000822 E9C5FF                  	jmp	line4
  1125                                  
  1126                                  line5:	
  1127 00000825 39D3                    	cmp	bx, dx
  1128 00000827 7203                    	jb 	line7
  1129 00000829 91                      	xchg	ax, cx
  1130 0000082A 87DA                    	xchg	bx, dx
  1131                                  line7:
  1132 0000082C 51                      	push	cx
  1133 0000082D 29C1                    	sub	cx, ax
  1134 0000082F 890E[0600]              	mov	[deltax], cx
  1135 00000833 59                      	pop	cx
  1136 00000834 52                      	push	dx
  1137 00000835 29DA                    	sub	dx,bx
  1138 00000837 8916[0800]              	mov	[deltay], dx
  1139 0000083B 5A                      	pop	dx
  1140                                  
  1141                                  
  1142                                  
  1143 0000083C 89DE                    	mov	si,bx
  1144                                  line6:
  1145 0000083E 52                      	push	dx
  1146 0000083F 56                      	push	si
  1147 00000840 50                      	push	ax
  1148 00000841 29DE                    	sub	si, bx	;(y-y1)
  1149 00000843 A1[0600]                	mov	ax, [deltax]
  1150 00000846 F7EE                    	imul	si
  1151 00000848 8B36[0800]              	mov	si, [deltay]		;arredondar
  1152 0000084C D1EE                    	shr	si, 1
  1153                                  ; se numerador (DX)>0 soma se <0 subtrai
  1154 0000084E 81FA0000                	cmp	dx, 0
  1155 00000852 7C09                    	jl	ar2
  1156 00000854 01F0                    	add	ax, si
  1157 00000856 81D20000                	adc	dx, 0
  1158 0000085A E90600                  	jmp	arc2
  1159                                  ar2:	
  1160 0000085D 29F0                    	sub	ax, si
  1161 0000085F 81DA0000                	sbb	dx, 0
  1162                                  arc2:
  1163 00000863 F73E[0800]              	idiv	word [deltay]
  1164 00000867 89C7                    	mov	di, ax
  1165 00000869 58                      	pop	ax
  1166 0000086A 01C7                    	add	di, ax
  1167 0000086C 5E                      	pop	si
  1168 0000086D 57                      	push	di
  1169 0000086E 56                      	push	si
  1170 0000086F E84DFD                  	call	plot_xy
  1171 00000872 5A                      	pop	dx
  1172 00000873 39D6                    	cmp	si, dx
  1173 00000875 7404                    	je	fim_line
  1174 00000877 46                      	inc	si
  1175 00000878 E9C3FF                  	jmp	line6
  1176                                  
  1177                                  fim_line:
  1178 0000087B 5F                      	pop	di
  1179 0000087C 5E                      	pop	si
  1180 0000087D 5A                      	pop	dx
  1181 0000087E 59                      	pop	cx
  1182 0000087F 5B                      	pop	bx
  1183 00000880 58                      	pop	ax
  1184 00000881 9D                      	popf
  1185 00000882 5D                      	pop	bp
  1186 00000883 C20800                  	ret	8
  1187                                  
  1188                                  ;*******************************************************************
  1189                                  segment data
  1190                                  
  1191                                  
  1192                                  ;	I R G B COR
  1193                                  ;	0 0 0 0 preto
  1194                                  ;	0 0 0 1 azul
  1195                                  ;	0 0 1 0 verde
  1196                                  ;	0 0 1 1 cyan
  1197                                  ;	0 1 0 0 vermelho
  1198                                  ;	0 1 0 1 magenta
  1199                                  ;	0 1 1 0 marrom
  1200                                  ;	0 1 1 1 branco
  1201                                  ;	1 0 0 0 cinza
  1202                                  ;	1 0 0 1 azul claro
  1203                                  ;	1 0 1 0 verde claro
  1204                                  ;	1 0 1 1 cyan claro
  1205                                  ;	1 1 0 0 rosa
  1206                                  ;	1 1 0 1 magenta claro
  1207                                  ;	1 1 1 0 amarelo
  1208                                  ;	1 1 1 1 branco intenso
  1209                                  
  1210 00000000 0F                      cor				db			branco_intenso
  1211                                  preto				equ			0
  1212                                  azul				equ			1
  1213                                  verde				equ			2
  1214                                  cyan				equ			3
  1215                                  vermelho			equ			4
  1216                                  magenta				equ			5
  1217                                  marrom				equ			6
  1218                                  branco				equ			7
  1219                                  cinza				equ			8
  1220                                  azul_claro			equ			9
  1221                                  verde_claro			equ			10
  1222                                  cyan_claro			equ			11
  1223                                  rosa				equ			12
  1224                                  magenta_claro			equ			13
  1225                                  amarelo				equ			14
  1226                                  branco_intenso			equ			15
  1227                                  
  1228 00000001 00                      modo_anterior			db			0
  1229 00000002 0000                    linha   			dw  			0
  1230 00000004 0000                    coluna  			dw  			0
  1231 00000006 0000                    deltax				dw			0
  1232 00000008 0000                    deltay				dw			0	
  1233 0000000A 46756E63616F204772-     mens    			db  			'Funcao Grafica'
  1234 00000013 6166696361         
  1235                                  
  1236                                  ; mensagens de erro impressas na tela ao longo do jogo
  1237 00000018 436F6D616E646F2049-     mensagem_comando_invalido	db			'Comando Invalido'
  1238 00000021 6E76616C69646F     
  1239 00000028 4A6F6761646120496E-     mensagem_jogada_invalida	db			'Jogada Invalida'
  1240 00000031 76616C696461       
  1241 00000037 506172746964612041-     mensgem_partida_acabou		db			'Partida Acabou'
  1242 00000040 6361626F75         
  1243                                  
  1244                                  ; armazena o novo comando que esta sendo digitado
  1245 00000045 000000                  novo_comando			db			0, 0, 0
  1246                                  
  1247                                  ; variaveis auxiliares usadas na impressao dos X's
  1248 00000048 0000                    x1				dw			0
  1249 0000004A 0000                    y1				dw			0
  1250 0000004C 0000                    x2				dw			0
  1251 0000004E 0000                    y2				dw			0
  1252                                  
  1253                                  ; array que armazena a situacao atual de cada celula do jogo da velha
  1254                                  ; 0 indica que nada foi jogado na posicao
  1255                                  ; 1 indica que X foi jogado na posicao
  1256                                  ; 2 indica que circulo foi jogado na posicao
  1257 00000050 000000000000000000      array_posicoes_jogadas		db			0, 0, 0, 0, 0, 0, 0, 0, 0
  1258 00000059 00                      i				db			0
  1259 0000005A 00                      j				db			0
  1260 0000005B 0000                    p				dw			0
  1261                                  
  1262                                  ; ultima jogada
  1263                                  ; 0 se ninguem jogou ainda
  1264                                  ; 1 se X foi jogado por ultimo
  1265                                  ; 2 se Circulo foi jogado por ultimo
  1266 0000005D 00                      ultima_jogada			db			0
  1267                                  
  1268                                  ; estado da partida
  1269                                  ; 0 ninguem ganhou
  1270                                  ; 1 se X ganhou o jogo
  1271                                  ; 2 se Circulo ganhou jogo
  1272 0000005E 00                      estado_partida			db			0
  1273                                  
  1274                                  ;*************************************************************************
  1275                                  segment stack stack
  1276 00000000 <res 00000200>          	resb 	512
  1277                                  stacktop:
