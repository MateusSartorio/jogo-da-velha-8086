     1                                  ; Hiuri Liberato
     2                                  ; Mateus Ticianeli Sartorio
     3                                  ; Sistemas Embarcados I - 2023/2 - Engenharia de Computacao
     4                                  
     5                                  ; versao de 10/05/2007
     6                                  ; corrigido erro de arredondamento na rotina line.
     7                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     8                                  
     9                                  segment code
    10                                  ..start:
    11 00000000 B8[0000]                	mov 	ax, data
    12 00000003 8ED8                    	mov 	ds, ax
    13 00000005 B8[0000]                	mov 	ax, stack
    14 00000008 8ED0                    	mov 	ss, ax
    15 0000000A BC[0002]                	mov 	sp, stacktop
    16                                  
    17                                  ; salva modo atual de video (vendo como esta o modo de video da maquina)
    18 0000000D B40F                    	mov  	ah, 0Fh
    19 0000000F CD10                    	int  	10h
    20 00000011 A2[0100]                	mov  	[modo_anterior], al   
    21                                  
    22                                  ; altera modo de video para grafico 640x480 16 cores
    23 00000014 B012                    	mov     al, 12h
    24 00000016 B400                    	mov     ah, 0
    25 00000018 CD10                    	int     10h
    26                                  
    27                                  ; A partir daqui codigo desenvolvido pela gente
    28                                  desenha_ui:
    29                                  	; primeiro retangulo
    30 0000001A C606[0000]0F            	mov 	byte[cor], branco_intenso
    31 0000001F B80A00                  	mov 	ax, 10
    32 00000022 50                      	push 	ax
    33 00000023 B80A00                  	mov 	ax, 10
    34 00000026 50                      	push 	ax
    35 00000027 B87602                  	mov 	ax, 630
    36 0000002A 50                      	push 	ax
    37 0000002B B80A00                  	mov 	ax, 10
    38 0000002E 50                      	push 	ax
    39 0000002F E86008                  	call 	line
    40                                  
    41 00000032 C606[0000]0F            	mov 	byte[cor], branco_intenso
    42 00000037 B87602                  	mov 	ax, 630
    43 0000003A 50                      	push 	ax
    44 0000003B B80A00                  	mov 	ax, 10
    45 0000003E 50                      	push 	ax
    46 0000003F B87602                  	mov 	ax, 630
    47 00000042 50                      	push 	ax
    48 00000043 B84100                  	mov 	ax, 65
    49 00000046 50                      	push 	ax
    50 00000047 E84808                  	call 	line
    51                                  
    52 0000004A C606[0000]0F            	mov byte[cor], branco_intenso
    53 0000004F B80A00                  	mov 	ax, 10
    54 00000052 50                      	push 	ax
    55 00000053 B84100                  	mov 	ax, 65
    56 00000056 50                      	push 	ax
    57 00000057 B87602                  	mov 	ax, 630
    58 0000005A 50                      	push 	ax
    59 0000005B B84100                  	mov 	ax, 65
    60 0000005E 50                      	push 	ax
    61 0000005F E83008                  	call 	line
    62                                  
    63 00000062 C606[0000]0F            	mov 	byte[cor], branco_intenso
    64 00000067 B80A00                  	mov 	ax, 10
    65 0000006A 50                      	push 	ax
    66 0000006B B80A00                  	mov 	ax, 10
    67 0000006E 50                      	push 	ax
    68 0000006F B80A00                  	mov 	ax, 10
    69 00000072 50                      	push 	ax
    70 00000073 B84100                  	mov 	ax, 65
    71 00000076 50                      	push 	ax
    72 00000077 E81808                  	call 	line
    73                                  
    74                                  
    75                                  	; segundo retangulo
    76 0000007A C606[0000]0F            	mov 	byte[cor], branco_intenso
    77 0000007F B80A00                  	mov 	ax, 10
    78 00000082 50                      	push 	ax
    79 00000083 B84B00                  	mov 	ax, 75
    80 00000086 50                      	push 	ax
    81 00000087 B87602                  	mov 	ax, 630
    82 0000008A 50                      	push 	ax
    83 0000008B B84B00                  	mov 	ax, 75
    84 0000008E 50                      	push 	ax
    85 0000008F E80008                  	call 	line
    86                                  
    87 00000092 C606[0000]0F            	mov 	byte[cor], branco_intenso
    88 00000097 B87602                  	mov 	ax, 630
    89 0000009A 50                      	push 	ax
    90 0000009B B84B00                  	mov 	ax, 75
    91 0000009E 50                      	push 	ax
    92 0000009F B87602                  	mov 	ax, 630
    93 000000A2 50                      	push 	ax
    94 000000A3 B88200                  	mov 	ax, 130
    95 000000A6 50                      	push 	ax
    96 000000A7 E8E807                  	call 	line
    97                                  
    98 000000AA C606[0000]0F            	mov 	byte[cor], branco_intenso
    99 000000AF B87602                  	mov 	ax, 630
   100 000000B2 50                      	push 	ax
   101 000000B3 B88200                  	mov 	ax, 130
   102 000000B6 50                      	push 	ax
   103 000000B7 B80A00                  	mov 	ax, 10
   104 000000BA 50                      	push 	ax
   105 000000BB B88200                  	mov 	ax, 130
   106 000000BE 50                      	push 	ax
   107 000000BF E8D007                  	call 	line
   108                                  
   109 000000C2 C606[0000]0F            	mov 	byte[cor], branco_intenso
   110 000000C7 B80A00                  	mov 	ax, 10
   111 000000CA 50                      	push 	ax
   112 000000CB B88200                  	mov 	ax, 130
   113 000000CE 50                      	push 	ax
   114 000000CF B80A00                  	mov 	ax, 10
   115 000000D2 50                      	push 	ax
   116 000000D3 B84B00                  	mov 	ax, 75
   117 000000D6 50                      	push 	ax
   118 000000D7 E8B807                  	call 	line
   119                                  
   120                                  
   121                                  	; jogo da velha
   122                                  	; horizontal
   123 000000DA C606[0000]0F            	mov 	byte[cor], branco_intenso
   124 000000DF B89B00                  	mov 	ax, 155
   125 000000E2 50                      	push 	ax
   126 000000E3 B8FA00                  	mov 	ax, 250
   127 000000E6 50                      	push 	ax
   128 000000E7 B8E501                  	mov 	ax, 485
   129 000000EA 50                      	push 	ax
   130 000000EB B8FA00                  	mov 	ax, 250
   131 000000EE 50                      	push 	ax
   132 000000EF E8A007                  	call 	line
   133                                  
   134 000000F2 C606[0000]0F            	mov 	byte[cor], branco_intenso
   135 000000F7 B89B00                  	mov 	ax, 155
   136 000000FA 50                      	push 	ax
   137 000000FB B86801                  	mov 	ax, 360
   138 000000FE 50                      	push 	ax
   139 000000FF B8E501                  	mov 	ax, 485
   140 00000102 50                      	push 	ax
   141 00000103 B86801                  	mov 	ax, 360
   142 00000106 50                      	push 	ax
   143 00000107 E88807                  	call 	line
   144                                  
   145                                  	; vertical
   146 0000010A C606[0000]0F            	mov 	byte[cor], branco_intenso
   147 0000010F B80901                  	mov 	ax, 265
   148 00000112 50                      	push 	ax
   149 00000113 B88C00                  	mov 	ax, 140
   150 00000116 50                      	push 	ax
   151 00000117 B80901                  	mov 	ax, 265
   152 0000011A 50                      	push 	ax
   153 0000011B B8D601                  	mov 	ax, 470
   154 0000011E 50                      	push 	ax
   155 0000011F E87007                  	call 	line
   156                                  
   157 00000122 C606[0000]0F            	mov 	byte[cor], branco_intenso
   158 00000127 B87701                  	mov 	ax, 375
   159 0000012A 50                      	push 	ax
   160 0000012B B88C00                  	mov 	ax, 140
   161 0000012E 50                      	push 	ax
   162 0000012F B87701                  	mov 	ax, 375
   163 00000132 50                      	push 	ax
   164 00000133 B8D601                  	mov 	ax, 470
   165 00000136 50                      	push 	ax
   166 00000137 E85807                  	call 	line
   167                                  
   168                                  le_novo_comando:
   169 0000013A C606[7000]00            	mov	byte [novo_comando], 0
   170 0000013F C606[7100]00            	mov	byte [novo_comando + 1], 0
   171 00000144 C606[7200]00            	mov	byte [novo_comando + 2], 0
   172                                  	
   173 00000149 BB0000                  	mov	bx, 0
   174                                  loop_le_novo_comando:
   175 0000014C B401                    	mov 	ah, 1
   176 0000014E CD21                    	int 	21h
   177                                  
   178 00000150 3C0D                    	cmp	al, 0Dh
   179 00000152 742A                    	je	leu_line_feed
   180                                  	
   181 00000154 3C08                    	cmp	al, 08h
   182 00000156 7403                    	je	leu_backspace
   183 00000158 E91500                  	jmp	nao_leu_backspace
   184                                  
   185                                  leu_backspace:
   186 0000015B 81FB0000                	cmp	bx, 0
   187 0000015F 74EB                    	je	loop_le_novo_comando
   188                                  
   189 00000161 81FB0300                	cmp	bx, 3
   190 00000165 7D05                    	jge	buffer_excedido
   191                                  
   192 00000167 C687[7000]00            	mov	byte [novo_comando + bx], 0
   193                                  	
   194                                  buffer_excedido:
   195 0000016C 4B                      	dec	bx
   196 0000016D E9DCFF                  	jmp	loop_le_novo_comando
   197                                  
   198                                  nao_leu_backspace:
   199 00000170 81FB0300                	cmp	bx, 3
   200 00000174 7D1D                    	jge	excedeu_tamanho_comando
   201                                  	
   202 00000176 8887[7000]              	mov	byte [novo_comando + bx], al
   203 0000017A 43                      	inc	bx
   204 0000017B E9CEFF                  	jmp 	loop_le_novo_comando
   205                                  
   206                                  leu_line_feed:
   207 0000017E 81FB0000                	cmp	bx, 0
   208 00000182 74C8                    	je	loop_le_novo_comando
   209                                  
   210 00000184 81FB0300                	cmp	bx, 3
   211 00000188 7F03                    	jg	apertou_enter_com_comando_muito_grande
   212                                  
   213 0000018A E90A00                  	jmp	processa_novo_comando
   214                                  
   215                                  apertou_enter_com_comando_muito_grande:
   216 0000018D E82200                  	call 	imprime_comando_invalido
   217 00000190 E9A7FF                  	jmp 	le_novo_comando
   218                                  
   219                                  excedeu_tamanho_comando:
   220 00000193 43                      	inc	bx
   221 00000194 E9B5FF                  	jmp 	loop_le_novo_comando
   222                                  
   223                                  processa_novo_comando:
   224                                  	; cmp 	al, 'c'
   225                                  	; je 	novo_jogo
   226 00000197 803E[7000]73            	cmp 	byte [novo_comando], 's'
   227 0000019C 7439                    	je 	sair
   228 0000019E 803E[7000]58            	cmp 	byte [novo_comando], 'X'
   229 000001A3 7444                    	je 	processa_jogada_X
   230 000001A5 803E[7000]43            	cmp 	byte [novo_comando], 'C'
   231 000001AA 743A                    	je 	processa_jogada_C_intermediario
   232 000001AC E80300                  	call 	imprime_comando_invalido
   233 000001AF E988FF                  	jmp 	le_novo_comando
   234                                  
   235                                  
   236                                  imprime_comando_invalido:
   237 000001B2 B91000                      	mov     cx, 16			;n�mero de caracteres
   238 000001B5 BB0000                      	mov     bx, 0
   239 000001B8 B61B                        	mov     dh, 27			;linha 0-29
   240 000001BA B220                        	mov     dl, 32			;coluna 0-79
   241 000001BC C606[0000]04            	mov	byte [cor], vermelho
   242                                  
   243                                  loop_imprime_comando_invalido:
   244 000001C1 E8D704                  	call	cursor
   245 000001C4 8A87[1800]                  	mov     al, [bx + mensagem_comando_invalido]
   246 000001C8 E8E704                  	call	caracter
   247 000001CB 43                          	inc     bx			;proximo caracter
   248 000001CC FEC2                    	inc	dl			;avanca a coluna
   249 000001CE E2F1                        	loop    loop_imprime_comando_invalido
   250                                  
   251 000001D0 E81D01                  	call	volta_cursor_para_0x0_e_apaga_input_anterior
   252 000001D3 C3                      	ret
   253                                  
   254                                  le_novo_comando_intermediario:
   255 000001D4 E963FF                  	jmp le_novo_comando
   256                                  
   257                                  ; novo_jogo:
   258                                  
   259                                  sair:
   260 000001D7 B408                    	mov    	ah, 08h
   261 000001D9 CD21                    	int     21h
   262 000001DB B400                    	mov  	ah, 0   					; set video mode
   263 000001DD A0[0100]                	mov  	al, [modo_anterior]   				; modo anterior
   264 000001E0 CD10                    	int  	10h
   265                                  
   266 000001E2 B44C                    	mov 	ah, 4ch
   267 000001E4 CD21                    	int 	21h
   268                                  
   269                                  processa_jogada_C_intermediario:
   270 000001E6 E95500                  	jmp	processa_jogada_C
   271                                  
   272                                  processa_jogada_X:
   273 000001E9 803E[8900]00            	cmp	byte [estado_partida], 0
   274 000001EE 75E4                    	jne	le_novo_comando_intermediario
   275                                  
   276 000001F0 E8D503                  	call	calcula_posicao_i_j
   277 000001F3 E8B603                  	call	calcula_indice_array_jogadas
   278 000001F6 BE0000                  	mov	si, 0
   279 000001F9 8B36[8600]              	mov	si, word [p]
   280 000001FD 80BC[7B00]00            	cmp	byte [array_posicoes_jogadas + si], 0
   281 00000202 750A                    	jne	jogada_x_invalida
   282 00000204 803E[8800]01            	cmp	byte [ultima_jogada], 1
   283 00000209 7403                    	je	jogada_x_invalida
   284 0000020B E90600                  	jmp	jogada_x_valida
   285                                  
   286                                  jogada_x_invalida:
   287 0000020E E88200                  	call 	imprime_jogada_invalida
   288 00000211 E9C0FF                  	jmp 	le_novo_comando_intermediario
   289                                  
   290                                  jogada_x_valida:
   291 00000214 C606[8800]01            	mov	byte [ultima_jogada], 1
   292 00000219 BE0000                  	mov	si, 0
   293 0000021C 8B36[8600]              	mov	si, word [p]
   294 00000220 C684[7B00]01            	mov	byte [array_posicoes_jogadas + si], 1
   295                                  
   296 00000225 B80000                  	mov	ax, 0
   297 00000228 A0[8400]                	mov	al, [i]
   298 0000022B BB0000                  	mov	bx, 0
   299 0000022E 8A1E[8500]              	mov	bl, [j]
   300 00000232 E8F203                  	call 	desenha_x
   301 00000235 E87D00                  	call	imprime_jogada
   302 00000238 E8D400                  	call	atualiza_estado_da_partida
   303 0000023B E996FF                  	jmp 	le_novo_comando_intermediario
   304                                  
   305                                  processa_jogada_C:
   306 0000023E 803E[8900]00            	cmp	byte [estado_partida], 0
   307 00000243 758F                    	jne	le_novo_comando_intermediario
   308                                  
   309 00000245 E88003                  	call	calcula_posicao_i_j
   310 00000248 E86103                  	call	calcula_indice_array_jogadas
   311 0000024B BE0000                  	mov	si, 0
   312 0000024E 8B36[8600]              	mov	si, word [p]
   313 00000252 80BC[7B00]00            	cmp	byte [array_posicoes_jogadas + si], 0
   314 00000257 750A                    	jne	jogada_circulo_invalida
   315 00000259 803E[8800]02            	cmp	byte [ultima_jogada], 2
   316 0000025E 7403                    	je	jogada_circulo_invalida
   317 00000260 E90600                  	jmp	jogada_circulo_valida
   318                                  
   319                                  jogada_circulo_invalida:
   320 00000263 E82D00                  	call 	imprime_jogada_invalida
   321 00000266 E96BFF                  	jmp 	le_novo_comando_intermediario
   322                                  
   323                                  jogada_circulo_valida:
   324 00000269 C606[8800]02            	mov	byte [ultima_jogada], 2
   325 0000026E BE0000                  	mov	si, 0
   326 00000271 8B36[8600]              	mov	si, word [p]
   327 00000275 C684[7B00]02            	mov	byte [array_posicoes_jogadas + si], 2
   328                                  
   329 0000027A B80000                  	mov	ax, 0
   330 0000027D A0[8400]                	mov	al, [i]
   331 00000280 BB0000                  	mov	bx, 0
   332 00000283 8A1E[8500]              	mov	bl, [j]
   333 00000287 E87703                  	call 	desenha_circulo
   334 0000028A E82800                  	call	imprime_jogada
   335 0000028D E87F00                  	call	atualiza_estado_da_partida
   336 00000290 E941FF                  	jmp 	le_novo_comando_intermediario
   337                                  
   338                                  imprime_jogada_invalida:
   339 00000293 B91000                      	mov     cx, 16			;n�mero de caracteres
   340 00000296 BB0000                      	mov     bx, 0
   341 00000299 B61B                        	mov     dh, 27			;linha 0-29
   342 0000029B B220                        	mov     dl, 32			;coluna 0-79
   343 0000029D C606[0000]04            	mov	byte [cor], vermelho
   344                                  
   345                                  loop_imprime_jogada_invalida:
   346 000002A2 E8F603                  	call	cursor
   347 000002A5 8A87[2800]                  	mov     al, [bx + mensagem_jogada_invalida]
   348 000002A9 E80604                  	call	caracter
   349 000002AC 43                          	inc     bx			;proximo caracter
   350 000002AD FEC2                    	inc	dl			;avanca a coluna
   351 000002AF E2F1                        	loop    loop_imprime_jogada_invalida
   352                                  
   353 000002B1 E83C00                  	call	volta_cursor_para_0x0_e_apaga_input_anterior
   354 000002B4 C3                      	ret
   355                                  
   356                                  imprime_jogada:
   357 000002B5 B90300                      	mov     cx, 3			;n�mero de caracteres
   358 000002B8 BB0000                      	mov     bx, 0
   359 000002BB B617                        	mov     dh, 23			;linha 0-29
   360 000002BD B226                        	mov     dl, 38			;coluna 0-79
   361 000002BF 803E[8800]01            	cmp	byte [ultima_jogada], 1
   362 000002C4 7407                    	je	coloca_na_cor_do_x
   363 000002C6 803E[8800]02            	cmp	byte [ultima_jogada], 2
   364 000002CB 7408                    	je	coloca_na_cor_do_circulo
   365                                  
   366                                  coloca_na_cor_do_x:
   367 000002CD C606[0000]02            	mov	byte [cor], verde
   368 000002D2 E90800                  	jmp	loop_imprime_jogada
   369                                  
   370                                  coloca_na_cor_do_circulo:
   371 000002D5 C606[0000]05            	mov	byte [cor], magenta
   372 000002DA E90000                  	jmp	loop_imprime_jogada
   373                                  
   374                                  loop_imprime_jogada:
   375 000002DD E8BB03                  	call	cursor
   376 000002E0 8A87[7000]                  	mov     al, [bx + novo_comando]
   377 000002E4 E8CB03                  	call	caracter
   378 000002E7 43                          	inc     bx			;proximo caracter
   379 000002E8 FEC2                    	inc	dl			;avanca a coluna
   380 000002EA E2F1                        	loop    loop_imprime_jogada
   381                                  
   382 000002EC E80100                  	call	volta_cursor_para_0x0_e_apaga_input_anterior
   383 000002EF C3                      	ret
   384                                  
   385                                  volta_cursor_para_0x0_e_apaga_input_anterior:
   386 000002F0 B90300                      	mov     cx, 3			;n�mero de caracteres
   387 000002F3 BB0000                      	mov     bx, 0
   388 000002F6 B600                        	mov     dh, 0			;linha 0-29
   389 000002F8 B200                        	mov     dl, 0			;coluna 0-79
   390 000002FA C606[0000]00            	mov	byte [cor], preto
   391                                  
   392                                  loop_apaga_input:
   393 000002FF E89903                  	call	cursor
   394 00000302 8A87[6D00]                  	mov     al, [bx + string_vazia]
   395 00000306 E8A903                  	call	caracter
   396 00000309 43                          	inc     bx			;proximo caracter
   397 0000030A FEC2                    	inc	dl			;avanca a coluna
   398 0000030C E2F1                        	loop    loop_apaga_input
   399                                  
   400 0000030E C3                      	ret
   401                                  
   402                                  atualiza_estado_da_partida:
   403 0000030F 50                      	push 	ax
   404 00000310 51                      	push	cx
   405                                  
   406                                  	; verifica horizontalmente
   407 00000311 A0[7E00]                	mov	al, byte [array_posicoes_jogadas + 3]
   408 00000314 3C00                    	cmp	al, 0
   409 00000316 742A                    	je	partida_nao_acabou_1
   410 00000318 3A06[7B00]              	cmp 	al, byte [array_posicoes_jogadas + 0]
   411 0000031C 7524                    	jne	partida_nao_acabou_1
   412 0000031E 3A06[8100]              	cmp	al, byte [array_posicoes_jogadas + 6]
   413 00000322 751E                    	jne	partida_nao_acabou_1
   414 00000324 C706[7300]9B00          	mov	word [x1], 155
   415 0000032A C706[7500]9F01          	mov	word [y1], 415
   416 00000330 C706[7700]E501          	mov	word [x2], 485
   417 00000336 C706[7900]9F01          	mov	word [y2], 415
   418 0000033C E85202                  	call	desenha_linha_de_vitoria 
   419 0000033F E96E01                  	jmp	partida_acabou_em_vitoria
   420                                  
   421                                  partida_nao_acabou_1:
   422 00000342 A0[7F00]                	mov	al, byte [array_posicoes_jogadas + 4]
   423 00000345 3C00                    	cmp	al, 0
   424 00000347 742A                    	je	partida_nao_acabou_2
   425 00000349 3A06[7C00]              	cmp 	al, byte [array_posicoes_jogadas + 1]
   426 0000034D 7524                    	jne	partida_nao_acabou_2
   427 0000034F 3A06[8200]              	cmp	al, byte [array_posicoes_jogadas + 7]
   428 00000353 751E                    	jne	partida_nao_acabou_2
   429 00000355 C706[7300]9B00          	mov	word [x1], 155
   430 0000035B C706[7500]3101          	mov	word [y1], 305
   431 00000361 C706[7700]E501          	mov	word [x2], 485
   432 00000367 C706[7900]3101          	mov	word [y2], 305
   433 0000036D E82102                  	call	desenha_linha_de_vitoria 
   434 00000370 E93D01                  	jmp	partida_acabou_em_vitoria
   435                                  
   436                                  partida_nao_acabou_2:
   437 00000373 A0[8000]                	mov	al, byte [array_posicoes_jogadas + 5]
   438 00000376 3C00                    	cmp	al, 0
   439 00000378 742A                    	je	partida_nao_acabou_3
   440 0000037A 3A06[7D00]              	cmp 	al, byte [array_posicoes_jogadas + 2]
   441 0000037E 7524                    	jne	partida_nao_acabou_3
   442 00000380 3A06[8300]              	cmp	al, byte [array_posicoes_jogadas + 8]
   443 00000384 751E                    	jne	partida_nao_acabou_3
   444 00000386 C706[7300]9B00          	mov	word [x1], 155
   445 0000038C C706[7500]C300          	mov	word [y1], 195
   446 00000392 C706[7700]E501          	mov	word [x2], 485
   447 00000398 C706[7900]C300          	mov	word [y2], 195
   448 0000039E E8F001                  	call	desenha_linha_de_vitoria 
   449 000003A1 E90C01                  	jmp	partida_acabou_em_vitoria
   450                                  
   451                                  ; verifica verticalmente
   452                                  partida_nao_acabou_3:
   453 000003A4 A0[7C00]                	mov	al, byte [array_posicoes_jogadas + 1]
   454 000003A7 3C00                    	cmp	al, 0
   455 000003A9 742A                    	je	partida_nao_acabou_4
   456 000003AB 3A06[7B00]              	cmp 	al, byte [array_posicoes_jogadas + 0]
   457 000003AF 7524                    	jne	partida_nao_acabou_4
   458 000003B1 3A06[7D00]              	cmp	al, byte [array_posicoes_jogadas + 2]
   459 000003B5 751E                    	jne	partida_nao_acabou_4
   460 000003B7 C706[7300]D200          	mov	word [x1], 210
   461 000003BD C706[7500]8C00          	mov	word [y1], 140
   462 000003C3 C706[7700]D200          	mov	word [x2], 210
   463 000003C9 C706[7900]D601          	mov	word [y2], 470
   464 000003CF E8BF01                  	call	desenha_linha_de_vitoria
   465 000003D2 E9DB00                  	jmp	partida_acabou_em_vitoria
   466                                  
   467                                  partida_nao_acabou_4:
   468 000003D5 A0[7F00]                	mov	al, byte [array_posicoes_jogadas + 4]
   469 000003D8 3C00                    	cmp	al, 0
   470 000003DA 742A                    	je	partida_nao_acabou_5
   471 000003DC 3A06[7E00]              	cmp 	al, byte [array_posicoes_jogadas + 3]
   472 000003E0 7524                    	jne	partida_nao_acabou_5
   473 000003E2 3A06[8000]              	cmp	al, byte [array_posicoes_jogadas + 5]
   474 000003E6 751E                    	jne	partida_nao_acabou_5
   475 000003E8 C706[7300]4001          	mov	word [x1], 320
   476 000003EE C706[7500]8C00          	mov	word [y1], 140
   477 000003F4 C706[7700]4001          	mov	word [x2], 320
   478 000003FA C706[7900]D601          	mov	word [y2], 470
   479 00000400 E88E01                  	call	desenha_linha_de_vitoria
   480 00000403 E9AA00                  	jmp	partida_acabou_em_vitoria
   481                                  
   482                                  partida_nao_acabou_5:
   483 00000406 A0[8200]                	mov	al, byte [array_posicoes_jogadas + 7]
   484 00000409 3C00                    	cmp	al, 0
   485 0000040B 742A                    	je	partida_nao_acabou_6
   486 0000040D 3A06[8100]              	cmp 	al, byte [array_posicoes_jogadas + 6]
   487 00000411 7524                    	jne	partida_nao_acabou_6
   488 00000413 3A06[8300]              	cmp	al, byte [array_posicoes_jogadas + 8]
   489 00000417 751E                    	jne	partida_nao_acabou_6
   490 00000419 C706[7300]AE01          	mov	word [x1], 430
   491 0000041F C706[7500]8C00          	mov	word [y1], 140
   492 00000425 C706[7700]AE01          	mov	word [x2], 430
   493 0000042B C706[7900]D601          	mov	word [y2], 470
   494 00000431 E85D01                  	call	desenha_linha_de_vitoria
   495 00000434 E97900                  	jmp	partida_acabou_em_vitoria
   496                                  
   497                                  ; verifica diagonalmente
   498                                  partida_nao_acabou_6:
   499 00000437 A0[7F00]                	mov	al, byte [array_posicoes_jogadas + 4]
   500 0000043A 3C00                    	cmp	al, 0
   501 0000043C 742A                    	je	partida_nao_acabou_7
   502 0000043E 3A06[7B00]              	cmp 	al, byte [array_posicoes_jogadas + 0]
   503 00000442 7524                    	jne	partida_nao_acabou_7
   504 00000444 3A06[8300]              	cmp	al, byte [array_posicoes_jogadas + 8]
   505 00000448 751E                    	jne	partida_nao_acabou_7
   506 0000044A C706[7300]9B00          	mov	word [x1], 155
   507 00000450 C706[7500]D601          	mov	word [y1], 470
   508 00000456 C706[7700]E501          	mov	word [x2], 485
   509 0000045C C706[7900]8C00          	mov	word [y2], 140
   510 00000462 E82C01                  	call	desenha_linha_de_vitoria
   511 00000465 E94800                  	jmp	partida_acabou_em_vitoria
   512                                  
   513                                  partida_nao_acabou_7:
   514 00000468 A0[7F00]                	mov	al, byte [array_posicoes_jogadas + 4]
   515 0000046B 3C00                    	cmp	al, 0
   516 0000046D 742A                    	je	partida_nao_acabou_8
   517 0000046F 3A06[7D00]              	cmp 	al, byte [array_posicoes_jogadas + 2]
   518 00000473 7524                    	jne	partida_nao_acabou_8
   519 00000475 3A06[8100]              	cmp	al, byte [array_posicoes_jogadas + 6]
   520 00000479 751E                    	jne	partida_nao_acabou_8
   521 0000047B C706[7300]9B00          	mov	word [x1], 155
   522 00000481 C706[7500]8C00          	mov	word [y1], 140
   523 00000487 C706[7700]E501          	mov	word [x2], 485
   524 0000048D C706[7900]D601          	mov	word [y2], 470
   525 00000493 E8FB00                  	call	desenha_linha_de_vitoria
   526 00000496 E91700                  	jmp	partida_acabou_em_vitoria
   527                                  
   528                                  partida_nao_acabou_8:
   529 00000499 B90900                  	mov	cx, 9
   530                                  
   531                                  partida_nao_acabou_8_loop:
   532 0000049C 89CE                    	mov	si, cx
   533 0000049E 80BC[7B00]00            	cmp	byte [array_posicoes_jogadas + si], 0
   534 000004A3 7405                    	je	ainda_tem_posicoes_nao_jogadas
   535 000004A5 E2F5                    	loop	partida_nao_acabou_8_loop
   536                                  
   537 000004A7 E91200                  	jmp partida_acabou_em_empate
   538                                  
   539                                  ainda_tem_posicoes_nao_jogadas:
   540 000004AA E90000                  	jmp partida_nao_acabou_9
   541                                  
   542                                  partida_nao_acabou_9:
   543 000004AD 59                      	pop	cx
   544 000004AE 58                      	pop 	ax
   545 000004AF C3                      	ret
   546                                  
   547                                  partida_acabou_em_vitoria:
   548 000004B0 A0[8800]                	mov	al, byte [ultima_jogada]
   549 000004B3 A2[8900]                	mov	byte [estado_partida], al
   550 000004B6 E80E00                  	call	imprime_partida_acabou
   551 000004B9 59                      	pop	cx
   552 000004BA 58                      	pop 	ax
   553 000004BB C3                      	ret
   554                                  
   555                                  partida_acabou_em_empate:
   556 000004BC C606[8900]03            	mov	byte [estado_partida], 3
   557 000004C1 E80300                  	call	imprime_partida_acabou
   558 000004C4 59                      	pop	cx
   559 000004C5 58                      	pop 	ax
   560 000004C6 C3                      	ret
   561                                  
   562                                  imprime_partida_acabou:
   563 000004C7 803E[8900]01            	cmp	byte [estado_partida], 1
   564 000004CC 740A                    	je	configura_para_x
   565 000004CE 803E[8900]02            	cmp	byte [estado_partida], 2
   566 000004D3 7415                    	je	configura_para_circulo
   567 000004D5 E92400                  	jmp	configura_para_empate
   568                                  
   569                                  configura_para_x:
   570 000004D8 B91000                      	mov     cx, 16			;n�mero de caracteres
   571 000004DB BB0000                      	mov     bx, 0
   572 000004DE B61B                        	mov     dh, 27			;linha 0-29
   573 000004E0 B21A                        	mov     dl, 26			;coluna 0-79
   574 000004E2 C606[0000]02            	mov	byte [cor], verde
   575 000004E7 E92400                  	jmp 	loop_imprime_partida_acabou
   576                                  
   577                                  configura_para_circulo:
   578 000004EA B91000                      	mov     cx, 16			;n�mero de caracteres
   579 000004ED BB0000                      	mov     bx, 0
   580 000004F0 B61B                        	mov     dh, 27			;linha 0-29
   581 000004F2 B217                        	mov     dl, 23			;coluna 0-79
   582 000004F4 C606[0000]05            	mov	byte [cor], magenta
   583 000004F9 E91200                  	jmp 	loop_imprime_partida_acabou
   584                                  
   585                                  configura_para_empate:
   586 000004FC B91000                      	mov     cx, 16			;n�mero de caracteres
   587 000004FF BB0000                      	mov     bx, 0
   588 00000502 B61B                        	mov     dh, 27			;linha 0-29
   589 00000504 B21B                        	mov     dl, 27			;coluna 0-79
   590 00000506 C606[0000]04            	mov	byte [cor], vermelho
   591 0000050B E90000                  	jmp 	loop_imprime_partida_acabou
   592                                  
   593                                  loop_imprime_partida_acabou:
   594 0000050E E88A01                  	call	cursor
   595 00000511 8A87[3800]                  	mov     al, [bx + mensgem_partida_acabou]
   596 00000515 E89A01                  	call	caracter
   597 00000518 43                          	inc     bx			;proximo caracter
   598 00000519 FEC2                    	inc	dl			;avanca a coluna
   599 0000051B E2F1                        	loop    loop_imprime_partida_acabou
   600                                  
   601 0000051D 803E[8900]01            	cmp	byte [estado_partida], 1
   602 00000522 740A                    	je	chama_imprime_x_ganhou
   603 00000524 803E[8900]02            	cmp	byte [estado_partida], 2
   604 00000529 7407                    	je	chama_imprime_circulo_ganhou
   605 0000052B E90800                  	jmp	chama_imprime_empate
   606                                  
   607                                  chama_imprime_x_ganhou:
   608 0000052E E80900                  	call 	imprime_x_ganhou
   609 00000531 C3                      	ret
   610                                  
   611                                  chama_imprime_circulo_ganhou:
   612 00000532 E82200                  	call	imprime_circulo_ganhou
   613 00000535 C3                      	ret
   614                                  
   615                                  chama_imprime_empate:
   616 00000536 E83B00                  	call	imprime_partida_empatou
   617 00000539 C3                      	ret
   618                                  
   619                                  imprime_x_ganhou:
   620 0000053A B90B00                      	mov     cx, 11			;n�mero de caracteres
   621 0000053D BB0000                      	mov     bx, 0
   622 00000540 B61B                        	mov     dh, 27			;linha 0-29
   623 00000542 B22A                        	mov     dl, 42			;coluna 0-79
   624                                  
   625                                  loop_imprime_x_ganhou:
   626 00000544 E85401                  	call	cursor
   627 00000547 8A87[6200]                  	mov     al, [bx + mensagem_x_venceu]
   628 0000054B E86401                  	call	caracter
   629 0000054E 43                          	inc     bx			;proximo caracter
   630 0000054F FEC2                    	inc	dl			;avanca a coluna
   631 00000551 E2F1                        	loop    loop_imprime_x_ganhou
   632                                  
   633 00000553 E89AFD                  	call	volta_cursor_para_0x0_e_apaga_input_anterior
   634 00000556 C3                      	ret
   635                                  
   636                                  imprime_circulo_ganhou:
   637 00000557 B91100                      	mov     cx, 17			;n�mero de caracteres
   638 0000055A BB0000                      	mov     bx, 0
   639 0000055D B61B                        	mov     dh, 27			;linha 0-29
   640 0000055F B227                        	mov     dl, 39			;coluna 0-79
   641                                  
   642                                  loop_imprime_circulo_ganhou:
   643 00000561 E83701                  	call	cursor
   644 00000564 8A87[4800]                  	mov     al, [bx + mensagem_circulo_venceu]
   645 00000568 E84701                  	call	caracter
   646 0000056B 43                          	inc     bx			;proximo caracter
   647 0000056C FEC2                    	inc	dl			;avanca a coluna
   648 0000056E E2F1                        	loop    loop_imprime_circulo_ganhou
   649                                  
   650 00000570 E87DFD                  	call	volta_cursor_para_0x0_e_apaga_input_anterior
   651 00000573 C3                      	ret
   652                                  
   653                                  imprime_partida_empatou:
   654 00000574 B90900                      	mov     cx, 9			;n�mero de caracteres
   655 00000577 BB0000                      	mov     bx, 0
   656 0000057A B61B                        	mov     dh, 27			;linha 0-29
   657 0000057C B22B                        	mov     dl, 43			;coluna 0-79
   658                                  
   659                                  loop_imprime_empate:
   660 0000057E E81A01                  	call	cursor
   661 00000581 8A87[5900]                  	mov     al, [bx + mensagem_empate]
   662 00000585 E82A01                  	call	caracter
   663 00000588 43                          	inc     bx			;proximo caracter
   664 00000589 FEC2                    	inc	dl			;avanca a coluna
   665 0000058B E2F1                        	loop    loop_imprime_empate
   666                                  
   667 0000058D E860FD                  	call	volta_cursor_para_0x0_e_apaga_input_anterior
   668 00000590 C3                      	ret
   669                                  
   670                                  desenha_linha_de_vitoria:
   671 00000591 50                      	push	ax
   672 00000592 C606[0000]04            	mov	byte [cor], vermelho
   673 00000597 A1[7300]                	mov	ax, [x1]
   674 0000059A 50                      	push	ax
   675 0000059B A1[7500]                	mov	ax, [y1]
   676 0000059E 50                      	push	ax
   677 0000059F A1[7700]                	mov	ax, [x2]
   678 000005A2 50                      	push	ax
   679 000005A3 A1[7900]                	mov	ax, [y2]
   680 000005A6 50                      	push	ax
   681 000005A7 E8E802                  	call 	line
   682 000005AA 58                      	pop	ax
   683 000005AB C3                      	ret
   684                                  
   685                                  ; p = (i - 1)*3 + j - 1
   686                                  calcula_indice_array_jogadas:
   687 000005AC 50                      	push 	ax
   688 000005AD 53                      	push	bx
   689                                  
   690 000005AE B80000                  	mov	ax, 0
   691 000005B1 A0[8400]                	mov	al, [i]
   692 000005B4 FEC8                    	dec	al
   693 000005B6 B303                    	mov	bl, 3
   694 000005B8 F6E3                    	mul	bl
   695 000005BA 8A1E[8500]              	mov	bl, [j]
   696 000005BE 00D8                    	add	al, bl
   697 000005C0 FEC8                    	dec	al
   698 000005C2 A3[8600]                	mov	word [p], ax
   699                                  	
   700 000005C5 5B                      	pop 	bx
   701 000005C6 58                      	pop	ax
   702 000005C7 C3                      	ret
   703                                  
   704                                  calcula_posicao_i_j:
   705 000005C8 803E[7100]31            	cmp	byte [novo_comando + 1], '1'
   706 000005CD 722C                    	jb	jogada_invalida
   707 000005CF 803E[7100]33            	cmp	byte [novo_comando + 1], '3'
   708 000005D4 7F25                    	jg	jogada_invalida
   709 000005D6 803E[7200]31            	cmp	byte [novo_comando + 2], '1'
   710 000005DB 721E                    	jb	jogada_invalida
   711 000005DD 803E[7200]33            	cmp	byte [novo_comando + 2], '3'
   712 000005E2 7F17                    	jg	jogada_invalida
   713 000005E4 B80000                  	mov	ax, 0
   714 000005E7 A0[7100]                	mov	al, [novo_comando + 1]
   715 000005EA 2C30                    	sub	al, 30h
   716 000005EC A2[8400]                	mov	byte [i], al
   717 000005EF B80000                  	mov	ax, 0
   718 000005F2 A0[7200]                	mov	al, [novo_comando + 2]
   719 000005F5 2C30                    	sub	al, 30h
   720 000005F7 A2[8500]                	mov	byte [j], al
   721 000005FA C3                      	ret
   722                                  
   723                                  jogada_invalida:
   724 000005FB E895FC                  	call	imprime_jogada_invalida
   725 000005FE E939FB                  	jmp	le_novo_comando
   726                                  
   727                                  desenha_circulo:
   728 00000601 51                      	push 	cx
   729                                  
   730 00000602 B96E00                  	mov	cx, 110
   731                                  
   732 00000605 48                      	dec 	ax
   733 00000606 F7E1                    	mul 	cx
   734 00000608 05D200                  	add 	ax, 210
   735 0000060B 50                      	push	ax
   736                                  
   737 0000060C 89D8                    	mov 	ax, bx
   738 0000060E 48                      	dec 	ax
   739 0000060F F7E1                    	mul 	cx
   740 00000611 89C1                    	mov 	cx, ax
   741 00000613 B89F01                  	mov	ax, 415
   742 00000616 29C8                    	sub	ax, cx
   743 00000618 50                      	push	ax
   744                                  
   745 00000619 B82D00                  	mov	ax, 45
   746 0000061C 50                      	push	ax
   747                                  	
   748 0000061D C606[0000]05            	mov	byte [cor], magenta
   749 00000622 E8D200                  	call	circle
   750                                  
   751 00000625 59                      	pop 	cx
   752                                  
   753 00000626 C3                      	ret
   754                                  
   755                                  desenha_x:
   756 00000627 51                      	push 	cx
   757 00000628 52                      	push 	dx
   758                                  
   759 00000629 B96E00                  	mov	cx, 110
   760                                  
   761 0000062C 48                      	dec 	ax
   762 0000062D F7E1                    	mul 	cx
   763 0000062F 05D200                  	add 	ax, 210
   764 00000632 2D1F00                  	sub	ax, 31
   765 00000635 A3[7300]                	mov	word [x1], ax
   766 00000638 053E00                  	add	ax, 62
   767 0000063B A3[7700]                	mov	word [x2], ax
   768                                  
   769 0000063E 89D8                    	mov 	ax, bx
   770 00000640 48                      	dec 	ax
   771 00000641 F7E1                    	mul 	cx
   772 00000643 89C1                    	mov 	cx, ax
   773 00000645 B89F01                  	mov	ax, 415
   774 00000648 29C8                    	sub	ax, cx
   775 0000064A 2D1F00                  	sub	ax, 31
   776 0000064D A3[7500]                	mov	word [y1], ax
   777 00000650 053E00                  	add	ax, 62
   778 00000653 A3[7900]                	mov	word [y2], ax
   779                                  	
   780 00000656 C606[0000]02            	mov	byte[cor], verde
   781 0000065B A1[7300]                	mov	ax, [x1]
   782 0000065E 50                      	push	ax
   783 0000065F A1[7500]                	mov	ax, [y1]
   784 00000662 50                      	push	ax
   785 00000663 A1[7700]                	mov	ax, [x2]
   786 00000666 50                      	push	ax
   787 00000667 A1[7900]                	mov	ax, [y2]
   788 0000066A 50                      	push	ax
   789 0000066B E82402                  	call 	line
   790                                  
   791 0000066E A1[7500]                	mov 	ax, [y1]
   792 00000671 053E00                  	add	ax, 62
   793 00000674 A3[7500]                	mov	word [y1], ax
   794 00000677 A1[7900]                	mov	ax, [y2]
   795 0000067A 2D3E00                  	sub	ax, 62
   796 0000067D A3[7900]                	mov	word [y2], ax
   797                                  
   798 00000680 C606[0000]02            	mov	byte [cor], verde
   799 00000685 A1[7300]                	mov	ax, [x1]
   800 00000688 50                      	push	ax
   801 00000689 A1[7500]                	mov	ax, [y1]
   802 0000068C 50                      	push	ax
   803 0000068D A1[7700]                	mov	ax, [x2]
   804 00000690 50                      	push	ax
   805 00000691 A1[7900]                	mov	ax, [y2]
   806 00000694 50                      	push	ax
   807 00000695 E8FA01                  	call 	line
   808                                  
   809 00000698 5A                      	pop	dx
   810 00000699 59                      	pop 	cx
   811 0000069A C3                      	ret
   812                                  
   813                                  ;***************************************************************************
   814                                  ;
   815                                  ;   funcao cursor
   816                                  ;
   817                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   818                                  cursor:
   819 0000069B 9C                      	pushf
   820 0000069C 50                      	push 	ax
   821 0000069D 53                      	push 	bx
   822 0000069E 51                      	push	cx
   823 0000069F 52                      	push	dx
   824 000006A0 56                      	push	si
   825 000006A1 57                      	push	di
   826 000006A2 55                      	push	bp
   827 000006A3 B402                    	mov     ah, 2
   828 000006A5 B700                    	mov     bh, 0
   829 000006A7 CD10                    	int     10h
   830 000006A9 5D                      	pop	bp
   831 000006AA 5F                      	pop	di
   832 000006AB 5E                      	pop	si
   833 000006AC 5A                      	pop	dx
   834 000006AD 59                      	pop	cx
   835 000006AE 5B                      	pop	bx
   836 000006AF 58                      	pop	ax
   837 000006B0 9D                      	popf
   838 000006B1 C3                      	ret
   839                                  ;_____________________________________________________________________________
   840                                  ;
   841                                  ;   funcao caracter escrito na posicao do cursor
   842                                  ;
   843                                  ; al= caracter a ser escrito
   844                                  ; cor definida na variavel cor
   845                                  caracter:
   846 000006B2 9C                      	pushf
   847 000006B3 50                      	push 	ax
   848 000006B4 53                      	push 	bx
   849 000006B5 51                      	push	cx
   850 000006B6 52                      	push	dx
   851 000006B7 56                      	push	si
   852 000006B8 57                      	push	di
   853 000006B9 55                      	push	bp
   854 000006BA B409                    	mov     ah, 9
   855 000006BC B700                    	mov     bh, 0
   856 000006BE B90100                  	mov     cx, 1
   857 000006C1 8A1E[0000]              	mov     bl, [cor]
   858 000006C5 CD10                    	int     10h
   859 000006C7 5D                      	pop	bp
   860 000006C8 5F                      	pop	di
   861 000006C9 5E                      	pop	si
   862 000006CA 5A                      	pop	dx
   863 000006CB 59                      	pop	cx
   864 000006CC 5B                      	pop	bx
   865 000006CD 58                      	pop	ax
   866 000006CE 9D                      	popf
   867 000006CF C3                      	ret
   868                                  ;_____________________________________________________________________________
   869                                  ;
   870                                  ;   funcao plot_xy
   871                                  ;
   872                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   873                                  ; cor definida na variavel cor
   874                                  plot_xy:
   875 000006D0 55                      	push	bp
   876 000006D1 89E5                    	mov	bp, sp
   877 000006D3 9C                      	pushf
   878 000006D4 50                      	push 	ax
   879 000006D5 53                      	push 	bx
   880 000006D6 51                      	push	cx
   881 000006D7 52                      	push	dx
   882 000006D8 56                      	push	si
   883 000006D9 57                      	push	di
   884 000006DA B40C                    	mov     ah, 0ch
   885 000006DC A0[0000]                	mov     al, [cor]
   886 000006DF B700                    	mov     bh, 0
   887 000006E1 BADF01                  	mov     dx, 479
   888 000006E4 2B5604                  	sub	dx, [bp + 4]
   889 000006E7 8B4E06                  	mov     cx, [bp + 6]
   890 000006EA CD10                    	int     10h
   891 000006EC 5F                      	pop	di
   892 000006ED 5E                      	pop	si
   893 000006EE 5A                      	pop	dx
   894 000006EF 59                      	pop	cx
   895 000006F0 5B                      	pop	bx
   896 000006F1 58                      	pop	ax
   897 000006F2 9D                      	popf
   898 000006F3 5D                      	pop	bp
   899 000006F4 C20400                  	ret	4
   900                                  
   901                                  ;_____________________________________________________________________________
   902                                  ;    funcao circle
   903                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   904                                  ; cor definida na variavel cor
   905                                  circle:
   906 000006F7 55                      	push 	bp
   907 000006F8 89E5                    	mov	bp, sp
   908 000006FA 9C                      	pushf                        ;coloca os flags na pilha
   909 000006FB 50                      	push 	ax
   910 000006FC 53                      	push 	bx
   911 000006FD 51                      	push	cx
   912 000006FE 52                      	push	dx
   913 000006FF 56                      	push	si
   914 00000700 57                      	push	di
   915                                  	
   916 00000701 8B4608                  	mov	ax, [bp + 8]    ; resgata xc
   917 00000704 8B5E06                  	mov	bx, [bp + 6]    ; resgata yc
   918 00000707 8B4E04                  	mov	cx, [bp + 4]    ; resgata r
   919                                  	
   920 0000070A 89DA                    	mov 	dx, bx	
   921 0000070C 01CA                    	add	dx, cx       ;ponto extremo superior
   922 0000070E 50                      	push    ax			
   923 0000070F 52                      	push	dx
   924 00000710 E8BDFF                  	call 	plot_xy
   925                                  	
   926 00000713 89DA                    	mov	dx, bx
   927 00000715 29CA                    	sub	dx, cx       ;ponto extremo inferior
   928 00000717 50                      	push    ax			
   929 00000718 52                      	push	dx
   930 00000719 E8B4FF                  	call 	plot_xy
   931                                  	
   932 0000071C 89C2                    	mov 	dx, ax	
   933 0000071E 01CA                    	add	dx, cx       ;ponto extremo direita
   934 00000720 52                      	push    dx			
   935 00000721 53                      	push	bx
   936 00000722 E8ABFF                  	call 	plot_xy
   937                                  	
   938 00000725 89C2                    	mov	dx, ax
   939 00000727 29CA                    	sub	dx, cx       ;ponto extremo esquerda
   940 00000729 52                      	push    dx			
   941 0000072A 53                      	push	bx
   942 0000072B E8A2FF                  	call 	plot_xy
   943                                  		
   944 0000072E 89CF                    	mov	di, cx
   945 00000730 81EF0100                	sub	di, 1	 ;di=r-1
   946 00000734 BA0000                  	mov	dx, 0  	;dx ser� a vari�vel x. cx � a variavel y
   947                                  	
   948                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   949                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   950                                  ;valores positivos para d
   951                                  
   952                                  stay:				;loop
   953 00000737 89FE                    	mov	si, di
   954 00000739 81FE0000                	cmp	si, 0
   955 0000073D 7F0E                    	jg	inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   956 0000073F 89D6                    	mov	si, dx		;o jl � importante porque trata-se de conta com sinal
   957 00000741 D1E6                    	sal	si, 1		;multiplica por doi (shift arithmetic left)
   958 00000743 81C60300                	add	si, 3
   959 00000747 01F7                    	add	di, si     ;nesse ponto d=d+2*dx+3
   960 00000749 42                      	inc	dx		;incrementa dx
   961 0000074A E90E00                  	jmp	plotar
   962                                  inf:	
   963 0000074D 89D6                    	mov	si, dx
   964 0000074F 29CE                    	sub	si, cx  		;faz x - y (dx-cx), e salva em di 
   965 00000751 D1E6                    	sal	si, 1
   966 00000753 81C60500                	add	si, 5
   967 00000757 01F7                    	add	di, si		;nesse ponto d=d+2*(dx-cx)+5
   968 00000759 42                      	inc	dx		;incrementa x (dx)
   969 0000075A 49                      	dec	cx		;decrementa y (cx)
   970                                  	
   971                                  plotar:	
   972 0000075B 89D6                    	mov	si, dx
   973 0000075D 01C6                    	add	si, ax
   974 0000075F 56                      	push    si			;coloca a abcisa x+xc na pilha
   975 00000760 89CE                    	mov	si, cx
   976 00000762 01DE                    	add	si, bx
   977 00000764 56                      	push    si			;coloca a ordenada y+yc na pilha
   978 00000765 E868FF                  	call 	plot_xy		;toma conta do segundo octante
   979 00000768 89C6                    	mov	si, ax
   980 0000076A 01D6                    	add	si, dx
   981 0000076C 56                      	push    si			;coloca a abcisa xc+x na pilha
   982 0000076D 89DE                    	mov	si, bx
   983 0000076F 29CE                    	sub	si, cx
   984 00000771 56                      	push    si			;coloca a ordenada yc-y na pilha
   985 00000772 E85BFF                  	call 	plot_xy		;toma conta do s�timo octante
   986 00000775 89C6                    	mov	si, ax
   987 00000777 01CE                    	add	si, cx
   988 00000779 56                      	push    si			;coloca a abcisa xc+y na pilha
   989 0000077A 89DE                    	mov	si, bx
   990 0000077C 01D6                    	add	si, dx
   991 0000077E 56                      	push    si			;coloca a ordenada yc+x na pilha
   992 0000077F E84EFF                  	call 	plot_xy		;toma conta do segundo octante
   993 00000782 89C6                    	mov	si, ax
   994 00000784 01CE                    	add	si, cx
   995 00000786 56                      	push    si			;coloca a abcisa xc+y na pilha
   996 00000787 89DE                    	mov	si, bx
   997 00000789 29D6                    	sub	si, dx
   998 0000078B 56                      	push    si			;coloca a ordenada yc-x na pilha
   999 0000078C E841FF                  	call 	plot_xy		;toma conta do oitavo octante
  1000 0000078F 89C6                    	mov	si, ax
  1001 00000791 29D6                    	sub	si, dx
  1002 00000793 56                      	push    si			;coloca a abcisa xc-x na pilha
  1003 00000794 89DE                    	mov	si, bx
  1004 00000796 01CE                    	add	si, cx
  1005 00000798 56                      	push    si			;coloca a ordenada yc+y na pilha
  1006 00000799 E834FF                  	call 	plot_xy		;toma conta do terceiro octante
  1007 0000079C 89C6                    	mov	si, ax
  1008 0000079E 29D6                    	sub	si, dx
  1009 000007A0 56                      	push    si			;coloca a abcisa xc-x na pilha
  1010 000007A1 89DE                    	mov	si, bx
  1011 000007A3 29CE                    	sub	si, cx
  1012 000007A5 56                      	push    si			;coloca a ordenada yc-y na pilha
  1013 000007A6 E827FF                  	call 	plot_xy		;toma conta do sexto octante
  1014 000007A9 89C6                    	mov	si, ax
  1015 000007AB 29CE                    	sub	si, cx
  1016 000007AD 56                      	push    si			;coloca a abcisa xc-y na pilha
  1017 000007AE 89DE                    	mov	si, bx
  1018 000007B0 29D6                    	sub	si, dx
  1019 000007B2 56                      	push    si			;coloca a ordenada yc-x na pilha
  1020 000007B3 E81AFF                  	call 	plot_xy		;toma conta do quinto octante
  1021 000007B6 89C6                    	mov	si, ax
  1022 000007B8 29CE                    	sub	si, cx
  1023 000007BA 56                      	push    si			;coloca a abcisa xc-y na pilha
  1024 000007BB 89DE                    	mov	si, bx
  1025 000007BD 01D6                    	add	si, dx
  1026 000007BF 56                      	push    si			;coloca a ordenada yc-x na pilha
  1027 000007C0 E80DFF                  	call 	plot_xy		;toma conta do quarto octante
  1028                                  	
  1029 000007C3 39D1                    	cmp	cx, dx
  1030 000007C5 7203                    	jb	fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1031 000007C7 E96DFF                  	jmp	stay		;se cx (y) est� acima de dx (x), continua no loop
  1032                                  	
  1033                                  fim_circle:
  1034 000007CA 5F                      	pop	di
  1035 000007CB 5E                      	pop	si
  1036 000007CC 5A                      	pop	dx
  1037 000007CD 59                      	pop	cx
  1038 000007CE 5B                      	pop	bx
  1039 000007CF 58                      	pop	ax
  1040 000007D0 9D                      	popf
  1041 000007D1 5D                      	pop	bp
  1042 000007D2 C20600                  	ret	6
  1043                                  ;-----------------------------------------------------------------------------
  1044                                  ;    fun��o full_circle
  1045                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  1046                                  ; cor definida na variavel cor					  
  1047                                  full_circle:
  1048 000007D5 55                      	push 	bp
  1049 000007D6 89E5                    	mov	bp, sp
  1050 000007D8 9C                      	pushf                        ;coloca os flags na pilha
  1051 000007D9 50                      	push 	ax
  1052 000007DA 53                      	push 	bx
  1053 000007DB 51                      	push	cx
  1054 000007DC 52                      	push	dx
  1055 000007DD 56                      	push	si
  1056 000007DE 57                      	push	di
  1057                                  
  1058 000007DF 8B4608                  	mov	ax, [bp + 8]    ; resgata xc
  1059 000007E2 8B5E06                  	mov	bx, [bp + 6]    ; resgata yc
  1060 000007E5 8B4E04                  	mov	cx, [bp + 4]    ; resgata r
  1061                                  	
  1062 000007E8 89DE                    	mov	si, bx
  1063 000007EA 29CE                    	sub	si, cx
  1064 000007EC 50                      	push    ax			;coloca xc na pilha			
  1065 000007ED 56                      	push	si			;coloca yc-r na pilha
  1066 000007EE 89DE                    	mov	si, bx
  1067 000007F0 01CE                    	add	si, cx
  1068 000007F2 50                      	push	ax		;coloca xc na pilha
  1069 000007F3 56                      	push	si		;coloca yc+r na pilha
  1070 000007F4 E89B00                  	call 	line
  1071                                  	
  1072                                  		
  1073 000007F7 89CF                    	mov	di, cx
  1074 000007F9 81EF0100                	sub	di, 1	 ;di=r-1
  1075 000007FD BA0000                  	mov	dx, 0  	;dx ser� a vari�vel x. cx � a variavel y
  1076                                  	
  1077                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  1078                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  1079                                  ;valores positivos para d
  1080                                  
  1081                                  stay_full:				;loop
  1082 00000800 89FE                    	mov	si, di
  1083 00000802 81FE0000                	cmp	si, 0
  1084 00000806 7F0E                    	jg	inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  1085 00000808 89D6                    	mov	si, dx		;o jl � importante porque trata-se de conta com sinal
  1086 0000080A D1E6                    	sal	si, 1		;multiplica por doi (shift arithmetic left)
  1087 0000080C 81C60300                	add	si, 3
  1088 00000810 01F7                    	add	di, si     ;nesse ponto d=d+2*dx+3
  1089 00000812 42                      	inc	dx		;incrementa dx
  1090 00000813 E90E00                  	jmp	plotar_full
  1091                                  inf_full:	
  1092 00000816 89D6                    	mov	si, dx
  1093 00000818 29CE                    	sub	si, cx  		;faz x - y (dx-cx), e salva em di 
  1094 0000081A D1E6                    	sal	si, 1
  1095 0000081C 81C60500                	add	si, 5
  1096 00000820 01F7                    	add	di, si		;nesse ponto d=d+2*(dx-cx)+5
  1097 00000822 42                      	inc	dx		;incrementa x (dx)
  1098 00000823 49                      	dec	cx		;decrementa y (cx)
  1099                                  	
  1100                                  plotar_full:	
  1101 00000824 89C6                    	mov	si, ax
  1102 00000826 01CE                    	add	si, cx
  1103 00000828 56                      	push	si		;coloca a abcisa y+xc na pilha			
  1104 00000829 89DE                    	mov	si, bx
  1105 0000082B 29D6                    	sub	si, dx
  1106 0000082D 56                      	push    si		;coloca a ordenada yc-x na pilha
  1107 0000082E 89C6                    	mov	si, ax
  1108 00000830 01CE                    	add	si, cx
  1109 00000832 56                      	push	si		;coloca a abcisa y+xc na pilha	
  1110 00000833 89DE                    	mov	si, bx
  1111 00000835 01D6                    	add	si, dx
  1112 00000837 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1113 00000838 E85700                  	call 	line
  1114                                  	
  1115 0000083B 89C6                    	mov	si, ax
  1116 0000083D 01D6                    	add	si, dx
  1117 0000083F 56                      	push	si		;coloca a abcisa xc+x na pilha			
  1118 00000840 89DE                    	mov	si, bx
  1119 00000842 29CE                    	sub	si, cx
  1120 00000844 56                      	push    si		;coloca a ordenada yc-y na pilha
  1121 00000845 89C6                    	mov	si, ax
  1122 00000847 01D6                    	add	si, dx
  1123 00000849 56                      	push	si		;coloca a abcisa xc+x na pilha	
  1124 0000084A 89DE                    	mov	si, bx
  1125 0000084C 01CE                    	add	si, cx
  1126 0000084E 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1127 0000084F E84000                  	call	line
  1128                                  	
  1129 00000852 89C6                    	mov	si, ax
  1130 00000854 29D6                    	sub	si, dx
  1131 00000856 56                      	push	si		;coloca a abcisa xc-x na pilha			
  1132 00000857 89DE                    	mov	si, bx
  1133 00000859 29CE                    	sub	si, cx
  1134 0000085B 56                      	push    si		;coloca a ordenada yc-y na pilha
  1135 0000085C 89C6                    	mov	si, ax
  1136 0000085E 29D6                    	sub	si, dx
  1137 00000860 56                      	push	si		;coloca a abcisa xc-x na pilha	
  1138 00000861 89DE                    	mov	si, bx
  1139 00000863 01CE                    	add	si, cx
  1140 00000865 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1141 00000866 E82900                  	call	line
  1142                                  	
  1143 00000869 89C6                    	mov	si, ax
  1144 0000086B 29CE                    	sub	si, cx
  1145 0000086D 56                      	push	si		;coloca a abcisa xc-y na pilha			
  1146 0000086E 89DE                    	mov	si, bx
  1147 00000870 29D6                    	sub	si, dx
  1148 00000872 56                      	push    si		;coloca a ordenada yc-x na pilha
  1149 00000873 89C6                    	mov	si, ax
  1150 00000875 29CE                    	sub	si, cx
  1151 00000877 56                      	push	si		;coloca a abcisa xc-y na pilha	
  1152 00000878 89DE                    	mov	si, bx
  1153 0000087A 01D6                    	add	si, dx
  1154 0000087C 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1155 0000087D E81200                  	call	line
  1156                                  
  1157 00000880 39D1                    	cmp	cx, dx
  1158 00000882 7203                    	jb	fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1159 00000884 E979FF                  	jmp	stay_full		;se cx (y) est� acima de dx (x), continua no loop
  1160                                  	
  1161                                  	
  1162                                  fim_full_circle:
  1163 00000887 5F                      	pop	di
  1164 00000888 5E                      	pop	si
  1165 00000889 5A                      	pop	dx
  1166 0000088A 59                      	pop	cx
  1167 0000088B 5B                      	pop	bx
  1168 0000088C 58                      	pop	ax
  1169 0000088D 9D                      	popf
  1170 0000088E 5D                      	pop	bp
  1171 0000088F C20600                  	ret	6
  1172                                  ;-----------------------------------------------------------------------------
  1173                                  ;
  1174                                  ;   funcao line
  1175                                  ;
  1176                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1177                                  line:
  1178 00000892 55                      	push	bp
  1179 00000893 89E5                    	mov	bp, sp
  1180 00000895 9C                      	pushf                        ;coloca os flags na pilha
  1181 00000896 50                      	push 	ax
  1182 00000897 53                      	push 	bx
  1183 00000898 51                      	push	cx
  1184 00000899 52                      	push	dx
  1185 0000089A 56                      	push	si
  1186 0000089B 57                      	push	di
  1187 0000089C 8B460A                  	mov	ax, [bp + 10]   ; resgata os valores das coordenadas
  1188 0000089F 8B5E08                  	mov	bx, [bp + 8]    ; resgata os valores das coordenadas
  1189 000008A2 8B4E06                  	mov	cx, [bp + 6]    ; resgata os valores das coordenadas
  1190 000008A5 8B5604                  	mov	dx, [bp + 4]    ; resgata os valores das coordenadas
  1191 000008A8 39C8                    	cmp	ax, cx
  1192 000008AA 7408                    	je	line2
  1193 000008AC 721C                    	jb	line1
  1194 000008AE 91                      	xchg	ax, cx
  1195 000008AF 87DA                    	xchg	bx, dx
  1196 000008B1 E91600                  	jmp	line1
  1197                                  line2:		; deltax=0
  1198 000008B4 39D3                    	cmp	bx, dx  ;subtrai dx de bx
  1199 000008B6 7202                    	jb	line3
  1200 000008B8 87DA                    	xchg	bx, dx        ;troca os valores de bx e dx entre eles
  1201                                  line3:	; dx > bx
  1202 000008BA 50                      	push	ax
  1203 000008BB 53                      	push	bx
  1204 000008BC E811FE                  	call 	plot_xy
  1205 000008BF 39D3                    	cmp	bx, dx
  1206 000008C1 7503                    	jne	line31
  1207 000008C3 E9C600                  	jmp	fim_line
  1208                                  line31:	
  1209 000008C6 43                      	inc	bx
  1210 000008C7 E9F0FF                  	jmp	line3
  1211                                  ;deltax <>0
  1212                                  line1:
  1213                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1214                                  	; cx > ax
  1215 000008CA 51                      	push	cx
  1216 000008CB 29C1                    	sub	cx, ax
  1217 000008CD 890E[0600]              	mov	[deltax], cx
  1218 000008D1 59                      	pop	cx
  1219 000008D2 52                      	push	dx
  1220 000008D3 29DA                    	sub	dx, bx
  1221 000008D5 7702                    	ja	line32
  1222 000008D7 F7DA                    	neg	dx
  1223                                  line32:		
  1224 000008D9 8916[0800]              	mov	[deltay], dx
  1225 000008DD 5A                      	pop	dx
  1226                                  
  1227 000008DE 50                      	push	ax
  1228 000008DF A1[0600]                	mov	ax, [deltax]
  1229 000008E2 3B06[0800]              	cmp	ax, [deltay]
  1230 000008E6 58                      	pop	ax
  1231 000008E7 724D                    	jb	line5
  1232                                  
  1233                                  	; cx > ax e deltax>deltay
  1234 000008E9 51                      	push	cx
  1235 000008EA 29C1                    	sub	cx, ax
  1236 000008EC 890E[0600]              	mov	[deltax], cx
  1237 000008F0 59                      	pop	cx
  1238 000008F1 52                      	push	dx
  1239 000008F2 29DA                    	sub	dx, bx
  1240 000008F4 8916[0800]              	mov	[deltay], dx
  1241 000008F8 5A                      	pop	dx
  1242                                  
  1243 000008F9 89C6                    	mov	si, ax
  1244                                  line4:
  1245 000008FB 50                      	push	ax
  1246 000008FC 52                      	push	dx
  1247 000008FD 56                      	push	si
  1248 000008FE 29C6                    	sub	si, ax	;(x-x1)
  1249 00000900 A1[0800]                	mov	ax, [deltay]
  1250 00000903 F7EE                    	imul	si
  1251 00000905 8B36[0600]              	mov	si, [deltax]		;arredondar
  1252 00000909 D1EE                    	shr	si, 1
  1253                                  ; se numerador (DX)>0 soma se <0 subtrai
  1254 0000090B 81FA0000                	cmp	dx, 0
  1255 0000090F 7C09                    	jl	ar1
  1256 00000911 01F0                    	add	ax, si
  1257 00000913 81D20000                	adc	dx, 0
  1258 00000917 E90600                  	jmp	arc1
  1259                                  ar1:	
  1260 0000091A 29F0                    	sub	ax, si
  1261 0000091C 81DA0000                	sbb	dx, 0
  1262                                  arc1:
  1263 00000920 F73E[0600]              	idiv	word [deltax]
  1264 00000924 01D8                    	add	ax, bx
  1265 00000926 5E                      	pop	si
  1266 00000927 56                      	push	si
  1267 00000928 50                      	push	ax
  1268 00000929 E8A4FD                  	call	plot_xy
  1269 0000092C 5A                      	pop	dx
  1270 0000092D 58                      	pop	ax
  1271 0000092E 39CE                    	cmp	si, cx
  1272 00000930 745A                    	je	fim_line
  1273 00000932 46                      	inc	si
  1274 00000933 E9C5FF                  	jmp	line4
  1275                                  
  1276                                  line5:	
  1277 00000936 39D3                    	cmp	bx, dx
  1278 00000938 7203                    	jb 	line7
  1279 0000093A 91                      	xchg	ax, cx
  1280 0000093B 87DA                    	xchg	bx, dx
  1281                                  line7:
  1282 0000093D 51                      	push	cx
  1283 0000093E 29C1                    	sub	cx, ax
  1284 00000940 890E[0600]              	mov	[deltax], cx
  1285 00000944 59                      	pop	cx
  1286 00000945 52                      	push	dx
  1287 00000946 29DA                    	sub	dx,bx
  1288 00000948 8916[0800]              	mov	[deltay], dx
  1289 0000094C 5A                      	pop	dx
  1290                                  
  1291                                  
  1292                                  
  1293 0000094D 89DE                    	mov	si,bx
  1294                                  line6:
  1295 0000094F 52                      	push	dx
  1296 00000950 56                      	push	si
  1297 00000951 50                      	push	ax
  1298 00000952 29DE                    	sub	si, bx	;(y-y1)
  1299 00000954 A1[0600]                	mov	ax, [deltax]
  1300 00000957 F7EE                    	imul	si
  1301 00000959 8B36[0800]              	mov	si, [deltay]		;arredondar
  1302 0000095D D1EE                    	shr	si, 1
  1303                                  ; se numerador (DX)>0 soma se <0 subtrai
  1304 0000095F 81FA0000                	cmp	dx, 0
  1305 00000963 7C09                    	jl	ar2
  1306 00000965 01F0                    	add	ax, si
  1307 00000967 81D20000                	adc	dx, 0
  1308 0000096B E90600                  	jmp	arc2
  1309                                  ar2:	
  1310 0000096E 29F0                    	sub	ax, si
  1311 00000970 81DA0000                	sbb	dx, 0
  1312                                  arc2:
  1313 00000974 F73E[0800]              	idiv	word [deltay]
  1314 00000978 89C7                    	mov	di, ax
  1315 0000097A 58                      	pop	ax
  1316 0000097B 01C7                    	add	di, ax
  1317 0000097D 5E                      	pop	si
  1318 0000097E 57                      	push	di
  1319 0000097F 56                      	push	si
  1320 00000980 E84DFD                  	call	plot_xy
  1321 00000983 5A                      	pop	dx
  1322 00000984 39D6                    	cmp	si, dx
  1323 00000986 7404                    	je	fim_line
  1324 00000988 46                      	inc	si
  1325 00000989 E9C3FF                  	jmp	line6
  1326                                  
  1327                                  fim_line:
  1328 0000098C 5F                      	pop	di
  1329 0000098D 5E                      	pop	si
  1330 0000098E 5A                      	pop	dx
  1331 0000098F 59                      	pop	cx
  1332 00000990 5B                      	pop	bx
  1333 00000991 58                      	pop	ax
  1334 00000992 9D                      	popf
  1335 00000993 5D                      	pop	bp
  1336 00000994 C20800                  	ret	8
  1337                                  
  1338                                  ;*******************************************************************
  1339                                  segment data
  1340                                  
  1341                                  
  1342                                  ;	I R G B COR
  1343                                  ;	0 0 0 0 preto
  1344                                  ;	0 0 0 1 azul
  1345                                  ;	0 0 1 0 verde
  1346                                  ;	0 0 1 1 cyan
  1347                                  ;	0 1 0 0 vermelho
  1348                                  ;	0 1 0 1 magenta
  1349                                  ;	0 1 1 0 marrom
  1350                                  ;	0 1 1 1 branco
  1351                                  ;	1 0 0 0 cinza
  1352                                  ;	1 0 0 1 azul claro
  1353                                  ;	1 0 1 0 verde claro
  1354                                  ;	1 0 1 1 cyan claro
  1355                                  ;	1 1 0 0 rosa
  1356                                  ;	1 1 0 1 magenta claro
  1357                                  ;	1 1 1 0 amarelo
  1358                                  ;	1 1 1 1 branco intenso
  1359                                  
  1360 00000000 0F                      cor				db			branco_intenso
  1361                                  preto				equ			0
  1362                                  azul				equ			1
  1363                                  verde				equ			2
  1364                                  cyan				equ			3
  1365                                  vermelho			equ			4
  1366                                  magenta				equ			5
  1367                                  marrom				equ			6
  1368                                  branco				equ			7
  1369                                  cinza				equ			8
  1370                                  azul_claro			equ			9
  1371                                  verde_claro			equ			10
  1372                                  cyan_claro			equ			11
  1373                                  rosa				equ			12
  1374                                  magenta_claro			equ			13
  1375                                  amarelo				equ			14
  1376                                  branco_intenso			equ			15
  1377                                  
  1378 00000001 00                      modo_anterior			db			0
  1379 00000002 0000                    linha   			dw  			0
  1380 00000004 0000                    coluna  			dw  			0
  1381 00000006 0000                    deltax				dw			0
  1382 00000008 0000                    deltay				dw			0	
  1383 0000000A 46756E63616F204772-     mens    			db  			'Funcao Grafica'
  1384 00000013 6166696361         
  1385                                  
  1386                                  ; mensagens de erro impressas na tela ao longo do jogo
  1387 00000018 436F6D616E646F2049-     mensagem_comando_invalido	db			'Comando Invalido'
  1388 00000021 6E76616C69646F     
  1389                                  ; o espaço a mais em jogada invalida eh para que a mensagem tenha 16 caracteres igual comando invalido
  1390 00000028 4A6F6761646120496E-     mensagem_jogada_invalida	db			'Jogada Invalida '
  1391 00000031 76616C69646120     
  1392 00000038 506172746964612041-     mensgem_partida_acabou		db			'Partida Acabou: '
  1393 00000041 6361626F753A20     
  1394 00000048 43697263756C6F2056-     mensagem_circulo_venceu		db			'Circulo Venceu!!!'
  1395 00000051 656E636575212121   
  1396 00000059 456D70617465203A28      mensagem_empate			db			'Empate :('
  1397 00000062 582056656E63657521-     mensagem_x_venceu		db			'X Venceu!!!'
  1398 0000006B 2121               
  1399 0000006D 787878                  string_vazia			db			'xxx'
  1400                                  
  1401                                  ; armazena o novo comando que esta sendo digitado
  1402 00000070 000000                  novo_comando			db			0, 0, 0
  1403                                  
  1404                                  ; variaveis auxiliares usadas na impressao dos X's
  1405 00000073 0000                    x1				dw			0
  1406 00000075 0000                    y1				dw			0
  1407 00000077 0000                    x2				dw			0
  1408 00000079 0000                    y2				dw			0
  1409                                  
  1410                                  ; array que armazena a situacao atual de cada celula do jogo da velha
  1411                                  ; 0 indica que nada foi jogado na posicao
  1412                                  ; 1 indica que X foi jogado na posicao
  1413                                  ; 2 indica que circulo foi jogado na posicao
  1414 0000007B 000000000000000000      array_posicoes_jogadas		db			0, 0, 0, 0, 0, 0, 0, 0, 0
  1415 00000084 00                      i				db			0
  1416 00000085 00                      j				db			0
  1417 00000086 0000                    p				dw			0
  1418                                  
  1419                                  ; ultima jogada
  1420                                  ; 0 se ninguem jogou ainda
  1421                                  ; 1 se X foi jogado por ultimo
  1422                                  ; 2 se Circulo foi jogado por ultimo
  1423 00000088 00                      ultima_jogada			db			0
  1424                                  
  1425                                  ; estado da partida
  1426                                  ; 0 se o jogo nao terminou
  1427                                  ; 1 se X ganhou o jogo
  1428                                  ; 2 se Circulo ganhou jogo
  1429                                  ; 3 se o jogo empatou
  1430 00000089 00                      estado_partida			db			0
  1431                                  
  1432                                  ;*************************************************************************
  1433                                  segment stack stack
  1434 00000000 <res 00000200>          	resb 	512
  1435                                  stacktop:
